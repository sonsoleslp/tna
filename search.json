[{"path":"http://sonsoles.me/tna/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://sonsoles.me/tna/articles/complete_tutorial.html","id":"tutorial-of-tna-with-r","dir":"Articles","previous_headings":"","what":"Tutorial of TNA with R","title":"A showcase of the main tna functions","text":"","code":"# Install `tna` if you haven't already # install.packages(\"tna\") library(\"tna\") data(\"group_regulation\")"},{"path":"http://sonsoles.me/tna/articles/complete_tutorial.html","id":"building-tna-model","dir":"Articles","previous_headings":"Tutorial of TNA with R","what":"Building tna Model","title":"A showcase of the main tna functions","text":"","code":"model <- tna(group_regulation) print(model)"},{"path":[]},{"path":"http://sonsoles.me/tna/articles/complete_tutorial.html","id":"interpretation-of-the-model","dir":"Articles","previous_headings":"Tutorial of TNA with R > Plotting and interpreting tna models","what":"Interpretation of the model","title":"A showcase of the main tna functions","text":"","code":"# TNA visualization plot(model, minimum = 0.05, cut = 0.1)"},{"path":"http://sonsoles.me/tna/articles/complete_tutorial.html","id":"pruning-and-retaining-edges-that-matter","dir":"Articles","previous_headings":"Tutorial of TNA with R > Plotting and interpreting tna models","what":"Pruning and retaining edges that “matter”","title":"A showcase of the main tna functions","text":"","code":"layout(matrix(1:4, ncol = 2, byrow = TRUE)) # Pruning with different methods (using comparable parameters) pruned_threshold <- prune(model, method = \"threshold\", threshold = 0.15) pruned_lowest <- prune(model, method = \"lowest\", lowest = 0.15) pruned_disparity <- prune(model, method = \"disparity\", level = 0.5)  # Plotting for comparison plot(pruned_threshold) plot(pruned_lowest) plot(pruned_disparity) plot(model, minimum = 0.05, cut = 0.1)"},{"path":"http://sonsoles.me/tna/articles/complete_tutorial.html","id":"patterns","dir":"Articles","previous_headings":"Tutorial of TNA with R","what":"Patterns","title":"A showcase of the main tna functions","text":"","code":"layout(t(1:2)) # Identify 2-cliques (dyads) from the TNA model, excluding loops in the visualization # A clique of size 2 is essentially a pair of connected nodes cliques_of_two <- cliques(   model,    size = 2,    threshold = 0.15  # Only consider edges with weight > 0.15 ) print(cliques_of_two) #> Number of 2-cliques = 2 (weight threshold = 0.15) #> Showing 2 cliques starting from clique number 1 #>  #> Clique 1 #>           consensus plan #> consensus     0.082 0.40 #> plan          0.290 0.37 #>  #> Clique 2 #>           consensus discuss #> consensus     0.082    0.19 #> discuss       0.321    0.19 plot(cliques_of_two, vsize = 15, edge.label.cex = 2, esize = 20, ask = FALSE) layout(t(1:3)) # Identify 3-cliques (triads) from the TNA_Model # A clique of size 3 means a fully connected triplet of nodes cliques_of_three <- cliques(   model,    size = 3,    threshold = 0.05 # Only consider edges with weight > 0.05 ) print(cliques_of_three) #> Number of 3-cliques = 3 (weight threshold = 0.05) #> Showing 3 cliques starting from clique number 1 #>  #> Clique 1 #>           consensus discuss emotion #> consensus     0.082    0.19   0.073 #> discuss       0.321    0.19   0.106 #> emotion       0.320    0.10   0.077 #>  #> Clique 2 #>           consensus emotion plan #> consensus     0.082   0.073 0.40 #> emotion       0.320   0.077 0.10 #> plan          0.290   0.147 0.37 #>  #> Clique 3 #>            consensus coregulate discuss #> consensus      0.082      0.188    0.19 #> coregulate     0.135      0.023    0.27 #> discuss        0.321      0.084    0.19 plot(cliques_of_three, vsize = 25, edge.label.cex = 4, esize = 20, ask = FALSE) # Identify 4-cliques (quadruples) from the TNA_Model # A clique of size 4 means four nodes that are all mutually connected cliques_of_four <- cliques(   model,    size = 4,    threshold = 0.035 # Only consider edges with weight > 0.03 ) print(cliques_of_four) #> Number of 4-cliques = 1 (weight threshold = 0.035) #> Showing 1 cliques starting from clique number 1 #>  #> Clique 1 #>           consensus emotion monitor plan #> consensus     0.082   0.073   0.047 0.40 #> emotion       0.320   0.077   0.036 0.10 #> monitor       0.159   0.091   0.018 0.22 #> plan          0.290   0.147   0.076 0.37 plot(cliques_of_four, ask = FALSE)"},{"path":[]},{"path":"http://sonsoles.me/tna/articles/complete_tutorial.html","id":"node-level-measures","dir":"Articles","previous_headings":"Tutorial of TNA with R > Patterns > Centralities","what":"Node-level measures","title":"A showcase of the main tna functions","text":"","code":"# Compute centrality measures for the TNA model Centralities <- centralities(model)  # Visualize the centrality measures plot(Centralities) # Calculate hub scores and the authority scores for the network hits_scores <- igraph::hits_scores(as.igraph(model)) hub_scores <- hits_scores$hub authority_scores <- hits_scores$authority  # Print the calculated hub and authority scores for further analysis print(hub_scores) #>      adapt   cohesion  consensus coregulate    discuss    emotion    monitor  #>       0.96       1.00       0.65       0.69       0.74       0.82       0.74  #>       plan  synthesis  #>       0.87       0.90 print(authority_scores) #>      adapt   cohesion  consensus coregulate    discuss    emotion    monitor  #>      0.122      0.301      1.000      0.195      0.439      0.333      0.122  #>       plan  synthesis  #>      0.511      0.059"},{"path":"http://sonsoles.me/tna/articles/complete_tutorial.html","id":"edge-level-measures","dir":"Articles","previous_headings":"Tutorial of TNA with R > Patterns > Centralities","what":"Edge-level measures","title":"A showcase of the main tna functions","text":"","code":"# Edge betweenness Edge_betweeness <- betweenness_network(model) plot(Edge_betweeness)"},{"path":"http://sonsoles.me/tna/articles/complete_tutorial.html","id":"community-finding","dir":"Articles","previous_headings":"Tutorial of TNA with R > Patterns","what":"Community finding","title":"A showcase of the main tna functions","text":"","code":"communities <- communities(model) print(communities) #> Number of communities found by each algorithm #>  #>         walktrap      fast_greedy       label_prop          infomap  #>                1                3                1                1  #> edge_betweenness    leading_eigen        spinglass  #>                1                3                2  #>  #> Community assignments #>  #>       state walktrap fast_greedy label_prop infomap edge_betweenness leading_eigen #> 1     adapt        1           1          1       1                1             1 #> 2  cohesion        1           1          1       1                1             1 #> 3 consensus        1           1          1       1                1             2 #>   spinglass #> 1         1 #> 2         1 #> 3         1 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 6 rows ] plot(communities, method = \"leading_eigen\")"},{"path":[]},{"path":"http://sonsoles.me/tna/articles/complete_tutorial.html","id":"bootstrapping","dir":"Articles","previous_headings":"Tutorial of TNA with R > Network inference","what":"Bootstrapping","title":"A showcase of the main tna functions","text":"","code":"# Perform bootstrapping on the TNA model with a fixed seed for reproducibility set.seed(265) boot <- bootstrap(model, threshold = 0.05)  # Print a summary of the bootstrap results print(summary(boot)) #>         from    to weight p_value   sig cr_lower cr_upper ci_lower ci_upper #> 2   cohesion adapt 0.0029    0.51 FALSE   0.0022   0.0037  0.00059   0.0054 #> 3  consensus adapt 0.0047    0.16 FALSE   0.0036   0.0059  0.00313   0.0065 #> 4 coregulate adapt 0.0162    0.15 FALSE   0.0122   0.0203  0.01078   0.0222 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 75 rows ]  # Show the non-significant edges (p-value >= 0.05 in this case) # These are edges that are less likely to be stable across bootstrap samples print(boot, type = \"nonsig\") #> Non-significant Edges #>  #>         from    to weight p_value cr_lower cr_upper ci_lower ci_upper #> 2   cohesion adapt 0.0029    0.51   0.0022   0.0037  0.00059   0.0054 #> 3  consensus adapt 0.0047    0.16   0.0036   0.0059  0.00313   0.0065 #> 4 coregulate adapt 0.0162    0.15   0.0122   0.0203  0.01078   0.0222 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 24 rows ]"},{"path":"http://sonsoles.me/tna/articles/complete_tutorial.html","id":"permutation","dir":"Articles","previous_headings":"Tutorial of TNA with R > Network inference","what":"Permutation","title":"A showcase of the main tna functions","text":"","code":"# Create TNA for the high-achievers subset (rows 1 to 1000) Hi <- tna(group_regulation[1:1000, ])  # Create TNA for the low-achievers subset (rows 1001 to 2000) Lo <- tna(group_regulation[1001:2000, ])  # Plot a comparison of the \"Hi\" and \"Lo\" models # The 'minimum' parameter is set to 0.001, so edges with weights >= 0.001 are shown plot_compare(Hi, Lo, minimum = 0.01) # Run a permutation test to determine statistical significance of differences # between \"Hi\" and \"Lo\" # The 'iter' argument is set to 1000, meaning 1000 permutations are performed Permutation <- permutation_test(Hi, Lo, iter = 1000, measures = \"Betweenness\")  # Plot the significant differences identified in the permutation test plot(Permutation, minimum = 0.01) print(Permutation$edges$stats) #>             edge_name diff_true effect_size p_value #> 1      adapt -> adapt   0.00000         NaN   1.000 #> 2   cohesion -> adapt   0.00533       1.991   0.061 #> 3  consensus -> adapt  -0.00132      -0.763   0.412 #> 4 coregulate -> adapt   0.01122       2.002   0.048 #> 5    discuss -> adapt  -0.09616     -11.482   0.001 #> 6    emotion -> adapt   0.00167       0.907   0.460 #> 7    monitor -> adapt  -0.00019      -0.034   0.943 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 74 rows ] print(Permutation$centralities$stats) #>        state  centrality diff_true effect_size p_value #> 1      adapt Betweenness        -9       -1.31   0.221 #> 2   cohesion Betweenness         1        0.79   0.315 #> 3  consensus Betweenness         0         NaN   1.000 #> 4 coregulate Betweenness         3        1.02   0.323 #> 5    discuss Betweenness         2        4.55   0.006 #> 6    emotion Betweenness         0         NaN   1.000 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 3 rows ]"},{"path":"http://sonsoles.me/tna/articles/complete_tutorial.html","id":"interpreting-the-results-of-the-case-dropping-bootstrap-for-centrality-indices","dir":"Articles","previous_headings":"Tutorial of TNA with R > Network inference","what":"Interpreting the Results of the Case-Dropping Bootstrap for Centrality Indices","title":"A showcase of the main tna functions","text":"","code":"# Results of the Case-Dropping Bootstrap for Centrality Indices Centrality_stability <- estimate_centrality_stability(model, iter = 100) plot(Centrality_stability)"},{"path":"http://sonsoles.me/tna/articles/ftna.html","id":"ftna-tutorial","dir":"Articles","previous_headings":"","what":"FTNA tutorial","title":"Frequency-based tna","text":"","code":"# Install 'tna' package from CRAN if needed (uncomment if required). # install.packages(\"tna\")  # Load packages library(\"tna\")  # Load example data provided within the 'tna' package,  # representing group regulatory interactions data(group_regulation)  # Run FTNA on 'group_regulation' data using raw counts of  # transitions (\"absolute\" type) and print the result model <- ftna(group_regulation)  # Print the output to inspect the model print(model) #> State Labels #>  #> adapt, cohesion, consensus, coregulate, discuss, emotion, monitor, plan, synthesis  #>  #> Transition Frequency Matrix #>  #>            adapt cohesion consensus coregulate discuss emotion monitor plan #> adapt          0      139       243         11      30      61      17    8 #> cohesion       5       46       844        202     101     196      56  239 #> consensus     30       94       519       1188    1190     460     295 2505 #>            synthesis #> adapt              0 #> cohesion           6 #> consensus         48 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 6 rows ] #>  #> Initial Probabilities #>  #>      adapt   cohesion  consensus coregulate    discuss    emotion    monitor  #>      0.011      0.060      0.214      0.019      0.175      0.151      0.144  #>       plan  synthesis  #>      0.204      0.019 # Calculate the Transition Network Analysis (TNA) on the group_regulation  # data with scaled weights between 0 and 1 model_scaled <- ftna(group_regulation, scaling = \"minmax\") print(model_scaled) # Print the FTNA model with scaled weights #> State Labels #>  #> adapt, cohesion, consensus, coregulate, discuss, emotion, monitor, plan, synthesis  #>  #> Transition Frequency Matrix #>  #>             adapt cohesion consensus coregulate discuss emotion monitor   plan #> adapt      0.0000   0.0555     0.097     0.0044   0.012   0.024  0.0068 0.0032 #> cohesion   0.0020   0.0184     0.337     0.0806   0.040   0.078  0.0224 0.0954 #> consensus  0.0120   0.0375     0.207     0.4743   0.475   0.184  0.1178 1.0000 #>            synthesis #> adapt         0.0000 #> cohesion      0.0024 #> consensus     0.0192 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 6 rows ] #>  #> Initial Probabilities #>  #>      adapt   cohesion  consensus coregulate    discuss    emotion    monitor  #>      0.011      0.060      0.214      0.019      0.175      0.151      0.144  #>       plan  synthesis  #>      0.204      0.019"},{"path":"http://sonsoles.me/tna/articles/ftna.html","id":"plotting","dir":"Articles","previous_headings":"FTNA tutorial","what":"Plotting","title":"Frequency-based tna","text":"","code":"# Plotting the two weights together to see if the scaling distorts the data  # Combine weights from absolute and scaled models into a data frame for plotting weights_data <- data.frame(   Absolute = as.vector(model$weights), # Extract absolute weights as a vector   Scaled = as.vector(model_scaled$weights) # Extract scaled weights as a vector ) corr <- cor(weights_data$Absolute, weights_data$Scaled, method = c(\"pearson\")) |>   round(digits = 2)  # Create a scatter plot comparing absolute vs. scaled weights plot_abs_scaled <- ggplot(weights_data, aes(x = Absolute, y = Scaled)) +   geom_point(color = \"steelblue\", alpha = 0.6, size = 2) +  # Add points with specified aesthetics   geom_smooth(formula = y ~ x, method = \"lm\", color = \"red\", linetype = \"dashed\") + # Add a linear trend line   # geom_smooth(method = lm, formula = y ~ x, se = FALSE) +   geom_text(x = 0.1, y = 0.9, label = paste0('r = ', corr), color = 'red')   # stat_cor(aes(label = after_stat(r.label)), label.x = 0.1, label.y = 0.9,    #          size = 4, color = \"black\", method = \"spearman\") + # Display Spearman correlation   labs(x = \"Absolute Weights\", y = \"Scaled Weights\") + # Label axes   theme_minimal() # Apply a minimal theme for the plot #> NULL  # Display the scatter plot plot_abs_scaled # Calculate the Transition Network Analysis (TNA) on the `group_regulation`  # data with ranked weights model_ranked <- ftna(group_regulation, scaling = \"rank\") print(model_ranked) # Print the FTNA model with ranked weights # Combine weights from absolute and ranked models into a data frame for plotting weights_data <- data.frame(   Absolute = as.vector(model$weights), # Extract absolute weights as a vector   Ranked = as.vector(model_ranked$weights) # Extract ranked weights as a vector )  # Create a scatter plot comparing Absolute vs. Ranked weights with correlation annotations plot_abs_ranked <- ggplot(weights_data, aes(x = Absolute, y = Ranked)) +   geom_point(color = \"steelblue\", alpha = 0.6, size = 2) +  # Add points with specified aesthetics   geom_smooth(formula = y ~ x, method = \"lm\", color = \"red\", linetype = \"dashed\") +  # Add a linear trend line   # stat_cor(aes(label = paste(\"Spearman: \", round(after_stat(r), 2))),    #          method = \"spearman\", label.x = 0.1, label.y = 0.9, size = 4, color = \"black\") + # Spearman correlation annotation   # stat_cor(aes(label = paste(\"Pearson: \", round(after_stat(r), 2))),    #          method = \"pearson\", label.x = 0.1, label.y = 0.8, size = 4, color = \"darkgreen\") + # Pearson correlation annotation   labs(x = \"Absolute Weights\", y = \"Ranked Weights\") + # Label axes   theme_minimal() # Apply a minimal theme for the plot  # Display the scatter plot plot_abs_ranked"},{"path":"http://sonsoles.me/tna/articles/ftna.html","id":"pruning","dir":"Articles","previous_headings":"FTNA tutorial","what":"Pruning","title":"Frequency-based tna","text":"","code":"layout(matrix(1:4, ncol = 2)) # Pruning with different methods pruned_threshold <- prune(model_scaled, method = \"threshold\", threshold = 0.1) pruned_lowest <- prune(model_scaled, method = \"lowest\", lowest = 0.15) pruned_disparity <- prune(model_scaled, method = \"disparity\", alpha = 0.5)  # Plotting for comparison plot(pruned_threshold) plot(pruned_lowest) plot(pruned_disparity) plot(model_scaled, minimum = 0.05, cut = 0.1)"},{"path":"http://sonsoles.me/tna/articles/ftna.html","id":"patterns","dir":"Articles","previous_headings":"FTNA tutorial","what":"Patterns","title":"Frequency-based tna","text":"","code":"# Identify 2-cliques (dyads) from the FTNA model with a weight threshold,  # excluding loops in visualization. # A 2-clique represents a pair of nodes that are strongly connected based on  # the specified weight threshold. layout(matrix(1:6, ncol = 3)) cliques_of_two <- cliques(   model_scaled,      # The FTNA model with scaled edge weights   size = 2,          # Looking for pairs of connected nodes (dyads)   threshold = 0.1    # Only include edges with weights greater than 0.1 )  # Print and visualize the identified 2-cliques (dyads) print(cliques_of_two)  # Display details of 2-cliques #> Number of 2-cliques = 8 (weight threshold = 0.1) #> Showing 6 cliques starting from clique number 1 #>  #> Clique 1 #>           consensus plan #> consensus      0.21 1.00 #> plan           0.71 0.92 #>  #> Clique 2 #>           consensus discuss #> consensus      0.21    0.48 #> discuss        0.51    0.31 #>  #> Clique 3 #>         discuss emotion #> discuss    0.31   0.167 #> emotion    0.12   0.087 #>  #> Clique 4 #>         emotion plan #> emotion   0.087 0.11 #> plan      0.361 0.92 #>  #> Clique 5 #>           consensus emotion #> consensus      0.21   0.184 #> emotion        0.36   0.087 #>  #> Clique 6 #>         monitor plan #> monitor    0.01 0.12 #> plan       0.19 0.92 plot(cliques_of_two, ask = F, vsize = 20)   # Visualize 2-cliques in the network layout(matrix(1:6, ncol = 3)) # Identify 3-cliques (triads) from the FTNA model. # A 3-clique is a fully connected set of three nodes, indicating a strong  # triplet structure. cliques_of_three <- cliques(   model_scaled,      # The FTNA model with scaled edge weights   size = 3,          # Looking for triplets of fully connected nodes (triads)   threshold = 0.05   # Only include edges with weights greater than 0.05 )  # Print and visualize the identified 3-cliques (triads) # Uncomment the code below to view the results print(cliques_of_three) # Display details of 3-cliques #> Number of 3-cliques = 5 (weight threshold = 0.05) #> Showing 5 cliques starting from clique number 1 #>  #> Clique 1 #>            consensus coregulate discuss #> consensus       0.21      0.474    0.48 #> coregulate      0.11      0.018    0.22 #> discuss         0.51      0.133    0.31 #>  #> Clique 2 #>           consensus discuss emotion #> consensus      0.21    0.48   0.184 #> discuss        0.51    0.31   0.167 #> emotion        0.36    0.12   0.087 #>  #> Clique 3 #>           consensus emotion plan #> consensus      0.21   0.184 1.00 #> emotion        0.36   0.087 0.11 #> plan           0.71   0.361 0.92 #>  #> Clique 4 #>           consensus monitor plan #> consensus     0.207    0.12 1.00 #> monitor       0.091    0.01 0.12 #> plan          0.714    0.19 0.92 #>  #> Clique 5 #>          cohesion emotion  plan #> cohesion    0.018   0.078 0.095 #> emotion     0.368   0.087 0.113 #> plan        0.062   0.361 0.920 plot(cliques_of_three, ask = FALSE)  # Visualize 3-cliques in the network layout(matrix(1:6, ncol = 3)) # Identify 4-cliques (quadruples) from the FTNA model. # A 4-clique includes four nodes where each node is connected to every other  # node in the group. # Uncomment the code below to view the results cliques_of_four <- cliques(   model_scaled,      # The FTNA model with scaled edge weights   size = 4,          # Looking for quadruples of fully connected nodes (4-cliques)   threshold = 0.03   # Only include edges with weights greater than 0.03 )  # Print and visualize the identified 4-cliques (quadruples)  # Uncomment the code below to view the results print(cliques_of_four)  # Display details of 4-cliques #> Number of 4-cliques = 11 (weight threshold = 0.03) #> Showing 6 cliques starting from clique number 1 #>  #> Clique 1 #>            consensus coregulate emotion plan #> consensus       0.21      0.474   0.184 1.00 #> coregulate      0.11      0.018   0.135 0.19 #> emotion         0.36      0.039   0.087 0.11 #> plan            0.71      0.042   0.361 0.92 #>  #> Clique 2 #>            consensus coregulate discuss emotion #> consensus       0.21      0.474    0.48   0.184 #> coregulate      0.11      0.018    0.22   0.135 #> discuss         0.51      0.133    0.31   0.167 #> emotion         0.36      0.039    0.12   0.087 #>  #> Clique 3 #>            coregulate discuss emotion monitor #> coregulate      0.018    0.22   0.135   0.068 #> discuss         0.133    0.31   0.167   0.035 #> emotion         0.039    0.12   0.087   0.041 #> monitor         0.033    0.21   0.052   0.010 #>  #> Clique 4 #>            consensus coregulate discuss monitor #> consensus      0.207      0.474    0.48   0.118 #> coregulate     0.106      0.018    0.22   0.068 #> discuss        0.507      0.133    0.31   0.035 #> monitor        0.091      0.033    0.21   0.010 #>  #> Clique 5 #>           consensus discuss emotion monitor #> consensus     0.207    0.48   0.184   0.118 #> discuss       0.507    0.31   0.167   0.035 #> emotion       0.363    0.12   0.087   0.041 #> monitor       0.091    0.21   0.052   0.010 #>  #> Clique 6 #>            coregulate emotion monitor plan #> coregulate      0.018   0.135   0.068 0.19 #> emotion         0.039   0.087   0.041 0.11 #> monitor         0.033   0.052   0.010 0.12 #> plan            0.042   0.361   0.186 0.92 plot(cliques_of_four, ask = FALSE)   # Visualize 4-cliques in the network # Identify 5-cliques (quintuples) from the FTNA model, summing edge weights. # Here, the sum of edge weights in both directions must meet the specified  # threshold for inclusion. # Uncomment the code below to view the results cliques_of_five <- cliques(   model_scaled,      # The FTNA model with scaled edge weights   size = 5,          # Looking for quintuples of fully connected nodes (5-cliques)   threshold = 0.1,   # Only edges with total bidirectional weights greater than 0.1   sum_weights = TRUE # Sum edge weight in both directions when computing  threshold )  # Print and visualize the identified 5-cliques (quintuples) print(cliques_of_five)  # Display details of 5-cliques #> Number of 5-cliques = 1 (weight threshold = 0.1) #> Showing 1 cliques starting from clique number 1 #>  #> Clique 1 #>            consensus coregulate discuss emotion  plan #> consensus       0.21      0.474    0.48   0.184 1.000 #> coregulate      0.11      0.018    0.22   0.135 0.188 #> discuss         0.51      0.133    0.31   0.167 0.018 #> emotion         0.36      0.039    0.12   0.087 0.113 #> plan            0.71      0.042    0.17   0.361 0.920 plot(cliques_of_five, ask = FALSE)   # Visualize 5-cliques in the network"},{"path":"http://sonsoles.me/tna/articles/ftna.html","id":"graph-level-measures","dir":"Articles","previous_headings":"FTNA tutorial","what":"Graph level measures","title":"Frequency-based tna","text":"","code":"summary(model_scaled) #> # A tibble: 13 × 2 #>    metric                        value #>  * <chr>                         <dbl> #>  1 Node Count                   9      #>  2 Edge Count                  78      #>  3 Network Density              1      #>  4 Mean Distance                0.0240 #>  5 Mean Out-Strength            1.13   #>  6 SD Out-Strength              0.886  #>  7 Mean In-Strength             1.13   #>  8 SD In-Strength               0.878  #>  9 Mean Out-Degree              8.67   #> 10 SD Out-Degree                0.707  #> 11 Centralization (Out-Degree)  0.0156 #> 12 Centralization (In-Degree)   0.0156 #> 13 Reciprocity                  0.986 summary(pruned_disparity) #> # A tibble: 13 × 2 #>    metric                       value #>  * <chr>                        <dbl> #>  1 Node Count                   9     #>  2 Edge Count                  39     #>  3 Network Density              0.542 #>  4 Mean Distance                0.188 #>  5 Mean Out-Strength            0.900 #>  6 SD Out-Strength              0.700 #>  7 Mean In-Strength             0.900 #>  8 SD In-Strength               0.673 #>  9 Mean Out-Degree              4.33  #> 10 SD Out-Degree                1.22  #> 11 Centralization (Out-Degree)  0.234 #> 12 Centralization (In-Degree)   0.516 #> 13 Reciprocity                  0.615"},{"path":"http://sonsoles.me/tna/articles/ftna.html","id":"node-level-measures","dir":"Articles","previous_headings":"FTNA tutorial","what":"Node level measures","title":"Frequency-based tna","text":"","code":"# Compute centrality measures for the FTNA model centrality_measures <- centralities(model_scaled)  # Print the calculated centrality measures in the FTNA model print(centrality_measures) #> # A tibble: 9 × 10 #>   state      OutStrength InStrength ClosenessIn ClosenessOut Closeness Betweenness #> * <fct>            <dbl>      <dbl>       <dbl>        <dbl>     <dbl>       <dbl> #> 1 adapt            0.203      0.212       14.6          5.83     21.6           20 #> 2 cohesion         0.658      0.667        6.61         6.54     18.7            0 #> 3 consensus        2.32       2.34         1.25         5.89      7.68           0 #> 4 coregulate       0.768      0.818       11.3          4.02     13.0            0 #> 5 discuss          1.27       1.26         7.22         3.30      7.68           0 #> 6 emotion          1.05       1.02         4.46         6.68     16.9            0 #> 7 monitor          0.562      0.480       10.8          5.24     13.0            7 #> 8 plan             1.54       1.56        11.6          5.88     16.8            9 #> 9 synthesis        0.260      0.275       12.0          5.72     16.9           21 #> # ℹ 3 more variables: BetweennessRSP <dbl>, Diffusion <dbl>, Clustering <dbl> plot(centrality_measures) # Convert the FTNA model to an igraph object and  # calculate HITS (Hub and Authority) scores hits_results <- igraph::hits_scores(as.igraph(model_scaled))  # Extract the hub and authority scores from the HITS results for further analysis hub_scores <- hits_results$hub authority_scores <- hits_results$authority # Print the hub and authority scores to view influential nodes print(hub_scores) #>      adapt   cohesion  consensus coregulate    discuss    emotion    monitor  #>      0.056      0.240      0.955      0.256      0.377      0.305      0.189  #>       plan  synthesis  #>      1.000      0.074 print(authority_scores) #>      adapt   cohesion  consensus coregulate    discuss    emotion    monitor  #>      0.033      0.129      0.672      0.293      0.437      0.344      0.174  #>       plan  synthesis  #>      1.000      0.056"},{"path":"http://sonsoles.me/tna/articles/ftna.html","id":"edge-level-measures","dir":"Articles","previous_headings":"FTNA tutorial","what":"Edge level measures","title":"Frequency-based tna","text":"","code":"edge_between <- betweenness_network(model_scaled) plot(edge_between)"},{"path":"http://sonsoles.me/tna/articles/ftna.html","id":"community-detection","dir":"Articles","previous_headings":"FTNA tutorial","what":"Community detection","title":"Frequency-based tna","text":"","code":"detected_communities <- communities(model_scaled) plot(detected_communities, minimum = 0.05) print(detected_communities) #> Number of communities found by each algorithm #>  #>         walktrap      fast_greedy       label_prop          infomap  #>                1                3                1                1  #> edge_betweenness    leading_eigen        spinglass  #>                1                3                3  #>  #> Community assignments #>  #>       state walktrap fast_greedy label_prop infomap edge_betweenness leading_eigen #> 1     adapt        1           1          1       1                1             1 #> 2  cohesion        1           2          1       1                1             3 #> 3 consensus        1           3          1       1                1             2 #>   spinglass #> 1         1 #> 2         3 #> 3         2 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 6 rows ]"},{"path":"http://sonsoles.me/tna/articles/ftna.html","id":"bootstrapping","dir":"Articles","previous_headings":"FTNA tutorial","what":"Bootstrapping","title":"Frequency-based tna","text":"","code":"# Perform bootstrapping on the FTNA model with a fixed seed for reproducibility set.seed(265) boot <- bootstrap(model_scaled, threshold = 0.05)  # Print the combined results data frame containing print(summary(boot)) #>         from    to weight p_value   sig cr_lower cr_upper ci_lower ci_upper #> 2   cohesion adapt  0.002    0.51 FALSE   0.0015   0.0025   0.0004   0.0036 #> 3  consensus adapt  0.012    0.16 FALSE   0.0090   0.0150   0.0078   0.0163 #> 4 coregulate adapt  0.013    0.16 FALSE   0.0096   0.0160   0.0085   0.0177 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 75 rows ]  # View non-significant edges  which are less likely to be stable across bootstrap samples print(boot, type = \"nonsig\") #> Non-significant Edges #>  #>         from    to weight p_value cr_lower cr_upper ci_lower ci_upper #> 2   cohesion adapt  0.002    0.51   0.0015   0.0025   0.0004   0.0036 #> 3  consensus adapt  0.012    0.16   0.0090   0.0150   0.0078   0.0163 #> 4 coregulate adapt  0.013    0.16   0.0096   0.0160   0.0085   0.0177 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 25 rows ]"},{"path":"http://sonsoles.me/tna/articles/ftna.html","id":"comparing-models","dir":"Articles","previous_headings":"FTNA tutorial","what":"Comparing Models","title":"Frequency-based tna","text":"","code":"# Create FTNA for the high-achievers subset (rows 1 to 1000) Hi <- ftna(group_regulation[1:1000, ], scaling = \"minmax\")  # Create FTNA for the low-achievers subset (rows 1001 to 2000) Lo <- ftna(group_regulation[1001:2000, ], scaling = \"minmax\")  # Plot a comparison of the \"Hi\" and \"Lo\" models # The 'minimum' parameter is set to 0.001, so edges with weights >= 0.001 are shown plot_compare(Hi, Lo, minimum = 0.0001) # Run a permutation test to determine statistical significance of  # differences between \"Hi\" and \"Lo\" # The 'it' parameter is set to 1000, meaning 1000 permutations are performed Permutation <- permutation_test(Hi, Lo, it = 1000)  # Plot the significant differences identified in the permutation test plot(Permutation, minimum = 0.01)"},{"path":"http://sonsoles.me/tna/articles/ftna.html","id":"centrality-stability","dir":"Articles","previous_headings":"FTNA tutorial","what":"Centrality stability","title":"Frequency-based tna","text":"","code":"Centrality_stability <- estimate_centrality_stability(model_scaled, iter = 100) plot(Centrality_stability)"},{"path":"http://sonsoles.me/tna/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mohammed Saqr. Author. Santtu Tikka. Author. Sonsoles López-Pernas. Author, maintainer.","code":""},{"path":"http://sonsoles.me/tna/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tikka S, López-Pernas S, Saqr M (2025). “tna: R Package Transition Network Analysis.” Applied Psychological Measurement. doi:10.1177/01466216251348840. Saqr M, López-Pernas S, Törmänen T, Kaliisa R, Misiejuk K, Tikka S (2025). “Transition Network Analysis: Novel Framework Modeling, Visualizing, Identifying Temporal Patterns Learners Learning Processes.” Proceedings 15th International Learning Analytics Knowledge Conference (LAK '25), 351–361. doi:10.1145/3706468.3706513. Saqr M, Tikka S, López-Pernas S (2025). “tna: Transition Network Analysis (TNA).” doi:10.32614/cran.package.tna, R package version 1.0.0.","code":"@Article{tna_package,   title = {{tna}: An {R} Package for Transition Network Analysis},   author = {Santtu Tikka and Sonsoles López-Pernas and Mohammed Saqr},   year = {2025},   doi = {10.1177/01466216251348840},   journal = {Applied Psychological Measurement}, } @InProceedings{tna_lak,   booktitle = {Proceedings of the 15th International Learning Analytics and Knowledge Conference (LAK '25)},   pages = {351--361},   doi = {10.1145/3706468.3706513},   author = {Mohammed Saqr and Sonsoles López-Pernas and Tiina Törmänen and Rogers Kaliisa and Kamila Misiejuk and Santtu Tikka},   title = {Transition Network Analysis: A Novel Framework for Modeling, Visualizing, and Identifying the Temporal Patterns of Learners and Learning Processes},   year = {2025}, } @Misc{tna_cran,   title = {{tna}: Transition Network Analysis ({TNA})},   author = {Mohammed Saqr and Santtu Tikka and Sonsoles López-Pernas},   note = {{R} package version 1.0.0},   year = {2025},   doi = {10.32614/cran.package.tna},   journal = {CRAN: Contributed Packages},   publisher = {The R Foundation}, }"},{"path":"http://sonsoles.me/tna/index.html","id":"tna-an-r-package-for-transition-network-analysis-","dir":"","previous_headings":"","what":"Transition Network Analysis (TNA)","title":"Transition Network Analysis (TNA)","text":"tna R package analysis relational dynamics Transition Network Analysis (TNA). TNA provides tools building TNA models, plotting transition networks, calculating centrality measures, identifying dominant events patterns. TNA statistical techniques (e.g., bootstrapping permutation tests) ensure reliability observed insights confirm identified dynamics meaningful. See (Saqr et al., 2025) details TNA.","code":""},{"path":"http://sonsoles.me/tna/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Transition Network Analysis (TNA)","text":"Check tutorials: Basics TNA Frequency-based TNA Clustering can also try Shiny app.","code":""},{"path":"http://sonsoles.me/tna/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Transition Network Analysis (TNA)","text":"can install recent stable version tna CRAN development version GitHub running one following:","code":"install.packages(\"tna\")  # install.packages(\"devtools\") # devtools::install_github(\"sonsoleslp/tna\")"},{"path":"http://sonsoles.me/tna/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Transition Network Analysis (TNA)","text":"Load package Example data Build Markov model Plot transition network  Calculate centrality measures Plot centrality measures  Estimate centrality stability Identify plot communities  Find plot cliques  Compare high achievers (first 1000) low achievers (last 1000) Simple comparison vs. permutation test comparison  Compare centralities","code":"library(\"tna\") data(\"group_regulation\", package = \"tna\") tna_model <- tna(group_regulation) summary(tna_model) # Default plot plot(tna_model) # Optimized plot plot(   tna_model, cut = 0.2, minimum = 0.05,    edge.label.position = 0.8, edge.label.cex = 0.7 ) cent <- centralities(tna_model) plot(cent, ncol = 3) estimate_centrality_stability(tna_model) #> Centrality Stability Coefficients #>  #>  InStrength OutStrength Betweenness  #>         0.9         0.9         0.7 coms <- communities(tna_model) plot(coms) cqs <- cliques(tna_model, threshold = 0.12) plot(cqs) tna_model_start_high <- tna(group_regulation[1:1000, ]) tna_model_start_low <- tna(group_regulation[1001:2000, ]) comparison <- permutation_test(   tna_model_start_high,    tna_model_start_low,   measures = c(\"InStrength\") ) plot_compare(tna_model_start_high, tna_model_start_low) plot(comparison) print(comparison$centralities$stats)"},{"path":"http://sonsoles.me/tna/reference/as.igraph.group_tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a Specific Group from a group_tna Object into an igraph Object. — as.igraph.group_tna","title":"Coerce a Specific Group from a group_tna Object into an igraph Object. — as.igraph.group_tna","text":"Coerce Specific Group group_tna Object igraph Object.","code":""},{"path":"http://sonsoles.me/tna/reference/as.igraph.group_tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a Specific Group from a group_tna Object into an igraph Object. — as.igraph.group_tna","text":"","code":"# S3 method for class 'group_tna' as.igraph(x, which, ...)"},{"path":"http://sonsoles.me/tna/reference/as.igraph.group_tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a Specific Group from a group_tna Object into an igraph Object. — as.igraph.group_tna","text":"x object convert. number name group. ... Additional arguments. None currently.","code":""},{"path":"http://sonsoles.me/tna/reference/as.igraph.group_tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a Specific Group from a group_tna Object into an igraph Object. — as.igraph.group_tna","text":"igraph object.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/as.igraph.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a Weight Matrix into an igraph Object. — as.igraph.matrix","title":"Coerce a Weight Matrix into an igraph Object. — as.igraph.matrix","text":"Coerce Weight Matrix igraph Object.","code":""},{"path":"http://sonsoles.me/tna/reference/as.igraph.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a Weight Matrix into an igraph Object. — as.igraph.matrix","text":"","code":"# S3 method for class 'matrix' as.igraph(x, mode = \"directed\", ...)"},{"path":"http://sonsoles.me/tna/reference/as.igraph.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a Weight Matrix into an igraph Object. — as.igraph.matrix","text":"x matrix edge weights. mode Character scalar, specifies igraph interpret supplied matrix. See also weighted argument, interpretation depends . Possible values : directed, undirected, upper, lower, max, min, plus. See details . ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/as.igraph.matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a Weight Matrix into an igraph Object. — as.igraph.matrix","text":"igraph object.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/as.igraph.tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a tna Object into an igraph Object. — as.igraph.tna","title":"Coerce a tna Object into an igraph Object. — as.igraph.tna","text":"Coerce tna Object igraph Object.","code":""},{"path":"http://sonsoles.me/tna/reference/as.igraph.tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a tna Object into an igraph Object. — as.igraph.tna","text":"","code":"# S3 method for class 'tna' as.igraph(x, mode = \"directed\", ...)"},{"path":"http://sonsoles.me/tna/reference/as.igraph.tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a tna Object into an igraph Object. — as.igraph.tna","text":"x tna object. mode Character scalar, specifies igraph interpret supplied matrix. See also weighted argument, interpretation depends . Possible values : directed, undirected, upper, lower, max, min, plus. See details . ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/as.igraph.tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a tna Object into an igraph Object. — as.igraph.tna","text":"igraph object.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/betweenness_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Build and Visualize a Network with Edge Betweenness — betweenness_network","title":"Build and Visualize a Network with Edge Betweenness — betweenness_network","text":"function builds network transition matrix tna object computes edge betweenness network.","code":""},{"path":"http://sonsoles.me/tna/reference/betweenness_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build and Visualize a Network with Edge Betweenness — betweenness_network","text":"","code":"betweenness_network(x, ...)  # S3 method for class 'tna' betweenness_network(x, ...)"},{"path":"http://sonsoles.me/tna/reference/betweenness_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build and Visualize a Network with Edge Betweenness — betweenness_network","text":"x tna object. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/betweenness_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build and Visualize a Network with Edge Betweenness — betweenness_network","text":"tna object edge weights edge betweenness values.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/betweenness_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build and Visualize a Network with Edge Betweenness — betweenness_network","text":"","code":"model <- tna(group_regulation) betweenness_network(model) #> State Labels #>  #> adapt, cohesion, consensus, coregulate, discuss, emotion, monitor, plan, synthesis  #>  #> Edge Betweenness Matrix #>  #>            adapt cohesion consensus coregulate discuss emotion monitor plan #> adapt          0        0         1          1       0       0       0    3 #> cohesion       0        0         0          6       0       0       2    0 #> consensus      0        0         0          0       0       0       0    4 #> coregulate     8        1         0          0       0       0       0    0 #> discuss        6        0         1          0       0       0       0    0 #> emotion        0        0         0          0       1       0       0    0 #> monitor        0        0         0          0       7       0       0    0 #> plan          11        3         2          3       0       3       3    8 #> synthesis      4        4         3          0       5       6       3    0 #>            synthesis #> adapt              0 #> cohesion           3 #> consensus          0 #> coregulate         1 #> discuss            1 #> emotion            7 #> monitor           10 #> plan               0 #> synthesis          0 #>  #> Initial Probabilities #>  #>      adapt   cohesion  consensus coregulate    discuss    emotion    monitor  #>     0.0115     0.0605     0.2140     0.0190     0.1755     0.1515     0.1440  #>       plan  synthesis  #>     0.2045     0.0195"},{"path":"http://sonsoles.me/tna/reference/bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Transition Networks from Sequence Data — bootstrap","title":"Bootstrap Transition Networks from Sequence Data — bootstrap","text":"Perform bootstrapping transition networks created sequence data stored tna object. Bootstrapped estimates edge weights returned confidence intervals significance testing.","code":""},{"path":"http://sonsoles.me/tna/reference/bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Transition Networks from Sequence Data — bootstrap","text":"","code":"bootstrap(x, ...)  # S3 method for class 'tna' bootstrap(   x,   iter = 1000,   level = 0.05,   method = \"stability\",   threshold,   consistency_range = c(0.75, 1.25),   ... )  # S3 method for class 'group_tna' bootstrap(   x,   iter = 1000,   level = 0.05,   method = \"stability\",   threshold,   consistency_range = c(0.75, 1.25),   ... )"},{"path":"http://sonsoles.me/tna/reference/bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Transition Networks from Sequence Data — bootstrap","text":"x tna group_tna object created sequence data. ... Ignored. iter integer specifying number bootstrap samples draw. Defaults 1000. level numeric value representing significance level hypothesis testing confidence intervals. Defaults 0.05. method character string. argument defines bootstrap test statistic. \"stability\" option (default) compares edge weights range \"consistent\" values defined consistency_range. Weights fall outside range considered insignificant. words, edge considered significant value within range (1 - level) * 100% bootstrap samples. \"threshold\" option instead compares edge weights user-specified threshold value. threshold numeric value compare edge weights . default 10th percentile edge weights. Used method = \"threshold\". consistency_range numeric vector length 2. Determines much edge weights may deviate (multiplicatively) observed values () considered insignificant. default c(0.75, 1.25) corresponds symmetric 25% deviation range. Used method = \"stability\".","code":""},{"path":"http://sonsoles.me/tna/reference/bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Transition Networks from Sequence Data — bootstrap","text":"tna_bootstrap object list containing following elements: weights_orig: original edge weight matrix. weights_sig: matrix significant transitions (estimated p-values significance level). weights_mean: mean weight matrix bootstrap samples. weights_sd: standard deviation matrix bootstrap samples. cr_lower: lower bound matrix consistency range edge weights. cr_upper: upper bound matrix consistency range edge weights. ci_lower: lower bound matrix bootstrap confidence intervals edge weights. ci_upper: upper bound matrix bootstrap confidence intervals edge weights. p_values: matrix estimated p-values edge weights. summary: data.frame summarizing edges, weights, p-values, statistical significance, consistency ranges, confidence intervals. x group_tna object, output group_tna_bootstrap object, list tna_bootstrap objects.","code":""},{"path":"http://sonsoles.me/tna/reference/bootstrap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Transition Networks from Sequence Data — bootstrap","text":"function first computes original edge weights specified cluster tna object. performs bootstrapping resampling sequence data recalculating edge weights bootstrap sample. mean standard deviation transitions computed, confidence intervals derived. function also estimates p-values edge identifies significant edges based specified significance level. matrix significant edges (estimated p-values significance level) generated. Additional statistics removed edges (considered significant) provided. results, including original transition matrix, bootstrapped estimates, summary statistics removed edges, returned structured list.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Transition Networks from Sequence Data — bootstrap","text":"","code":"model <- tna(group_regulation) # Small number of iterations for CRAN bootstrap(model, iter = 10) #> Non-significant Edges #>  #>          from         to       weight    p_value     cr_lower    cr_upper #> 2    cohesion      adapt 0.0029498525 0.72727273 0.0022123894 0.003687316 #> 3   consensus      adapt 0.0047400853 0.18181818 0.0035550640 0.005925107 #> 4  coregulate      adapt 0.0162436548 0.27272727 0.0121827411 0.020304569 #> 5     discuss      adapt 0.0713743356 0.09090909 0.0535307517 0.089217920 #> 6     emotion      adapt 0.0024673951 0.54545455 0.0018505464 0.003084244 #> 7     monitor      adapt 0.0111653873 0.18181818 0.0083740405 0.013956734 #> 8        plan      adapt 0.0009745006 0.54545455 0.0007308754 0.001218126 #> 9   synthesis      adapt 0.2346625767 0.09090909 0.1759969325 0.293328221 #> 10      adapt   cohesion 0.2730844794 0.09090909 0.2048133595 0.341355599 #> 11   cohesion   cohesion 0.0271386431 0.18181818 0.0203539823 0.033923304 #> 12  consensus   cohesion 0.0148522673 0.09090909 0.0111392005 0.018565334 #> 13 coregulate   cohesion 0.0360406091 0.18181818 0.0270304569 0.045050761 #> 14    discuss   cohesion 0.0475828904 0.09090909 0.0356871678 0.059478613 #> 15    emotion   cohesion 0.3253436729 0.09090909 0.2440077547 0.406679591 #> 16    monitor   cohesion 0.0558269365 0.09090909 0.0418702024 0.069783671 #> 17       plan   cohesion 0.0251745980 0.09090909 0.0188809485 0.031468248 #> 18  synthesis   cohesion 0.0337423313 0.18181818 0.0253067485 0.042177914 #> 19      adapt  consensus 0.4774066798 0.09090909 0.3580550098 0.596758350 #> 20   cohesion  consensus 0.4979351032 0.09090909 0.3734513274 0.622418879 #> 21  consensus  consensus 0.0820034761 0.09090909 0.0615026070 0.102504345 #> 22 coregulate  consensus 0.1345177665 0.09090909 0.1008883249 0.168147208 #> 23    discuss  consensus 0.3211845103 0.09090909 0.2408883827 0.401480638 #> 24    emotion  consensus 0.3204088826 0.09090909 0.2403066620 0.400511103 #> 25    monitor  consensus 0.1591067690 0.09090909 0.1193300768 0.198883461 #> 26       plan  consensus 0.2904011694 0.09090909 0.2178008771 0.363001462 #> 27  synthesis  consensus 0.4662576687 0.09090909 0.3496932515 0.582822086 #> 28      adapt coregulate 0.0216110020 0.54545455 0.0162082515 0.027013752 #> 29   cohesion coregulate 0.1191740413 0.09090909 0.0893805310 0.148967552 #> 30  consensus coregulate 0.1877073787 0.09090909 0.1407805340 0.234634223 #> 31 coregulate coregulate 0.0233502538 0.09090909 0.0175126904 0.029187817 #> 32    discuss coregulate 0.0842824601 0.09090909 0.0632118451 0.105353075 #> 33    emotion coregulate 0.0341910469 0.09090909 0.0256432852 0.042738809 #> 34    monitor coregulate 0.0579204466 0.09090909 0.0434403350 0.072400558 #> 35       plan coregulate 0.0172161767 0.09090909 0.0129121325 0.021520221 #> 36  synthesis coregulate 0.0444785276 0.36363636 0.0333588957 0.055598160 #> 37      adapt    discuss 0.0589390963 0.27272727 0.0442043222 0.073673870 #> 38   cohesion    discuss 0.0595870206 0.18181818 0.0446902655 0.074483776 #> 39  consensus    discuss 0.1880233844 0.09090909 0.1410175383 0.235029231 #> 40 coregulate    discuss 0.2736040609 0.09090909 0.2052030457 0.342005076 #> 41    discuss    discuss 0.1948873703 0.09090909 0.1461655277 0.243609213 #> 42    emotion    discuss 0.1018681706 0.09090909 0.0764011280 0.127335213 #> 43    monitor    discuss 0.3754361479 0.09090909 0.2815771110 0.469295185 #> 44       plan    discuss 0.0678902063 0.09090909 0.0509176547 0.084862758 #> 45  synthesis    discuss 0.0628834356 0.27272727 0.0471625767 0.078604294 #> 46      adapt    emotion 0.1198428291 0.09090909 0.0898821218 0.149803536 #> 47   cohesion    emotion 0.1156342183 0.09090909 0.0867256637 0.144542773 #> 48  consensus    emotion 0.0726813083 0.09090909 0.0545109812 0.090851635 #> 49 coregulate    emotion 0.1720812183 0.09090909 0.1290609137 0.215101523 #> 50    discuss    emotion 0.1057960010 0.09090909 0.0793470008 0.132245001 #> 51    emotion    emotion 0.0768417342 0.09090909 0.0576313007 0.096052168 #> 52    monitor    emotion 0.0907187718 0.09090909 0.0680390789 0.113398465 #> 53       plan    emotion 0.1468247523 0.09090909 0.1101185642 0.183530940 #> 54  synthesis    emotion 0.0705521472 0.18181818 0.0529141104 0.088190184 #> 55      adapt    monitor 0.0333988212 0.27272727 0.0250491159 0.041748527 #> 56   cohesion    monitor 0.0330383481 0.09090909 0.0247787611 0.041297935 #> 57  consensus    monitor 0.0466108390 0.09090909 0.0349581292 0.058263549 #> 58 coregulate    monitor 0.0862944162 0.09090909 0.0647208122 0.107868020 #> 59    discuss    monitor 0.0222728423 0.09090909 0.0167046317 0.027841053 #> 60    emotion    monitor 0.0363059570 0.09090909 0.0272294677 0.045382446 #> 61    monitor    monitor 0.0181437544 0.18181818 0.0136078158 0.022679693 #> 62       plan    monitor 0.0755237941 0.09090909 0.0566428455 0.094404743 #> 63  synthesis    monitor 0.0122699387 0.63636364 0.0092024540 0.015337423 #> 64      adapt       plan 0.0157170923 0.54545455 0.0117878193 0.019646365 #> 65   cohesion       plan 0.1410029499 0.09090909 0.1057522124 0.176253687 #> 66  consensus       plan 0.3957971243 0.09090909 0.2968478433 0.494746405 #> 67 coregulate       plan 0.2390862944 0.09090909 0.1793147208 0.298857868 #> 68    discuss       plan 0.0116426221 0.18181818 0.0087319666 0.014553278 #> 69    emotion       plan 0.0997532605 0.09090909 0.0748149454 0.124691576 #> 70    monitor       plan 0.2156315422 0.09090909 0.1617236567 0.269539428 #> 71       plan       plan 0.3742082183 0.09090909 0.2806561637 0.467760273 #> 72  synthesis       plan 0.0751533742 0.18181818 0.0563650307 0.093941718 #> 74   cohesion  synthesis 0.0035398230 0.54545455 0.0026548673 0.004424779 #> 75  consensus  synthesis 0.0075841365 0.18181818 0.0056881024 0.009480171 #> 76 coregulate  synthesis 0.0187817259 0.36363636 0.0140862944 0.023477157 #> 77    discuss  synthesis 0.1409769679 0.09090909 0.1057327259 0.176221210 #> 78    emotion  synthesis 0.0028198802 0.54545455 0.0021149101 0.003524850 #> 79    monitor  synthesis 0.0160502442 0.09090909 0.0120376832 0.020062805 #> 80       plan  synthesis 0.0017865844 0.36363636 0.0013399383 0.002233230 #>        ci_lower    ci_upper #> 2  0.0007154514 0.005853452 #> 3  0.0031129137 0.005671662 #> 4  0.0132447588 0.023734177 #> 5  0.0639102694 0.077350676 #> 6  0.0013939670 0.003962884 #> 7  0.0084887477 0.016804566 #> 8  0.0006931379 0.001612124 #> 9  0.1991121290 0.265929971 #> 10 0.2438849341 0.304517088 #> 11 0.0204414777 0.034729046 #> 12 0.0121438634 0.016986071 #> 13 0.0336015394 0.047275951 #> 14 0.0407388819 0.051731668 #> 15 0.3198138081 0.348200484 #> 16 0.0546827166 0.067504871 #> 17 0.0214199094 0.027635522 #> 18 0.0243293157 0.041193801 #> 19 0.4375856164 0.510464301 #> 20 0.4816999772 0.511798335 #> 21 0.0795134000 0.085124888 #> 22 0.1279916848 0.142816360 #> 23 0.3102872939 0.331563911 #> 24 0.3061226383 0.334021665 #> 25 0.1406273228 0.165733139 #> 26 0.2904613620 0.302426062 #> 27 0.4519454547 0.474709182 #> 28 0.0138747777 0.028889862 #> 29 0.1081509428 0.135100592 #> 30 0.1845652268 0.195471833 #> 31 0.0195228825 0.028655198 #> 32 0.0774539686 0.089039981 #> 33 0.0307364985 0.037181083 #> 34 0.0481876898 0.064509509 #> 35 0.0157446573 0.019113912 #> 36 0.0314086909 0.055746528 #> 37 0.0474250807 0.083352172 #> 38 0.0515641297 0.074910880 #> 39 0.1822115208 0.194140635 #> 40 0.2526133405 0.291462058 #> 41 0.1827017499 0.206165890 #> 42 0.0911264716 0.104349397 #> 43 0.3523562576 0.388466353 #> 44 0.0606717194 0.070131385 #> 45 0.0393735329 0.080902619 #> 46 0.0994497386 0.127451022 #> 47 0.1043508374 0.122402431 #> 48 0.0667291946 0.078452793 #> 49 0.1646408934 0.186794222 #> 50 0.1017010465 0.110091005 #> 51 0.0724399974 0.081013369 #> 52 0.0793048950 0.101370278 #> 53 0.1416414240 0.155900076 #> 54 0.0636588321 0.092343707 #> 55 0.0238752319 0.044347108 #> 56 0.0256613738 0.037155249 #> 57 0.0416586253 0.047148645 #> 58 0.0788399000 0.089532508 #> 59 0.0196720929 0.025529809 #> 60 0.0317189728 0.044417392 #> 61 0.0145789467 0.025502305 #> 62 0.0716259273 0.081396523 #> 63 0.0064456936 0.023287649 #> 64 0.0138705706 0.027601400 #> 65 0.1277751328 0.162044079 #> 66 0.3863050415 0.401190207 #> 67 0.2278896741 0.250911567 #> 68 0.0100654860 0.014412443 #> 69 0.0900343110 0.105013932 #> 70 0.2020646340 0.232618406 #> 71 0.3606772819 0.372475232 #> 72 0.0642000706 0.096650418 #> 74 0.0017293635 0.004752178 #> 75 0.0063470029 0.009637314 #> 76 0.0112492187 0.024135778 #> 77 0.1366116130 0.150579286 #> 78 0.0017226244 0.003464936 #> 79 0.0126097843 0.019893227 #> 80 0.0011742999 0.002273490"},{"path":"http://sonsoles.me/tna/reference/build_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a Transition Network Analysis Model — build_model","title":"Build a Transition Network Analysis Model — build_model","text":"Construct transition network analysis (TNA) model sequence data. function takes data set sequence events states input builds TNA model. extracts edge weights initial probabilities data along state labels. function also accepts weight matrices initial state probabilities directly.","code":""},{"path":"http://sonsoles.me/tna/reference/build_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a Transition Network Analysis Model — build_model","text":"","code":"build_model(x, type = \"relative\", scaling = character(0L), ...)  # Default S3 method build_model(   x,   type = \"relative\",   scaling = character(0L),   inits,   params = list(),   ... )  # S3 method for class 'matrix' build_model(x, type = \"relative\", scaling = character(0L), inits, ...)  # S3 method for class 'stslist' build_model(   x,   type = \"relative\",   scaling = character(0L),   cols = seq(1, ncol(x)),   params = list(),   ... )  # S3 method for class 'data.frame' build_model(   x,   type = \"relative\",   scaling = character(0L),   cols = seq(1, ncol(x)),   params = list(),   ... )  # S3 method for class 'tna_data' build_model(x, type = \"relative\", scaling = character(0), params = list(), ...)  tna(x, ...)  ftna(x, ...)  ctna(x, ...)  atna(x, ...)"},{"path":"http://sonsoles.me/tna/reference/build_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a Transition Network Analysis Model — build_model","text":"x stslist (TraMineR), data.frame, matrix, tna_data object (see prepare_data()). stslist data.frame objects x describe sequence events states used building Markov model.  x matrix, assumed element row column j weight edge representing transition state state j. x data.frame, must wide format (see cols define columns time points). type character string describing weight matrix type. Currently supports following types: \"relative\" relative frequencies (probabilities, default) \"frequency\" frequencies. \"co-occurrence\" co-occurrences. \"n-gram\" n-gram transitions. Captures higher-order transitions considering sequences n states, useful identifying longer patterns. \"gap\" allows transitions non-adjacent states, transitions weighted gap size. \"window\" creates transitions states within sliding window, capturing local relationships (several sequences together). \"reverse\" considers sequences reverse order (resulting called reply network contexts). resulting weight matrix transpose \"frequency\" option. \"attention\" aggregates downstream pairs states exponential decay gap states. parameter lambda can used control decay rate (default 1)- scaling character vector describing scale weights defined type. vector provided, scaling options applied respective order. example, c(\"rank\", \"minmax\") first compute ranks, scale unit interval using min-max normalization. empty vector corresponds scaling. Currently supports following options: \"minmax\" performs min-max normalization scale weights unit interval. Note smallest weight positive, zero scaling. \"max\" Multiplies weights reciprocal largest weight scale weights unit interval. options preserves positive ranks, unlike \"minmax\" weights positive. \"rank\" Computes ranks weights using base::rank() ties.method = \"average\". ... Ignored. build_model aliases (e.g., tna), argument matches actual arguments build_model beside x. inits optional numeric vector initial state probabilities state. Can provided x matrix. vector scaled unity. params list additional arguments models specific type. potential elements list : n_gram: integer n-gram transitions specifying number adjacent events. default value 2. max_gap: integer gap-allowed transitions specifying largest allowed gap size. default 1. window_size: integer sliding window transitions specifying window size. default 2. weighted: logical value. TRUE, transitions weighted inverse sequence length. Can used frequency, co-occurrence reverse model types. default FALSE. lambda: numeric value decay rate. default 1. cols integer/character vector giving indices/names columns considered sequence data. Defaults columns, .e., seq(1, ncol(x)). Column names found x ignored without warning.","code":""},{"path":"http://sonsoles.me/tna/reference/build_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a Transition Network Analysis Model — build_model","text":"object class tna list containing following elements: weights: adjacency matrix model (weight matrix). inits: numeric vector initial values state. matrix type x, element NULL inits directly provided labels: character vector state labels, NULL labels. data: original sequence data converted internal format used package x stslist data.frame object. Otherwise NULL.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/build_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a Transition Network Analysis Model — build_model","text":"","code":"model <- build_model(group_regulation) print(model) #> State Labels #>  #> adapt, cohesion, consensus, coregulate, discuss, emotion, monitor, plan, synthesis  #>  #> Transition Probability Matrix #>  #>                   adapt   cohesion  consensus coregulate    discuss    emotion #> adapt      0.0000000000 0.27308448 0.47740668 0.02161100 0.05893910 0.11984283 #> cohesion   0.0029498525 0.02713864 0.49793510 0.11917404 0.05958702 0.11563422 #> consensus  0.0047400853 0.01485227 0.08200348 0.18770738 0.18802338 0.07268131 #> coregulate 0.0162436548 0.03604061 0.13451777 0.02335025 0.27360406 0.17208122 #> discuss    0.0713743356 0.04758289 0.32118451 0.08428246 0.19488737 0.10579600 #> emotion    0.0024673951 0.32534367 0.32040888 0.03419105 0.10186817 0.07684173 #> monitor    0.0111653873 0.05582694 0.15910677 0.05792045 0.37543615 0.09071877 #> plan       0.0009745006 0.02517460 0.29040117 0.01721618 0.06789021 0.14682475 #> synthesis  0.2346625767 0.03374233 0.46625767 0.04447853 0.06288344 0.07055215 #>               monitor       plan   synthesis #> adapt      0.03339882 0.01571709 0.000000000 #> cohesion   0.03303835 0.14100295 0.003539823 #> consensus  0.04661084 0.39579712 0.007584137 #> coregulate 0.08629442 0.23908629 0.018781726 #> discuss    0.02227284 0.01164262 0.140976968 #> emotion    0.03630596 0.09975326 0.002819880 #> monitor    0.01814375 0.21563154 0.016050244 #> plan       0.07552379 0.37420822 0.001786584 #> synthesis  0.01226994 0.07515337 0.000000000 #>  #> Initial Probabilities #>  #>      adapt   cohesion  consensus coregulate    discuss    emotion    monitor  #>     0.0115     0.0605     0.2140     0.0190     0.1755     0.1515     0.1440  #>       plan  synthesis  #>     0.2045     0.0195   model <- tna(group_regulation)  model <- ftna(group_regulation)  model <- ctna(group_regulation)  model <- atna(group_regulation)"},{"path":"http://sonsoles.me/tna/reference/centralities.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Centrality Measures for a Transition Matrix — centralities","title":"Calculate Centrality Measures for a Transition Matrix — centralities","text":"Calculates several centrality measures. See 'Details' information measures.","code":""},{"path":"http://sonsoles.me/tna/reference/centralities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Centrality Measures for a Transition Matrix — centralities","text":"","code":"centralities(x, loops = FALSE, normalize = FALSE, measures, ...)  # S3 method for class 'tna' centralities(x, loops = FALSE, normalize = FALSE, measures, ...)  # S3 method for class 'matrix' centralities(x, loops = FALSE, normalize = FALSE, measures, ...)  # S3 method for class 'group_tna' centralities(x, loops = FALSE, normalize = FALSE, measures, ...)"},{"path":"http://sonsoles.me/tna/reference/centralities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Centrality Measures for a Transition Matrix — centralities","text":"x tna object, group_tna object, square matrix representing edge weights. loops logical value indicating whether include loops network computing centrality measures (default FALSE). normalize logical value indicating whether centralities normalized (default FALSE). measures character vector indicating centrality measures computed. missing, available measures returned. See 'Details' available measures. elements partially matched ignoring case. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/centralities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Centrality Measures for a Transition Matrix — centralities","text":"tna_centralities object tibble (tbl_df). containing centrality measures state.","code":""},{"path":"http://sonsoles.me/tna/reference/centralities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Centrality Measures for a Transition Matrix — centralities","text":"following measures provided: OutStrength: Outgoing strength centrality, calculated using igraph::strength() mode = \"\". measures total weight outgoing edges node. InStrength: Incoming strength centrality, calculated using igraph::strength() mode = \"\". measures total weight incoming edges node. ClosenessIn: Closeness centrality (incoming), calculated using igraph::closeness() mode = \"\". measures close node nodes based incoming paths. ClosenessOut: Closeness centrality (outgoing), calculated using igraph::closeness() mode = \"\". measures close node nodes based outgoing paths. Closeness: Closeness centrality (overall), calculated using igraph::closeness() mode = \"\". measures close node nodes based incoming outgoing paths. Betweenness: Betweenness centrality defined number geodesics calculated using igraph::betweenness(). BetweennessRSP: Betweenness centrality based randomized shortest paths (Kivimäki et al. 2016). measures extent node lies shortest paths nodes. Diffusion: Diffusion centrality Banerjee et.al. (2014). measures influence node spreading information network. Clustering: Signed clustering coefficient Zhang Horvath (2005) based symmetric adjacency matrix (sum adjacency matrix transpose). measures degree nodes tend cluster together.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/centralities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Centrality Measures for a Transition Matrix — centralities","text":"","code":"model <- tna(group_regulation)  # Centrality measures including loops in the network centralities(model) #> # A tibble: 9 × 10 #>   state    OutStrength InStrength ClosenessIn ClosenessOut Closeness Betweenness #> * <fct>          <dbl>      <dbl>       <dbl>        <dbl>     <dbl>       <dbl> #> 1 adapt          1          0.345      13.4           2.33     18.5           17 #> 2 cohesion       0.973      0.812       3.65          2.79     13.8            0 #> 3 consens…       0.918      2.67        0.798         4.34     11.5            0 #> 4 coregul…       0.977      0.567       4.55          2.31      5.97           5 #> 5 discuss        0.805      1.19        1.95          2.68      7.31           0 #> 6 emotion        0.923      0.894       1.57          3.13     14.5            0 #> 7 monitor        0.982      0.346       6.24          2.21      7.76           3 #> 8 plan           0.626      1.19        5.47          2.91     17.6           10 #> 9 synthes…       1          0.192      12.3           2.18     15.9           14 #> # ℹ 3 more variables: BetweennessRSP <dbl>, Diffusion <dbl>, Clustering <dbl>  # Centrality measures excluding loops in the network centralities(model, loops = FALSE) #> # A tibble: 9 × 10 #>   state    OutStrength InStrength ClosenessIn ClosenessOut Closeness Betweenness #> * <fct>          <dbl>      <dbl>       <dbl>        <dbl>     <dbl>       <dbl> #> 1 adapt          1          0.345      13.4           2.33     18.5           17 #> 2 cohesion       0.973      0.812       3.65          2.79     13.8            0 #> 3 consens…       0.918      2.67        0.798         4.34     11.5            0 #> 4 coregul…       0.977      0.567       4.55          2.31      5.97           5 #> 5 discuss        0.805      1.19        1.95          2.68      7.31           0 #> 6 emotion        0.923      0.894       1.57          3.13     14.5            0 #> 7 monitor        0.982      0.346       6.24          2.21      7.76           3 #> 8 plan           0.626      1.19        5.47          2.91     17.6           10 #> 9 synthes…       1          0.192      12.3           2.18     15.9           14 #> # ℹ 3 more variables: BetweennessRSP <dbl>, Diffusion <dbl>, Clustering <dbl>  # Centrality measures normalized centralities(model, normalize = TRUE) #> # A tibble: 9 × 10 #>   state    OutStrength InStrength ClosenessIn ClosenessOut Closeness Betweenness #> * <fct>          <dbl>      <dbl>       <dbl>        <dbl>     <dbl>       <dbl> #> 1 adapt          1         0.0618      1            0.0690     1           1     #> 2 cohesion       0.927     0.250       0.226        0.281      0.623       0     #> 3 consens…       0.781     1           0            1          0.438       0     #> 4 coregul…       0.938     0.151       0.297        0.0578     0           0.294 #> 5 discuss        0.479     0.403       0.0917       0.230      0.106       0     #> 6 emotion        0.795     0.284       0.0611       0.439      0.681       0     #> 7 monitor        0.952     0.0623      0.432        0.0121     0.142       0.176 #> 8 plan           0         0.405       0.371        0.338      0.924       0.588 #> 9 synthes…       1         0           0.910        0          0.790       0.824 #> # ℹ 3 more variables: BetweennessRSP <dbl>, Diffusion <dbl>, Clustering <dbl>"},{"path":"http://sonsoles.me/tna/reference/cliques.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Cliques in a Transition Network — cliques","title":"Identify Cliques in a Transition Network — cliques","text":"function identifies cliques specified size transition network. searches cliques, .e., complete subgraphs every pair nodes connected, size n transition matrix specified cluster tna object.","code":""},{"path":"http://sonsoles.me/tna/reference/cliques.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Cliques in a Transition Network — cliques","text":"","code":"cliques(x, ...)  # S3 method for class 'tna' cliques(x, size = 2, threshold = 0, sum_weights = FALSE, ...)  # S3 method for class 'group_tna' cliques(x, size = 2, threshold = 0, sum_weights = FALSE, ...)"},{"path":"http://sonsoles.me/tna/reference/cliques.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Cliques in a Transition Network — cliques","text":"x tna group_tna object. ... Ignored. size integer specifying size cliques identify. Defaults 2 (dyads). threshold numeric value sets minimum edge weight edge considered clique. Edges value ignored. Defaults 0. sum_weights logical value specifying whether sum weights threshold instead individual weights directed edges. Defaults FALSE.","code":""},{"path":"http://sonsoles.me/tna/reference/cliques.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Cliques in a Transition Network — cliques","text":"tna_cliques object list two elements: weights matrix edge weights clique. inits numeric vector initial weights clique. x group_tna object, group_tna_cliques object returned instead, list tna_cliques objects.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/cliques.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Cliques in a Transition Network — cliques","text":"","code":"model <- tna(group_regulation)  # Find  2-cliques (dyads) cliq <- cliques(model, size = 2)  model <- group_tna(engagement_mmm) cliques(model) #> Cluster 1 #>  #> Number of 2-cliques = 2 (weight threshold = 0) #> Showing 2 cliques starting from clique number 1 #>  #> Clique 1 #>              Average Disengaged #> Average    0.4598214 0.02678571 #> Disengaged 0.3809524 0.28571429 #>  #> Clique 2 #>            Active   Average #> Active  0.7061503 0.2938497 #> Average 0.5133929 0.4598214 #>  #> Cluster 2 #>  #> Number of 2-cliques = 3 (weight threshold = 0) #> Showing 3 cliques starting from clique number 1 #>  #> Clique 1 #>              Average Disengaged #> Average    0.5860735 0.08897485 #> Disengaged 0.5733333 0.09333333 #>  #> Clique 2 #>            Active   Average #> Active  0.4924242 0.4419192 #> Average 0.3249516 0.5860735 #>  #> Clique 3 #>               Active Disengaged #> Active     0.4924242 0.06565657 #> Disengaged 0.3333333 0.09333333 #>  #> Cluster 3 #>  #> Number of 2-cliques = 3 (weight threshold = 0) #> Showing 3 cliques starting from clique number 1 #>  #> Clique 1 #>              Average Disengaged #> Average    0.5731707  0.2674216 #> Disengaged 0.4707602  0.4634503 #>  #> Clique 2 #>            Active   Average #> Active  0.3006757 0.6081081 #> Average 0.1594077 0.5731707 #>  #> Clique 3 #>                Active Disengaged #> Active     0.30067568 0.09121622 #> Disengaged 0.06578947 0.46345029"},{"path":"http://sonsoles.me/tna/reference/communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Community Detection for Transition Networks — communities","title":"Community Detection for Transition Networks — communities","text":"function detects communities within transition networks (represented tna object). uses various algorithms find communities graph representation transitions returns list communities cluster specified cluster. multiple transition matrices exist, function iterates cluster tna object find communities using different algorithms. function uses igraph package convert transition matrices graphs applies community detection algorithms (e.g., Walktrap, Fast Greedy, Label Propagation, Infomap, Edge Betweenness, Leading Eigenvector, Spin Glass).","code":""},{"path":"http://sonsoles.me/tna/reference/communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Community Detection for Transition Networks — communities","text":"","code":"communities(x, ...)  # S3 method for class 'tna' communities(x, methods, gamma = 1, ...)  # S3 method for class 'group_tna' communities(x, methods, gamma = 1, ...)"},{"path":"http://sonsoles.me/tna/reference/communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Community Detection for Transition Networks — communities","text":"x tna group_tna object. ... Ignored. methods character vector community detection algorithms apply network. supported options : \"walktrap\": community detection method using short random walks. \"fast_greedy\": method based modularity optimization. \"label_prop\": method uses label propagation. \"infomap\": method uses information flow detect communities. \"edge_betweenness\": method uses edge betweenness find communities. \"leading_eigen\": method using leading eigenvector modularity matrix. \"spinglass\": method based spinglass model. provided, methods applied. gamma numeric value depicting parameter affects behavior certain algorithms like Spin Glass method. Defaults 1.","code":""},{"path":"http://sonsoles.me/tna/reference/communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Community Detection for Transition Networks — communities","text":"object class tna_communities list element cluster containing: counts: list number communities found algorithm. assignments: data.frame row corresponds node column community detection algorithm, color-coded community assignments. x group_tna object, group_tna_communities object returned instead, list tna_communities objects.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/communities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Community Detection for Transition Networks — communities","text":"","code":"model <- tna(group_regulation) comm <- communities(model)"},{"path":"http://sonsoles.me/tna/reference/compare.group_tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare TNA Clusters with Comprehensive Metrics — compare.group_tna","title":"Compare TNA Clusters with Comprehensive Metrics — compare.group_tna","text":"Compare TNA Clusters Comprehensive Metrics","code":""},{"path":"http://sonsoles.me/tna/reference/compare.group_tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare TNA Clusters with Comprehensive Metrics — compare.group_tna","text":"","code":"# S3 method for class 'group_tna' compare(x, i = 1L, j = 2L, scaling = \"none\", ...)"},{"path":"http://sonsoles.me/tna/reference/compare.group_tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare TNA Clusters with Comprehensive Metrics — compare.group_tna","text":"x group_tna object. integer index name principal cluster character string. j integer index name secondary cluster character string. scaling See compare.tna(). ... Additional arguments passed compare.tna().","code":""},{"path":"http://sonsoles.me/tna/reference/compare.group_tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare TNA Clusters with Comprehensive Metrics — compare.group_tna","text":"tna_comparison object. See compare.tna() details.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/compare.group_tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare TNA Clusters with Comprehensive Metrics — compare.group_tna","text":"","code":"model <- group_model(engagement_mmm) compare(model, i = 1, j = 2) #> Warning: There was 1 warning in `dplyr::summarize()`. #> ℹ In argument: `correlation = corr_fun(x, y)`. #> ℹ In group 1: `centrality = \"Betweenness\"`. #> Caused by warning in `stats::cor()`: #> ! the standard deviation is zero #> Edge difference metrics #> # A tibble: 9 × 16 #>   source     target     weight_x weight_y raw_difference absolute_difference #>   <fct>      <fct>         <dbl>    <dbl>          <dbl>               <dbl> #> 1 Active     Active       0.706    0.492          0.214               0.214  #> 2 Average    Active       0.513    0.325          0.188               0.188  #> 3 Disengaged Active       0.333    0.333          0                   0      #> 4 Active     Average      0.294    0.442         -0.148               0.148  #> 5 Average    Average      0.460    0.586         -0.126               0.126  #> 6 Disengaged Average      0.381    0.573         -0.192               0.192  #> 7 Active     Disengaged   0        0.0657        -0.0657              0.0657 #> 8 Average    Disengaged   0.0268   0.0890        -0.0622              0.0622 #> 9 Disengaged Disengaged   0.286    0.0933         0.192               0.192  #> # ℹ 10 more variables: squared_difference <dbl>, relative_difference <dbl>, #> #   similarity_strength_index <dbl>, difference_index <dbl>, #> #   rank_difference <dbl>, percentile_difference <dbl>, #> #   logarithmic_ratio <dbl>, standardized_weight_x <dbl>, #> #   standardized_weight_y <dbl>, standardized_score_inflation <dbl> #>  #> Summary metrics of differences #> # A tibble: 22 × 3 #>    category          metric               value #>    <chr>             <chr>                <dbl> #>  1 Weight Deviations Mean Abs. Diff.      0.132 #>  2 Weight Deviations Median Abs. Diff.    0.148 #>  3 Weight Deviations RMS Diff.            0.150 #>  4 Weight Deviations Max Abs. Diff.       0.214 #>  5 Weight Deviations Rel. Mean Abs. Diff. 0.396 #>  6 Weight Deviations CV Ratio             1.07  #>  7 Correlations      Pearson              0.732 #>  8 Correlations      Spearman             0.733 #>  9 Correlations      Kendall              0.611 #> 10 Correlations      Distance             0.596 #> # ℹ 12 more rows #>  #> Network metrics #> # A tibble: 13 × 3 #>    metric                             x     y #>    <chr>                          <dbl> <dbl> #>  1 Node Count                  3   e+ 0 3     #>  2 Edge Count                  8   e+ 0 9     #>  3 Network Density             1   e+ 0 1     #>  4 Mean Distance               2.86e- 1 0.305 #>  5 Mean Out-Strength           1   e+ 0 1     #>  6 SD Out-Strength             6.31e- 1 0.689 #>  7 Mean In-Strength            1   e+ 0 1     #>  8 SD In-Strength              7.85e-17 0     #>  9 Mean Out-Degree             2.67e+ 0 3     #> 10 SD Out-Degree               5.77e- 1 0     #> 11 Centralization (Out-Degree) 2.5 e- 1 0     #> 12 Centralization (In-Degree)  2.5 e- 1 0     #> 13 Reciprocity                 8   e- 1 1     #>  #> Centrality differences #> # A tibble: 27 × 5 #>    state   centrality          x     y difference #>    <fct>   <chr>           <dbl> <dbl>      <dbl> #>  1 Active  OutStrength     0.294 0.508    -0.214  #>  2 Active  InStrength      0.847 0.658     0.188  #>  3 Active  ClosenessIn     1.44  1.52     -0.0770 #>  4 Active  ClosenessOut    1.63  1.97     -0.343  #>  5 Active  Closeness       1.63  4.54     -2.91   #>  6 Active  Betweenness     0     0         0      #>  7 Active  BetweennessRSP 20     4        16      #>  8 Active  Diffusion       0.503 0.885    -0.383  #>  9 Active  Clustering      0.408 0.662    -0.255  #> 10 Average OutStrength     0.540 0.414     0.126  #> # ℹ 17 more rows #>  #> Centrality correlations #> # A tibble: 9 × 3 #>   centrality     Centrality     correlation #>   <chr>          <chr>                <dbl> #> 1 Betweenness    Betweenness         NA     #> 2 BetweennessRSP BetweennessRSP       0.980 #> 3 Closeness      Closeness            0.198 #> 4 ClosenessIn    ClosenessIn          0.994 #> 5 ClosenessOut   ClosenessOut         0.865 #> 6 Clustering     Clustering           0.813 #> 7 Diffusion      Diffusion            0.812 #> 8 InStrength     InStrength           0.811 #> 9 OutStrength    OutStrength          0.695"},{"path":"http://sonsoles.me/tna/reference/compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Two Matrices or TNA Models with Comprehensive Metrics — compare","title":"Compare Two Matrices or TNA Models with Comprehensive Metrics — compare","text":"Various distances, measures dissimilarity similarity, correlations metrics computed compare models. Optionally, weight matrices models can scaled comparison. resulting object can used produce heatmap plots scatterplots illustrate differences.","code":""},{"path":"http://sonsoles.me/tna/reference/compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Two Matrices or TNA Models with Comprehensive Metrics — compare","text":"","code":"compare(x, ...)  # S3 method for class 'tna' compare(x, y, scaling = \"none\", ...)  # S3 method for class 'matrix' compare(x, y, scaling = \"none\", ...)"},{"path":"http://sonsoles.me/tna/reference/compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Two Matrices or TNA Models with Comprehensive Metrics — compare","text":"x tna object matrix weights. ... Ignored. y tna object matrix weights. scaling  character string naming scaling method apply weights comparing . supported options : \"none\": scaling performed. weights used . \"minmax\": Performs min-max normalization, .e., minimum value subtracted differences scaled range. \"rank\": Applies min-max normalization ranks weights (computed ties.method = \"average\"). \"zscore\": Computes standard score, .e. mean weight subtracted differences scaled standard deviation. \"robust\": Computes robust z-score, .e. median weight subtracted differences scaled median absolute deviation (using stats::mad). \"log\": Simply natural logarithm weights. \"log1p\": , adds 1 values taking logarithm. Useful scenarios zero weights. \"softmax\": Performs softmax normalization. \"quantile\": Uses empirical quantiles weights via stats::ecdf.","code":""},{"path":"http://sonsoles.me/tna/reference/compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Two Matrices or TNA Models with Comprehensive Metrics — compare","text":"tna_comparison object, list containing following elements: matrices: list containing scaled matrices input tna objects scaled inputs case matrices. difference_matrix: matrix differences x - y. edge_metrics: data.frame edge-level metrics differences. summary_metrics: data.frame summary metrics differences across edges. network_metrics: data.frame network metrics x y. centrality_differences: data.frame differences centrality measures computes x y. centrality_correlations: numeric vector correlations centrality measures x y.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Two Matrices or TNA Models with Comprehensive Metrics — compare","text":"","code":"# Comparing TNA models model_x <- tna(group_regulation[1:200, ]) model_y <- tna(group_regulation[1001:1200, ]) comp1 <- compare(model_x, model_y)  # Comparing matrices mat_x <- model_x$weights mat_y <- model_y$weights comp2 <- compare(mat_x, mat_y)  # Comparing a matrix to a TNA model comp3 <- compare(mat_x, model_y)"},{"path":"http://sonsoles.me/tna/reference/deprune.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore a Pruned Transition Network Analysis Model — deprune","title":"Restore a Pruned Transition Network Analysis Model — deprune","text":"Restore Pruned Transition Network Analysis Model","code":""},{"path":"http://sonsoles.me/tna/reference/deprune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore a Pruned Transition Network Analysis Model — deprune","text":"","code":"deprune(x, ...)  # S3 method for class 'tna' deprune(x, ...)  # S3 method for class 'tna' reprune(x, ...)  # S3 method for class 'group_tna' deprune(x, ...)"},{"path":"http://sonsoles.me/tna/reference/deprune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore a Pruned Transition Network Analysis Model — deprune","text":"x tna group_tna object. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/deprune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restore a Pruned Transition Network Analysis Model — deprune","text":"tna group_tna object pruned.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/deprune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restore a Pruned Transition Network Analysis Model — deprune","text":"","code":"model <- tna(group_regulation) pruned_model <- prune(model, method = \"threshold\", threshold = 0.1) depruned_model <- deprune(pruned_model) # restore original model"},{"path":"http://sonsoles.me/tna/reference/engagement.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Data on Student Engagement — engagement","title":"Example Data on Student Engagement — engagement","text":"Students' engagement states (Active / Average / Disengaged) throughout whole study program. data generated synthetically based article \"longitudinal association engagement achievement varies time, students' profiles, achievement state: full program study\"","code":""},{"path":"http://sonsoles.me/tna/reference/engagement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Data on Student Engagement — engagement","text":"","code":"engagement"},{"path":"http://sonsoles.me/tna/reference/engagement.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Data on Student Engagement — engagement","text":"stslist object (sequence data).","code":""},{"path":"http://sonsoles.me/tna/reference/engagement.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Data on Student Engagement — engagement","text":"doi:10.1016/j.compedu.2023.104787","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/engagement_mmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Mixed Markov Model Fitted to the engagement Data — engagement_mmm","title":"Example Mixed Markov Model Fitted to the engagement Data — engagement_mmm","text":"Example Mixed Markov Model Fitted engagement Data","code":""},{"path":"http://sonsoles.me/tna/reference/engagement_mmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Mixed Markov Model Fitted to the engagement Data — engagement_mmm","text":"","code":"engagement_mmm"},{"path":"http://sonsoles.me/tna/reference/engagement_mmm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Mixed Markov Model Fitted to the engagement Data — engagement_mmm","text":"mhmm object.","code":""},{"path":"http://sonsoles.me/tna/reference/engagement_mmm.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Mixed Markov Model Fitted to the engagement Data — engagement_mmm","text":"data generated via mixed_markov_model.R https://github.com/sonsoleslp/tna/tree/main/data-raw/","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/estimate_centrality_stability.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Centrality Stability — estimate_cs","title":"Estimate Centrality Stability — estimate_cs","text":"Estimates stability centrality measures network using subset sampling without replacement. allows dropping varying proportions cases calculates correlations original centralities computed using sampled subsets.","code":""},{"path":"http://sonsoles.me/tna/reference/estimate_centrality_stability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Centrality Stability — estimate_cs","text":"","code":"estimate_cs(x, ...)  estimate_centrality_stability(x, ...)  # S3 method for class 'tna' estimate_cs(   x,   loops = FALSE,   normalize = FALSE,   measures = c(\"InStrength\", \"OutStrength\", \"Betweenness\"),   iter = 1000,   method = \"pearson\",   drop_prop = seq(0.1, 0.9, by = 0.1),   threshold = 0.7,   certainty = 0.95,   progressbar = FALSE,   ... )  # S3 method for class 'tna' estimate_centrality_stability(   x,   loops = FALSE,   normalize = FALSE,   measures = c(\"InStrength\", \"OutStrength\", \"Betweenness\"),   iter = 1000,   method = \"pearson\",   drop_prop = seq(0.1, 0.9, by = 0.1),   threshold = 0.7,   certainty = 0.95,   progressbar = FALSE,   ... )  # S3 method for class 'group_tna' estimate_cs(   x,   loops = FALSE,   normalize = FALSE,   measures = c(\"InStrength\", \"OutStrength\", \"Betweenness\"),   iter = 1000,   method = \"pearson\",   drop_prop = seq(0.1, 0.9, by = 0.1),   threshold = 0.7,   certainty = 0.95,   progressbar = FALSE,   ... )  # S3 method for class 'group_tna' estimate_centrality_stability(   x,   loops = FALSE,   normalize = FALSE,   measures = c(\"InStrength\", \"OutStrength\", \"Betweenness\"),   iter = 1000,   method = \"pearson\",   drop_prop = seq(0.1, 0.9, by = 0.1),   threshold = 0.7,   certainty = 0.95,   progressbar = FALSE,   ... )"},{"path":"http://sonsoles.me/tna/reference/estimate_centrality_stability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Centrality Stability — estimate_cs","text":"x tna group_tna object representing temporal network analysis data. object created sequence data object. ... Ignored. loops logical value indicating whether include loops network computing centrality measures (default FALSE). normalize logical value indicating whether normalize centrality measures. default FALSE. measures character vector centrality measures estimate. default measures \"InStrength\", \"OutStrength\", \"Betweenness\". See centralities() list available centrality measures. iter integer specifying number resamples draw. default 1000. method character string indicating correlation coefficient type. default \"pearson\". See stats::cor() details. drop_prop numeric vector specifying proportions cases drop sampling iteration. Default sequence 0.1 0.9 increments 0.1. threshold numeric value specifying correlation threshold calculating CS-coefficient. default 0.7. certainty numeric value specifying desired level certainty CS-coefficient. Default 0.95. progressbar logical value. TRUE, progress bar displayed Defaults FALSE","code":""},{"path":"http://sonsoles.me/tna/reference/estimate_centrality_stability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Centrality Stability — estimate_cs","text":"tna_stability object list element measure following elements: cs_coefficient: centrality stability (CS) coefficient measure. correlations: matrix correlations original centrality resampled centralities drop proportion. x group_tna object, group_tna_stability object returned instead, list tna_stability objects.","code":""},{"path":"http://sonsoles.me/tna/reference/estimate_centrality_stability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Centrality Stability — estimate_cs","text":"function works repeatedly resampling data, dropping varying proportions cases, calculating centrality measures subsets. correlation original centralities resampled centralities calculated drop proportion. stability centrality measure summarized using centrality stability (CS) coefficient, represents proportion dropped cases correlations drop given threshold (default 0.7). results can visualized plotting output object showing stability centrality measures across different drop proportions, along confidence intervals. CS-coefficients displayed subtitle.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/estimate_centrality_stability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Centrality Stability — estimate_cs","text":"","code":"model <- tna(group_regulation) # Small number of iterations and drop proportions for CRAN estimate_cs(   model,   drop_prop = seq(0.3, 0.9, by = 0.2),   measures = c(\"InStrength\", \"OutStrength\"),   iter = 10 ) #> Centrality Stability Coefficients #>  #>  InStrength OutStrength  #>         0.9         0.9"},{"path":"http://sonsoles.me/tna/reference/group_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a Grouped Transition Network Analysis Model — group_model","title":"Build a Grouped Transition Network Analysis Model — group_model","text":"function constructs transition network analysis (TNA) model cluster given sequence, wide-format dataframe, mixture Markov model.","code":""},{"path":"http://sonsoles.me/tna/reference/group_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a Grouped Transition Network Analysis Model — group_model","text":"","code":"group_model(x, ...)  # Default S3 method group_model(   x,   group,   type = \"relative\",   scaling = character(0L),   groupwise = FALSE,   cols,   params = list(),   na.rm = TRUE,   ... )  # S3 method for class 'mhmm' group_model(   x,   type = \"relative\",   scaling = character(0L),   groupwise = FALSE,   cols,   params = list(),   na.rm = TRUE,   ... )  group_tna(x, ...)  group_ftna(x, ...)  group_ctna(x, ...)  group_atna(x, ...)"},{"path":"http://sonsoles.me/tna/reference/group_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a Grouped Transition Network Analysis Model — group_model","text":"x stslist object describing sequence events states used building Markov model. argument x also accepts data.frame objects wide format, tna_data objects. Alternatively, function accepts mixture Markov model seqHMM. ... Ignored. group vector indicating cluster assignment row data / sequence. Must length number rows/sequences x. Alternatively, single character string giving column name data defines group x wide format data.frame tna_data object. provided, row data forms cluster. type character string describing weight matrix type. Currently supports following types: \"relative\" relative frequencies (probabilities, default) \"frequency\" frequencies. \"co-occurrence\" co-occurrences. \"n-gram\" n-gram transitions. Captures higher-order transitions considering sequences n states, useful identifying longer patterns. \"gap\" allows transitions non-adjacent states, transitions weighted gap size. \"window\" creates transitions states within sliding window, capturing local relationships (several sequences together). \"reverse\" considers sequences reverse order (resulting called reply network contexts). resulting weight matrix transpose \"frequency\" option. \"attention\" aggregates downstream pairs states exponential decay gap states. parameter lambda can used control decay rate (default 1)- scaling character vector describing scale weights defined type. vector provided, scaling options applied respective order. example, c(\"rank\", \"minmax\") first compute ranks, scale unit interval using min-max normalization. empty vector corresponds scaling. Currently supports following options: \"minmax\" performs min-max normalization scale weights unit interval. Note smallest weight positive, zero scaling. \"max\" Multiplies weights reciprocal largest weight scale weights unit interval. options preserves positive ranks, unlike \"minmax\" weights positive. \"rank\" Computes ranks weights using base::rank() ties.method = \"average\". groupwise logical value indicates whether scaling methods applied group (TRUE) globally (FALSE, default). cols integer/character vector giving indices/names columns considered sequence data. Defaults columns, .e., seq(1, ncol(x)). columns automatically determined tna_data objects. params list additional arguments models specific type. potential elements list : n_gram: integer n-gram transitions specifying number adjacent events. default value 2. max_gap: integer gap-allowed transitions specifying largest allowed gap size. default 1. window_size: integer sliding window transitions specifying window size. default 2. weighted: logical value. TRUE, transitions weighted inverse sequence length. Can used frequency, co-occurrence reverse model types. default FALSE. lambda: numeric value decay rate. default 1. na.rm logical value determines observations NA value group removed. FALSE, additional category NA values added. default FALSE warning issued NA values detected.","code":""},{"path":"http://sonsoles.me/tna/reference/group_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a Grouped Transition Network Analysis Model — group_model","text":"object class group_tna list containing one element per cluster. element tna object.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/group_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a Grouped Transition Network Analysis Model — group_model","text":"","code":"# Manually specified groups group <- c(rep(\"High\", 1000), rep(\"Low\", 1000)) model <- group_model(group_regulation, group = group)  # Groups defined by a mixed Markov model model <- group_model(engagement_mmm)  model <- group_tna(group_regulation, group = gl(2, 1000))  model <- group_ftna(group_regulation, group = gl(2, 1000))  model <- group_ctna(group_regulation, group = gl(2, 1000))  model <- group_atna(group_regulation, group = gl(2, 1000))"},{"path":"http://sonsoles.me/tna/reference/group_regulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Wide Data on Group Regulation — group_regulation","title":"Example Wide Data on Group Regulation — group_regulation","text":"Students' regulation collaborative learning. Students' interactions coded :  \"adapt\", \"cohesion\", \"consensus\", \"coregulate\", \"discuss\", \"emotion\", \"monitor\", \"plan\", \"synthesis\"","code":""},{"path":"http://sonsoles.me/tna/reference/group_regulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Wide Data on Group Regulation — group_regulation","text":"","code":"group_regulation"},{"path":"http://sonsoles.me/tna/reference/group_regulation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Wide Data on Group Regulation — group_regulation","text":"data.frame object.","code":""},{"path":"http://sonsoles.me/tna/reference/group_regulation.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Wide Data on Group Regulation — group_regulation","text":"data generated synthetically.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/group_regulation_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Long Data on Group Regulation — group_regulation_long","title":"Example Long Data on Group Regulation — group_regulation_long","text":"Students' regulation collaborative learning. dataset group_regulation long format. addition students' actions (Action), contains student identifier (Actor), timestamp (Time), Course name, collaboration Group. also includes column (Achiever) indicating whether student high low achiever.","code":""},{"path":"http://sonsoles.me/tna/reference/group_regulation_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Long Data on Group Regulation — group_regulation_long","text":"","code":"group_regulation_long"},{"path":"http://sonsoles.me/tna/reference/group_regulation_long.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Long Data on Group Regulation — group_regulation_long","text":"data.frame object.","code":""},{"path":"http://sonsoles.me/tna/reference/group_regulation_long.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Long Data on Group Regulation — group_regulation_long","text":"data generated synthetically group_regulation","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/hist.group_tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Histogram of Edge Weights for a group_tna Object. — hist.group_tna","title":"Plot a Histogram of Edge Weights for a group_tna Object. — hist.group_tna","text":"Plot Histogram Edge Weights group_tna Object.","code":""},{"path":"http://sonsoles.me/tna/reference/hist.group_tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Histogram of Edge Weights for a group_tna Object. — hist.group_tna","text":"","code":"# S3 method for class 'group_tna' hist(x, ...)"},{"path":"http://sonsoles.me/tna/reference/hist.group_tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Histogram of Edge Weights for a group_tna Object. — hist.group_tna","text":"x group_tna object. ... Additional arguments passed graphics::hist().","code":""},{"path":"http://sonsoles.me/tna/reference/hist.group_tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Histogram of Edge Weights for a group_tna Object. — hist.group_tna","text":"list (invisibly) histogram objects edge weights cluster.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/hist.group_tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Histogram of Edge Weights for a group_tna Object. — hist.group_tna","text":"","code":"model <- group_model(engagement_mmm) hist(model)"},{"path":"http://sonsoles.me/tna/reference/hist.tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Histogram of Edge Weights in the Network — hist.tna","title":"Plot a Histogram of Edge Weights in the Network — hist.tna","text":"Plot Histogram Edge Weights Network","code":""},{"path":"http://sonsoles.me/tna/reference/hist.tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Histogram of Edge Weights in the Network — hist.tna","text":"","code":"# S3 method for class 'tna' hist(x, breaks, col = \"lightblue\", main, xlab, border = \"white\", ...)"},{"path":"http://sonsoles.me/tna/reference/hist.tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Histogram of Edge Weights in the Network — hist.tna","text":"x vector values histogram desired. breaks one : vector giving breakpoints histogram cells, function compute vector breakpoints, single number giving number cells histogram, character string naming algorithm compute       number cells (see ‘Details’), function compute number cells. last three cases number suggestion ;     breakpoints set pretty values, number     limited 1e6 (warning larger).      breaks function, x vector supplied     argument (number breaks limited     amount available memory). col colour used fill bars. main character string defining title plot. xlab character string defining vertical axis label. border color border around bars.  default     use standard foreground color. ... Additional arguments passed graphics::hist().","code":""},{"path":"http://sonsoles.me/tna/reference/hist.tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Histogram of Edge Weights in the Network — hist.tna","text":"histogram object edge weights.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/hist.tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Histogram of Edge Weights in the Network — hist.tna","text":"","code":"model <- tna(group_regulation) hist(model)"},{"path":"http://sonsoles.me/tna/reference/import_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Wide Format Sequence Data as Long Format Sequence Data — import_data","title":"Import Wide Format Sequence Data as Long Format Sequence Data — import_data","text":"function transforms wide format data features separate columns long format suitable sequence analysis. creates windows data based row order generates sequence order within windows.","code":""},{"path":"http://sonsoles.me/tna/reference/import_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Wide Format Sequence Data as Long Format Sequence Data — import_data","text":"","code":"import_data(data, cols, id_cols, window_size = 1, replace_zeros = TRUE)"},{"path":"http://sonsoles.me/tna/reference/import_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Wide Format Sequence Data as Long Format Sequence Data — import_data","text":"data data.frame wide format. cols expression giving tidy selection column names transformed long format (actions). can vector column names (e.g., c(feature1, feature2)) range  specified feature1:feature6 (without quotes) include columns 'feature1' 'feature6' order appear data frame. information tidy selections, see dplyr::select(). id_cols character vector column names uniquely identify observation (IDs). window_size integer specifying size window sequence grouping. Default 1 (row separate window). replace_zeros logical value indicating whether replace 0s cols NA. default TRUE.","code":""},{"path":"http://sonsoles.me/tna/reference/import_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Wide Format Sequence Data as Long Format Sequence Data — import_data","text":"data.frame long format added columns window sequence order.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/import_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Wide Format Sequence Data as Long Format Sequence Data — import_data","text":"","code":"data <- data.frame(   ID = c(\"A\", \"A\", \"B\", \"B\"),   Time = c(1, 2, 1, 2),   feature1 = c(10, 0, 15, 20),   feature2 = c(5, 8, 0, 12),   feature3 = c(2, 4, 6, 8),   other_col = c(\"X\", \"Y\", \"Z\", \"W\") )  # Using a vector long_data1 <- import_data(   data = data,   cols = c(feature1, feature2),   id_cols = c(\"ID\", \"Time\"),   window_size = 2,   replace_zeros = TRUE )  # Using a column range long_data2 <- import_data(   data = data,   cols = feature1:feature3,   id_cols = c(\"ID\", \"Time\"),   window_size = 2,   replace_zeros = TRUE )"},{"path":"http://sonsoles.me/tna/reference/mmm_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Statistics from a Mixture Markov Model (MMM) — mmm_stats","title":"Retrieve Statistics from a Mixture Markov Model (MMM) — mmm_stats","text":"Retrieve Statistics Mixture Markov Model (MMM)","code":""},{"path":"http://sonsoles.me/tna/reference/mmm_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Statistics from a Mixture Markov Model (MMM) — mmm_stats","text":"","code":"mmm_stats(x, level = 0.05)"},{"path":"http://sonsoles.me/tna/reference/mmm_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Statistics from a Mixture Markov Model (MMM) — mmm_stats","text":"x mhmm object. level numeric value representing significance level hypothesis testing confidence intervals. Defaults 0.05.","code":""},{"path":"http://sonsoles.me/tna/reference/mmm_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Statistics from a Mixture Markov Model (MMM) — mmm_stats","text":"data.frame object.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/mmm_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Statistics from a Mixture Markov Model (MMM) — mmm_stats","text":"","code":"mmm_stats(engagement_mmm) #>     cluster    variable  estimate      p_value    ci_lower  ci_upper std_rrror #> 1 Cluster 2 (Intercept) 0.3641003 9.648771e-02 -0.06524374 0.7934444 0.2190571 #> 2 Cluster 3 (Intercept) 1.1704507 1.225029e-09  0.79295086 1.5479505 0.1926055 #>    z_value #> 1 1.662125 #> 2 6.076933"},{"path":"http://sonsoles.me/tna/reference/permutation_test.group_tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Networks using a Permutation Test — permutation_test.group_tna","title":"Compare Networks using a Permutation Test — permutation_test.group_tna","text":"Test edge weight differences pairs subset pairs group_tna object. See permutation_test.tna() details.","code":""},{"path":"http://sonsoles.me/tna/reference/permutation_test.group_tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Networks using a Permutation Test — permutation_test.group_tna","text":"","code":"# S3 method for class 'group_tna' permutation_test(   x,   groups,   adjust = \"none\",   iter = 1000,   paired = FALSE,   level = 0.05,   measures = character(0),   ... )"},{"path":"http://sonsoles.me/tna/reference/permutation_test.group_tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Networks using a Permutation Test — permutation_test.group_tna","text":"x group_tna object groups integer vector character vector group indices names, respectively, defining groups compare. provided, pairs compared (default). adjust character string method adjust p-values multiple comparisons. default \"none\" adjustment. See stats::p.adjust() details available adjustment methods. iter integer giving number permutations perform. default 1000. paired logical value. TRUE, perform paired permutation tests; FALSE, perform unpaired tests. default FALSE. level numeric value giving significance level permutation tests. default 0.05. measures character vector centrality measures test. See centralities() list available centrality measures. ... Additional arguments passed centralities().","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/permutation_test.group_tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Networks using a Permutation Test — permutation_test.group_tna","text":"","code":"model <- group_model(engagement_mmm) # Small number of iterations for CRAN permutation_test(model, iter = 20) #> Cluster 1 vs. Cluster 2 #>  #> # A tibble: 9 × 4 #>   edge_name                diff_true effect_size p_value #>   <chr>                        <dbl>       <dbl>   <dbl> #> 1 Active -> Active            0.214         4.23  0.0476 #> 2 Average -> Active           0.188         4.18  0.0476 #> 3 Disengaged -> Active        0             0     1      #> 4 Active -> Average          -0.148        -3.46  0.0476 #> 5 Average -> Average         -0.126        -2.68  0.0476 #> 6 Disengaged -> Average      -0.192        -2.70  0.0476 #> 7 Active -> Disengaged       -0.0657       -5.36  0.0476 #> 8 Average -> Disengaged      -0.0622       -3.16  0.0476 #> 9 Disengaged -> Disengaged    0.192         3.40  0.0476 #>  #> Cluster 1 vs. Cluster 3 #>  #> # A tibble: 9 × 4 #>   edge_name                diff_true effect_size p_value #>   <chr>                        <dbl>       <dbl>   <dbl> #> 1 Active -> Active            0.405         6.31  0.0476 #> 2 Average -> Active           0.354         8.08  0.0476 #> 3 Disengaged -> Active        0.268        10.1   0.0476 #> 4 Active -> Average          -0.314        -5.57  0.0476 #> 5 Average -> Average         -0.113        -4.29  0.0476 #> 6 Disengaged -> Average      -0.0898       -2.48  0.0952 #> 7 Active -> Disengaged       -0.0912       -5.23  0.0476 #> 8 Average -> Disengaged      -0.241        -5.63  0.0476 #> 9 Disengaged -> Disengaged   -0.178        -3.50  0.0476 #>  #> Cluster 2 vs. Cluster 3 #>  #> # A tibble: 9 × 4 #>   edge_name                diff_true effect_size p_value #>   <chr>                        <dbl>       <dbl>   <dbl> #> 1 Active -> Active            0.192        5.00   0.0476 #> 2 Average -> Active           0.166        5.63   0.0476 #> 3 Disengaged -> Active        0.268       10.2    0.0476 #> 4 Active -> Average          -0.166       -3.77   0.0476 #> 5 Average -> Average          0.0129       0.365  0.762  #> 6 Disengaged -> Average       0.103        3.02   0.0476 #> 7 Active -> Disengaged       -0.0256      -1.16   0.286  #> 8 Average -> Disengaged      -0.178       -7.56   0.0476 #> 9 Disengaged -> Disengaged   -0.370       -9.31   0.0476"},{"path":"http://sonsoles.me/tna/reference/permutation_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Two Networks from Sequence Data using a Permutation Test — permutation_test","title":"Compare Two Networks from Sequence Data using a Permutation Test — permutation_test","text":"function compares two networks built sequence data using permutation tests. function builds Markov models two sequence objects, computes transition probabilities, compares performing permutation tests. returns differences transition probabilities, effect sizes, estimated p-values, confidence intervals.","code":""},{"path":"http://sonsoles.me/tna/reference/permutation_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Two Networks from Sequence Data using a Permutation Test — permutation_test","text":"","code":"permutation_test(x, ...)  # S3 method for class 'tna' permutation_test(   x,   y,   adjust = \"none\",   iter = 1000,   paired = FALSE,   level = 0.05,   measures = character(0),   ... )"},{"path":"http://sonsoles.me/tna/reference/permutation_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Two Networks from Sequence Data using a Permutation Test — permutation_test","text":"x tna object containing sequence data first tna model. ... Additional arguments passed centralities(). y tna object containing sequence data second tna model. adjust character string method adjust p-values multiple comparisons. default \"none\" adjustment. See stats::p.adjust() details available adjustment methods. iter integer giving number permutations perform. default 1000. paired logical value. TRUE, perform paired permutation tests; FALSE, perform unpaired tests. default FALSE. level numeric value giving significance level permutation tests. default 0.05. measures character vector centrality measures test. See centralities() list available centrality measures.","code":""},{"path":"http://sonsoles.me/tna/reference/permutation_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Two Networks from Sequence Data using a Permutation Test — permutation_test","text":"tna_permutation object list two elements: edges centralities, containing following elements: stats: data.frame original differences, effect sizes, estimated p-values edge centrality measure. effect size computed observed difference divided standard deviation differences permuted samples. diffs_true: matrix differences data. diffs_sig: matrix showing significant differences.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/permutation_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Two Networks from Sequence Data using a Permutation Test — permutation_test","text":"","code":"model_x <- tna(group_regulation[1:200, ]) model_y <- tna(group_regulation[1001:1200, ]) # Small number of iterations for CRAN permutation_test(model_x, model_y, iter = 20) #> # A tibble: 81 × 4 #>    edge_name           diff_true effect_size p_value #>    <chr>                   <dbl>       <dbl>   <dbl> #>  1 adapt -> adapt       0            NaN      1      #>  2 cohesion -> adapt    0.00541        0.931  0.762  #>  3 consensus -> adapt  -0.000679      -0.180  0.810  #>  4 coregulate -> adapt  0.00769        0.723  0.476  #>  5 discuss -> adapt    -0.130         -7.28   0.0476 #>  6 emotion -> adapt     0.0101         1.38   0.381  #>  7 monitor -> adapt    -0.00480       -0.466  0.952  #>  8 plan -> adapt        0.00339        1.57   0.0476 #>  9 synthesis -> adapt  -0.159         -2.68   0.0476 #> 10 adapt -> cohesion   -0.0907        -0.999  0.524  #> # ℹ 71 more rows"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Grouped Transition Network Analysis Model — plot.group_tna","title":"Plot a Grouped Transition Network Analysis Model — plot.group_tna","text":"Plots transition network cluster using qgraph.","code":""},{"path":"http://sonsoles.me/tna/reference/plot.group_tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Grouped Transition Network Analysis Model — plot.group_tna","text":"","code":"# S3 method for class 'group_tna' plot(x, title, which, ...)"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Grouped Transition Network Analysis Model — plot.group_tna","text":"x group_model object. title title plot. can single string (one used plots) list (one per group) optional integer vector groups plot. default, groups plotted. ... Arguments passed plot.tna labels See qgraph::qgraph(). colors See qgraph::qgraph(). pie See qgraph::qgraph(). cut Edge color width emphasis cutoff value. default median edge weights. See qgraph::qgraph() details. show_pruned logical value indicating pruned edges removed prune() shown plot.  default TRUE, edges drawn dashed different color distinguish . pruned_edge_color character string color use pruned edges show_pruned = TRUE. default \"pink\". edge.color See qgraph::qgraph(). edge.labels See qgraph::qgraph(). edge.label.position See qgraph::qgraph(). layout One following: character string describing qgraph layout (e.g., \"circle\") name igraph layout function (e.g., \"layout_on_grid\"). matrix node positions use, row node x y columns node positions. layout function igraph. layout_args list arguments pass igraph layout function layout function character string specifies function name. scale_nodes character string giving name centrality measure scale node size . See centralities() valid names. missing (default), uses default qgraph::qgraph() scaling. Overrides vsize provided via .... scaling_factor numeric value specifying strongly scale nodes scale_nodes provided. Values 0 1 result smaller differences values larger 1 result greater differences. default 0.5. mar See qgraph::qgraph(). theme See qgraph::qgraph().","code":""},{"path":"http://sonsoles.me/tna/reference/plot.group_tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Grouped Transition Network Analysis Model — plot.group_tna","text":"NULL (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.group_tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Grouped Transition Network Analysis Model — plot.group_tna","text":"","code":"model <- group_model(engagement_mmm) plot(model)"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Bootstrapped Grouped Transition Network Analysis Model — plot.group_tna_bootstrap","title":"Plot a Bootstrapped Grouped Transition Network Analysis Model — plot.group_tna_bootstrap","text":"Plot Bootstrapped Grouped Transition Network Analysis Model","code":""},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Bootstrapped Grouped Transition Network Analysis Model — plot.group_tna_bootstrap","text":"","code":"# S3 method for class 'group_tna_bootstrap' plot(x, title = names(x), ...)"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Bootstrapped Grouped Transition Network Analysis Model — plot.group_tna_bootstrap","text":"x group_tna_bootstrap object. title character vector titles use plot. ... Additional arguments passed plot.tna().","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Bootstrapped Grouped Transition Network Analysis Model — plot.group_tna_bootstrap","text":"","code":"model <- group_model(engagement_mmm) # Small number of iterations for CRAN boot <- bootstrap(model, iter = 50) plot(boot)"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_centralities.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Centrality Measures — plot.group_tna_centralities","title":"Plot Centrality Measures — plot.group_tna_centralities","text":"Plot Centrality Measures","code":""},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_centralities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Centrality Measures — plot.group_tna_centralities","text":"","code":"# S3 method for class 'group_tna_centralities' plot(   x,   reorder = TRUE,   ncol = 3,   scales = c(\"free_x\", \"fixed\"),   colors,   palette = \"Set2\",   labels = TRUE,   ... )"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_centralities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Centrality Measures — plot.group_tna_centralities","text":"x group_tna_centralities object. reorder logical value indicating whether reorder values centrality descending order. default TRUE. ncol Number columns use facets. default 3. scales Either \"fixed\" \"free_x\" (default). \"free_x\", horizontal axis scaled individually facet. \"fixed\", values used axes. colors colors node (default model colors tna model object passed, otherwise \"black\"). palette color palette applied colors specified. labels logical value indicating whether show centrality numeric values. default TRUE. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_centralities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Centrality Measures — plot.group_tna_centralities","text":"ggplot object displaying line chart centrality one line per cluster.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_centralities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Centrality Measures — plot.group_tna_centralities","text":"","code":"model <- group_model(engagement_mmm) cm <- centralities(model) plot(cm)"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_cliques.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Found Cliques — plot.group_tna_cliques","title":"Plot Found Cliques — plot.group_tna_cliques","text":"Plot Found Cliques","code":""},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_cliques.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Found Cliques — plot.group_tna_cliques","text":"","code":"# S3 method for class 'group_tna_cliques' plot(x, title, ...)"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_cliques.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Found Cliques — plot.group_tna_cliques","text":"x group_tna_cliques object. title character vector titles use plot. ... Arguments passed plot.tna_cliques().","code":""},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_cliques.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Found Cliques — plot.group_tna_cliques","text":"list (invisibly) one element per cluster. element contains qgraph plot one clique present per cluster, otherwise element NULL.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_cliques.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Found Cliques — plot.group_tna_cliques","text":"","code":"model <- group_model(engagement_mmm) cliq <- cliques(model, size = 2) plot(cliq, ask = FALSE)"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Detected Communities — plot.group_tna_communities","title":"Plot Detected Communities — plot.group_tna_communities","text":"Plot Detected Communities","code":""},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Detected Communities — plot.group_tna_communities","text":"","code":"# S3 method for class 'group_tna_communities' plot(x, title = names(x), colors, ...)"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Detected Communities — plot.group_tna_communities","text":"x group_tna_communities object. title character vector titles use plot. colors character vector colors use. ... Arguments passed plot.tna_communities().","code":""},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Detected Communities — plot.group_tna_communities","text":"list (invisibly) qgraph objects nodes colored community cluster.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_communities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Detected Communities — plot.group_tna_communities","text":"","code":"model <- group_model(engagement_mmm) comm <- communities(model) plot(comm)"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_permutation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Permutation Test Results — plot.group_tna_permutation","title":"Plot Permutation Test Results — plot.group_tna_permutation","text":"Plot Permutation Test Results","code":""},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_permutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Permutation Test Results — plot.group_tna_permutation","text":"","code":"# S3 method for class 'group_tna_permutation' plot(x, title, ...)"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_permutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Permutation Test Results — plot.group_tna_permutation","text":"x group_tna_permutation object. title optional character vector titles plot. provided, title shows names clusters contrasted. ... Arguments passed plot.tna_permutation().","code":""},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_permutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Permutation Test Results — plot.group_tna_permutation","text":"list (invisibly) qgraph objects depicting significant difference pair.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_permutation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Permutation Test Results — plot.group_tna_permutation","text":"","code":"model <- group_tna(engagement_mmm) # Small number of iterations for CRAN perm <- permutation_test(model, iter = 20) plot(perm)"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_stability.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Centrality Stability Results — plot.group_tna_stability","title":"Plot Centrality Stability Results — plot.group_tna_stability","text":"Plot Centrality Stability Results","code":""},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_stability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Centrality Stability Results — plot.group_tna_stability","text":"","code":"# S3 method for class 'group_tna_stability' plot(x, ...)"},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_stability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Centrality Stability Results — plot.group_tna_stability","text":"x group_tna_stability object. ... Arguments passed plot.tna_stability().","code":""},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_stability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Centrality Stability Results — plot.group_tna_stability","text":"list (invisibly) ggplot objects displaying stability analysis plot.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.group_tna_stability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Centrality Stability Results — plot.group_tna_stability","text":"","code":"model <- group_model(engagement_mmm) # Low number of iterations for CRAN stability <- estimate_cs(   model,   drop_prop = c(0.3, 0.5, 0.7, 0.9),   iter = 10 ) plot(stability)"},{"path":"http://sonsoles.me/tna/reference/plot.tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Transition Network Analysis Model — plot.tna","title":"Plot a Transition Network Analysis Model — plot.tna","text":"function plots transition network analysis (TNA) model using qgraph package. nodes graph represent states, node sizes corresponding initial state probabilities. Edge labels represent edge weights network.","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Transition Network Analysis Model — plot.tna","text":"","code":"# S3 method for class 'tna' plot(   x,   labels,   colors,   pie,   cut,   show_pruned = TRUE,   pruned_edge_color = \"pink\",   edge.color = NA,   edge.labels = TRUE,   edge.label.position = 0.65,   layout = \"circle\",   layout_args = list(),   scale_nodes,   scaling_factor = 0.5,   mar = rep(5, 4),   theme = \"colorblind\",   ... )"},{"path":"http://sonsoles.me/tna/reference/plot.tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Transition Network Analysis Model — plot.tna","text":"x tna object tna(). labels See qgraph::qgraph(). colors See qgraph::qgraph(). pie See qgraph::qgraph(). cut Edge color width emphasis cutoff value. default median edge weights. See qgraph::qgraph() details. show_pruned logical value indicating pruned edges removed prune() shown plot.  default TRUE, edges drawn dashed different color distinguish . pruned_edge_color character string color use pruned edges show_pruned = TRUE. default \"pink\". edge.color See qgraph::qgraph(). edge.labels See qgraph::qgraph(). edge.label.position See qgraph::qgraph(). layout One following: character string describing qgraph layout (e.g., \"circle\") name igraph layout function (e.g., \"layout_on_grid\"). matrix node positions use, row node x y columns node positions. layout function igraph. layout_args list arguments pass igraph layout function layout function character string specifies function name. scale_nodes character string giving name centrality measure scale node size . See centralities() valid names. missing (default), uses default qgraph::qgraph() scaling. Overrides vsize provided via .... scaling_factor numeric value specifying strongly scale nodes scale_nodes provided. Values 0 1 result smaller differences values larger 1 result greater differences. default 0.5. mar See qgraph::qgraph(). theme See qgraph::qgraph(). ... Additional arguments passed qgraph::qgraph().","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Transition Network Analysis Model — plot.tna","text":"qgraph plot transition network.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Transition Network Analysis Model — plot.tna","text":"","code":"model <- tna(group_regulation) plot(model)"},{"path":"http://sonsoles.me/tna/reference/plot.tna_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Bootstrapped Transition Network Analysis Model — plot.tna_bootstrap","title":"Plot a Bootstrapped Transition Network Analysis Model — plot.tna_bootstrap","text":"Plot Bootstrapped Transition Network Analysis Model","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Bootstrapped Transition Network Analysis Model — plot.tna_bootstrap","text":"","code":"# S3 method for class 'tna_bootstrap' plot(x, ...)"},{"path":"http://sonsoles.me/tna/reference/plot.tna_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Bootstrapped Transition Network Analysis Model — plot.tna_bootstrap","text":"x tna_bootstrap object. ... Additional arguments passed plot.tna().","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.tna_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Bootstrapped Transition Network Analysis Model — plot.tna_bootstrap","text":"","code":"model <- tna(group_regulation) # Small number of iterations for CRAN boot <- bootstrap(model, iter = 50) plot(boot)"},{"path":"http://sonsoles.me/tna/reference/plot.tna_centralities.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Centrality Measures — plot.tna_centralities","title":"Plot Centrality Measures — plot.tna_centralities","text":"Plots centrality measures tna_centralities object lollipop chart. resulting plot includes facets centrality measure, showing values state. returned plot ggplot2 object, can easily modified styled. See centralities() details centrality measures.","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_centralities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Centrality Measures — plot.tna_centralities","text":"","code":"# S3 method for class 'tna_centralities' plot(   x,   reorder = TRUE,   ncol = 3,   scales = c(\"free_x\", \"fixed\"),   colors,   labels = TRUE,   ... )"},{"path":"http://sonsoles.me/tna/reference/plot.tna_centralities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Centrality Measures — plot.tna_centralities","text":"x object class tna_centralities. reorder logical value indicating whether reorder values centrality descending order. default TRUE. ncol Number columns use facets. default 3. scales Either \"fixed\" \"free_x\" (default). \"free_x\", horizontal axis scaled individually facet. \"fixed\", values used axes. colors colors node (default model colors tna model object passed, otherwise \"black\"). labels logical value indicating whether show centrality numeric values. default TRUE. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_centralities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Centrality Measures — plot.tna_centralities","text":"ggplot object displaying lollipop charts centrality measure.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.tna_centralities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Centrality Measures — plot.tna_centralities","text":"","code":"tna_model <- tna(group_regulation) cm <- centralities(tna_model) plot(cm, ncol = 3, reorder = TRUE)"},{"path":"http://sonsoles.me/tna/reference/plot.tna_cliques.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Cliques of a TNA Network — plot.tna_cliques","title":"Plot Cliques of a TNA Network — plot.tna_cliques","text":"Plot Cliques TNA Network","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_cliques.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Cliques of a TNA Network — plot.tna_cliques","text":"","code":"# S3 method for class 'tna_cliques' plot(   x,   n = 6,   first = 1,   show_loops = FALSE,   edge.labels = TRUE,   edge.label.position = 0.65,   minimum = 1e-05,   mar = rep(5, 4),   layout = \"circle\",   layout_args = list(),   cut = 0.01,   normalize = TRUE,   ask = TRUE,   colors,   theme = \"colorblind\",   ... )"},{"path":"http://sonsoles.me/tna/reference/plot.tna_cliques.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Cliques of a TNA Network — plot.tna_cliques","text":"x tna_cliques object. n integer defining maximum number cliques show. defaults 6. first integer giving index first clique show. default index 1. show_loops logical value indicating whether include loops plots . edge.labels See qgraph::qgraph(). edge.label.position See qgraph::qgraph(). minimum See qgraph::qgraph(). mar See qgraph::qgraph(). layout One following: character string describing qgraph layout (e.g., \"circle\") name igraph layout function (e.g., \"layout_on_grid\"). matrix node positions use, row node x y columns node positions. layout function igraph. layout_args list arguments pass igraph layout function layout function character string specifies function name. cut See qgraph::qgraph(). normalize See qgraph::qgraph(). ask logical value. TRUE, show plots one one asks plot next plot interactive mode. colors See qgraph::qgraph(). theme See qgraph::qgraph(). ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_cliques.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Cliques of a TNA Network — plot.tna_cliques","text":"NULL (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.tna_cliques.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Cliques of a TNA Network — plot.tna_cliques","text":"","code":"model <- tna(group_regulation) cliq <- cliques(model, size = 2) plot(cliq, n = 1, ask = FALSE)"},{"path":"http://sonsoles.me/tna/reference/plot.tna_communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Communities — plot.tna_communities","title":"Plot Communities — plot.tna_communities","text":"function visualizes communities detected within tna object based different community detection algorithms corresponding color mappings.","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Communities — plot.tna_communities","text":"","code":"# S3 method for class 'tna_communities' plot(x, colors, method = \"spinglass\", ...)"},{"path":"http://sonsoles.me/tna/reference/plot.tna_communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Communities — plot.tna_communities","text":"x communities object generated find_communities method. community detection method maps nodes points specific communities. colors character vector color values used visualizing community assignments. method character string naming community detection method use coloring plot. See communities() details. ... Additional arguments passed qgraph::qgraph().","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Communities — plot.tna_communities","text":"qgraph object nodes colored community.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.tna_communities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Communities — plot.tna_communities","text":"","code":"model <- tna(group_regulation) comm <- communities(model) plot(comm, method = \"leading_eigen\")"},{"path":"http://sonsoles.me/tna/reference/plot.tna_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Comparison of Two TNA Models or Matrices — plot.tna_comparison","title":"Plot the Comparison of Two TNA Models or Matrices — plot.tna_comparison","text":"Plot Comparison Two TNA Models Matrices","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Comparison of Two TNA Models or Matrices — plot.tna_comparison","text":"","code":"# S3 method for class 'tna_comparison' plot(   x,   type = \"heatmap\",   population = \"difference\",   method = \"pearson\",   name_x = \"x\",   name_y = \"y\",   ... )"},{"path":"http://sonsoles.me/tna/reference/plot.tna_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Comparison of Two TNA Models or Matrices — plot.tna_comparison","text":"x tna_comparison object. type character string naming type plot produce. available options \"heatmap\" (default), \"scatterplot\", \"centrality_heatmap\", \"weight_density\". population \"character\" string naming population produce heatmaps, .e, one \"x\", \"y\", \"difference\" differences. Ignored type = \"scatterplot\". Defaults \"diff\". method character string naming correlation coefficient use plotting scatterplot. available options \"pearson\" (default), \"kendall\", \"spearman\", \"distance\". final option distance correlation coefficient Szekely, Rizzo, Bakirov (2007). See also energy package information measure. name_x optional character string use name first population plots. default \"x\". name_y optional character string use name second population plots. default \"y\". ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Comparison of Two TNA Models or Matrices — plot.tna_comparison","text":"ggplot object.","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_comparison.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot the Comparison of Two TNA Models or Matrices — plot.tna_comparison","text":"Szekely, G.J., Rizzo, M.L., Bakirov, N.K. (2007), Measuring Testing Dependence Correlation Distances, Annals Statistics, Vol. 35 . 6, pp. 2769-2794. doi:10.1214/009053607000000505","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.tna_comparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Comparison of Two TNA Models or Matrices — plot.tna_comparison","text":"","code":"model_x <- tna(group_regulation[1:200, ]) model_y <- tna(group_regulation[1001:1200, ]) comp <- compare(model_x, model_y) plot(comp)"},{"path":"http://sonsoles.me/tna/reference/plot.tna_permutation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Significant Differences from a Permutation Test — plot.tna_permutation","title":"Plot the Significant Differences from a Permutation Test — plot.tna_permutation","text":"Plot Significant Differences Permutation Test","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_permutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Significant Differences from a Permutation Test — plot.tna_permutation","text":"","code":"# S3 method for class 'tna_permutation' plot(x, colors, posCol = \"#009900\", negCol = \"red\", ...)"},{"path":"http://sonsoles.me/tna/reference/plot.tna_permutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Significant Differences from a Permutation Test — plot.tna_permutation","text":"x tna_permutation object. colors See qgraph::qgraph(). posCol Color plotting edges difference edge weights positive. See qgraph::qgraph(). negCol Color plotting edges difference edge weights negative. See qgraph::qgraph(). ... Arguments passed plot_model().","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_permutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Significant Differences from a Permutation Test — plot.tna_permutation","text":"qgraph object containing significant edges according permutation test.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.tna_permutation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Significant Differences from a Permutation Test — plot.tna_permutation","text":"","code":"model_x <- tna(group_regulation[1:200, ]) model_y <- tna(group_regulation[1001:1200, ]) # Small number of iterations for CRAN perm <- permutation_test(model_x, model_y, iter = 20) plot(perm)"},{"path":"http://sonsoles.me/tna/reference/plot.tna_stability.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Centrality Stability Results — plot.tna_stability","title":"Plot Centrality Stability Results — plot.tna_stability","text":"function visualizes centrality stability results produced estimate_centrality_stability function. shows different centrality measures' correlations change varying proportions cases dropped, along confidence intervals (CIs).","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_stability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Centrality Stability Results — plot.tna_stability","text":"","code":"# S3 method for class 'tna_stability' plot(x, level = 0.05, ...)"},{"path":"http://sonsoles.me/tna/reference/plot.tna_stability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Centrality Stability Results — plot.tna_stability","text":"x tna_stability object produced estimate_cs. level numeric value representing significance level confidence intervals. Defaults 0.05. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_stability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Centrality Stability Results — plot.tna_stability","text":"ggplot object displaying stability analysis plot.","code":""},{"path":"http://sonsoles.me/tna/reference/plot.tna_stability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Centrality Stability Results — plot.tna_stability","text":"function aggregates results centrality measure across multiple proportions dropped cases (e.g., 0.1, 0.2, ..., 0.9) calculates mean desired quantiles proportion. confidence intervals (CIs) computed based quantiles displayed plot. valid data available centrality measure (e.g., missing NA values), function skips measure warning. plot includes: mean correlation centrality measure function proportion dropped cases. Shaded confidence intervals representing CIs centrality measure. horizontal dashed line threshold value used calculating CS-coefficient. subtitle listing CS-coefficients centrality measure.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot.tna_stability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Centrality Stability Results — plot.tna_stability","text":"","code":"model <- tna(group_regulation) cs <- estimate_cs(model, iter = 10) plot(cs)"},{"path":"http://sonsoles.me/tna/reference/plot_compare.group_tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Difference Network Between Two Groups — plot_compare.group_tna","title":"Plot the Difference Network Between Two Groups — plot_compare.group_tna","text":"Plot Difference Network Two Groups","code":""},{"path":"http://sonsoles.me/tna/reference/plot_compare.group_tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Difference Network Between Two Groups — plot_compare.group_tna","text":"","code":"# S3 method for class 'group_tna' plot_compare(x, i = 1L, j = 2L, ...)"},{"path":"http://sonsoles.me/tna/reference/plot_compare.group_tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Difference Network Between Two Groups — plot_compare.group_tna","text":"x group_tna object. integer index name principal cluster character string. j integer index name secondary cluster character string. ... Additional arguments passed plot_compare.tna().","code":""},{"path":"http://sonsoles.me/tna/reference/plot_compare.group_tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Difference Network Between Two Groups — plot_compare.group_tna","text":"qgraph object displaying difference network two clusters","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot_compare.group_tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Difference Network Between Two Groups — plot_compare.group_tna","text":"","code":"model <- group_model(engagement_mmm) plot_compare(model)"},{"path":"http://sonsoles.me/tna/reference/plot_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Difference Network Between Two Models — plot_compare","title":"Plot the Difference Network Between Two Models — plot_compare","text":"Plots difference network model x model y. edges computed subtracting two models. pie chart difference initial probabilities model x model y. Green color indicates xis greater yand red indicates otherwise.","code":""},{"path":"http://sonsoles.me/tna/reference/plot_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Difference Network Between Two Models — plot_compare","text":"","code":"plot_compare(x, ...)  # S3 method for class 'tna' plot_compare(   x,   y,   theme = NULL,   palette = \"colorblind\",   posCol = \"#009900\",   negCol = \"red\",   ... )"},{"path":"http://sonsoles.me/tna/reference/plot_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Difference Network Between Two Models — plot_compare","text":"x tna object. principal model. ... Additional arguments passed qgraph::qgraph(). y tna object. model subtracted principal model. theme See qgraph::qgraph(). palette See qgraph::qgraph(). posCol Color plotting edges pie first group higher value. See qgraph::qgraph(). negCol Color plotting edges pie second group higher value. See qgraph::qgraph().","code":""},{"path":"http://sonsoles.me/tna/reference/plot_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Difference Network Between Two Models — plot_compare","text":"qgraph object displaying difference network two models.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Difference Network Between Two Models — plot_compare","text":"","code":"model_x <- tna(group_regulation[group_regulation[, 1] == \"plan\", ]) model_y <- tna(group_regulation[group_regulation[, 1] != \"plan\", ]) plot_compare(model_x, model_y)"},{"path":"http://sonsoles.me/tna/reference/plot_frequencies.group_tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Frequency Distribution of States — plot_frequencies.group_tna","title":"Plot the Frequency Distribution of States — plot_frequencies.group_tna","text":"Plot Frequency Distribution States","code":""},{"path":"http://sonsoles.me/tna/reference/plot_frequencies.group_tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Frequency Distribution of States — plot_frequencies.group_tna","text":"","code":"# S3 method for class 'group_tna' plot_frequencies(   x,   label,   colors,   width = 0.7,   palette = \"Set2\",   show_label = TRUE,   position = \"dodge\",   hjust = 1.2,   ... )"},{"path":"http://sonsoles.me/tna/reference/plot_frequencies.group_tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Frequency Distribution of States — plot_frequencies.group_tna","text":"x group_tna object. label optional character string can provided specify grouping factor name x constructed using column name original data. colors vector colors used plot (one per group) width Width bars. Default 0.7. palette palette used colors passed. show_label Boolean indicating whether show label frequency counts. Default TRUE. position Position bars: \"dodge\", \"dodge2\", \"fill\" \"stack\" hjust Horizontal adjustment labels. Default 1.2. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/plot_frequencies.group_tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Frequency Distribution of States — plot_frequencies.group_tna","text":"ggplot object.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot_frequencies.group_tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Frequency Distribution of States — plot_frequencies.group_tna","text":"","code":"model <- group_model(engagement_mmm) # Default plot_frequencies(model)  # Default labels outside and custom colors plot_frequencies(   model,   width = 0.9,   hjust = -0.3,   colors = c(\"#218516\", \"#f9c22e\", \"#53b3cb\") )  # Stacked with no labels plot_frequencies(model, position = \"stack\", show_label = FALSE)  # Fill plot_frequencies(model, position = \"fill\", hjust = 1.1)"},{"path":"http://sonsoles.me/tna/reference/plot_frequencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Frequency Distribution of States — plot_frequencies","title":"Plot the Frequency Distribution of States — plot_frequencies","text":"Plot Frequency Distribution States","code":""},{"path":"http://sonsoles.me/tna/reference/plot_frequencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Frequency Distribution of States — plot_frequencies","text":"","code":"plot_frequencies(x, ...)  # S3 method for class 'tna' plot_frequencies(x, width = 0.7, hjust = 1.2, show_label = TRUE, colors, ...)"},{"path":"http://sonsoles.me/tna/reference/plot_frequencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Frequency Distribution of States — plot_frequencies","text":"x tna object created sequence data. ... Ignored. width numeric value Width bars. Default 0.7, hjust numeric value horizontal adjustment labels. Default 1.2. show_label logical value indicating whether show label frequency counts. Default TRUE. colors character vector colors used plot (one per label) single color.","code":""},{"path":"http://sonsoles.me/tna/reference/plot_frequencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Frequency Distribution of States — plot_frequencies","text":"ggplot object.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot_frequencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Frequency Distribution of States — plot_frequencies","text":"","code":"model <- tna(group_regulation) plot_frequencies(model)  plot_frequencies(model, width =  0.5, colors = \"pink\")"},{"path":"http://sonsoles.me/tna/reference/plot_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Transition Network Model from a Matrix of Edge Weights — plot_model","title":"Plot a Transition Network Model from a Matrix of Edge Weights — plot_model","text":"Plot Transition Network Model Matrix Edge Weights","code":""},{"path":"http://sonsoles.me/tna/reference/plot_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Transition Network Model from a Matrix of Edge Weights — plot_model","text":"","code":"plot_model(   x,   labels,   colors,   cut,   edge.labels = TRUE,   edge.label.position = 0.65,   layout = \"circle\",   layout_args = list(),   mar = rep(5, 4),   theme = \"colorblind\",   ... )"},{"path":"http://sonsoles.me/tna/reference/plot_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Transition Network Model from a Matrix of Edge Weights — plot_model","text":"x square matrix edge weights. labels See qgraph::qgraph(). colors See qgraph::qgraph(). cut Edge color width emphasis cutoff value. default median edge weights. See qgraph::qgraph() details. edge.labels See qgraph::qgraph(). edge.label.position See qgraph::qgraph(). layout One following: character string describing qgraph layout (e.g., \"circle\") name igraph layout function (e.g., \"layout_on_grid\"). matrix node positions use, row node x y columns node positions. layout function igraph. layout_args list arguments pass igraph layout function layout function character string specifies function name. mar See qgraph::qgraph(). theme See qgraph::qgraph(). ... Additional arguments passed qgraph::qgraph().","code":""},{"path":"http://sonsoles.me/tna/reference/plot_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Transition Network Model from a Matrix of Edge Weights — plot_model","text":"See plot.tna().","code":""},{"path":"http://sonsoles.me/tna/reference/plot_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Transition Network Model from a Matrix of Edge Weights — plot_model","text":"","code":"m <- matrix(rexp(25), 5, 5) plot_model(m)"},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.group_tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot State Frequencies as a Mosaic Between Two Groups — plot_mosaic.group_tna","title":"Plot State Frequencies as a Mosaic Between Two Groups — plot_mosaic.group_tna","text":"Plot State Frequencies Mosaic Two Groups","code":""},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.group_tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot State Frequencies as a Mosaic Between Two Groups — plot_mosaic.group_tna","text":"","code":"# S3 method for class 'group_tna' plot_mosaic(x, label, digits = 1, ...)"},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.group_tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot State Frequencies as a Mosaic Between Two Groups — plot_mosaic.group_tna","text":"x group_tna object. label optional character string can provided specify grouping factor name x constructed using column name original data. digits integer determines number digits use chi-square test statistic p-value plot. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.group_tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot State Frequencies as a Mosaic Between Two Groups — plot_mosaic.group_tna","text":"ggplot object.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.group_tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot State Frequencies as a Mosaic Between Two Groups — plot_mosaic.group_tna","text":"","code":"model <- group_model(engagement_mmm) plot_mosaic(model)"},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Mosaic Plot of Transitions or Events — plot_mosaic","title":"Create a Mosaic Plot of Transitions or Events — plot_mosaic","text":"Create Mosaic Plot Transitions Events","code":""},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Mosaic Plot of Transitions or Events — plot_mosaic","text":"","code":"plot_mosaic(x, ...)  # S3 method for class 'tna' plot_mosaic(x, digits = 1, ...)"},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Mosaic Plot of Transitions or Events — plot_mosaic","text":"x tna group_tna object. ... Ignored. digits integer determines number digits use chi-square test statistic p-value plot.","code":""},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Mosaic Plot of Transitions or Events — plot_mosaic","text":"ggplot object.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Mosaic Plot of Transitions or Events — plot_mosaic","text":"","code":"ftna_model <- ftna(group_regulation) plot_mosaic(ftna_model)"},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.tna_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot State Frequencies as a Mosaic Between Two Groups — plot_mosaic.tna_data","title":"Plot State Frequencies as a Mosaic Between Two Groups — plot_mosaic.tna_data","text":"Plot State Frequencies Mosaic Two Groups","code":""},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.tna_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot State Frequencies as a Mosaic Between Two Groups — plot_mosaic.tna_data","text":"","code":"# S3 method for class 'tna_data' plot_mosaic(x, group, label = \"Group\", digits = 1, ...)"},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.tna_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot State Frequencies as a Mosaic Between Two Groups — plot_mosaic.tna_data","text":"x tna_data object. group character string giving column name (meta) data contrast frequencies vector group indicators length number rows sequence data. label optional character string specifies label grouping variable group column name data. digits integer determines number digits use chi-square test statistic p-value plot. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.tna_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot State Frequencies as a Mosaic Between Two Groups — plot_mosaic.tna_data","text":"ggplot object.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/plot_mosaic.tna_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot State Frequencies as a Mosaic Between Two Groups — plot_mosaic.tna_data","text":"","code":"d <- data.frame(   time = rep(1:5, rep = 4),   group = rep(1:4, each = 5),   event = sample(LETTERS[1:3], 20, replace = TRUE) ) sequence_data <- prepare_data(   d,   time = \"time\",   actor = \"group\",   action = \"event\" ) #> ── Preparing Data ────────────────────────────────────────────────────────────── #> ℹ Input data dimensions: 20 rows, 3 columns #> ℹ First few time values: 1, 2, and 3 #> ℹ Detected <numeric> time values: treating as Unix timestamp. #> ℹ Number of values to parse: 20 #> ℹ Sample values: 1, 2, and 3 #> ℹ Sample of parsed times: 1970-01-01 00:00:01, 1970-01-01 00:00:02, and #>   1970-01-01 00:00:03 #> ℹ Time threshold for new session: 900 seconds #> ℹ Total number of sessions: 4 #> ℹ Number of unique users: 4 #> ℹ Total number of actions: 20 #> ℹ Maximum sequence length: 5 actions #> ℹ Time range: 1970-01-01 00:00:01 to 1970-01-01 00:00:05 plot_mosaic(sequence_data, group = \"group\")"},{"path":"http://sonsoles.me/tna/reference/plot_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Sequence Index Plot or a Distribution Plot — plot_sequences","title":"Create a Sequence Index Plot or a Distribution Plot — plot_sequences","text":"Create Sequence Index Plot Distribution Plot","code":""},{"path":"http://sonsoles.me/tna/reference/plot_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Sequence Index Plot or a Distribution Plot — plot_sequences","text":"","code":"plot_sequences(x, ...)  # S3 method for class 'tna' plot_sequences(   x,   group,   type = \"index\",   scale = \"proportion\",   geom = \"bar\",   include_na = FALSE,   na_color = \"white\",   sort_by,   show_n = TRUE,   border,   title,   legend_title,   xlab,   ylab,   tick = 5,   ncol = 2L,   ... )  # S3 method for class 'tna_data' plot_sequences(   x,   group,   type = \"index\",   scale = \"proportion\",   geom = \"bar\",   include_na = FALSE,   colors,   na_color = \"white\",   sort_by,   show_n = TRUE,   border,   title,   legend_title,   xlab,   ylab,   tick = 5,   ncol = 2L,   ... )  # Default S3 method plot_sequences(   x,   cols,   group,   type = \"index\",   scale = \"proportion\",   geom = \"bar\",   include_na = FALSE,   colors,   na_color = \"white\",   sort_by,   show_n = TRUE,   border,   title,   legend_title,   xlab,   ylab,   tick = 5,   ncol = 2L,   ... )  # S3 method for class 'group_tna' plot_sequences(   x,   type = \"index\",   scale = \"proportion\",   geom = \"bar\",   include_na = FALSE,   na_color = \"white\",   sort_by,   show_n = TRUE,   border,   title,   legend_title,   xlab,   ylab,   tick = 1,   ncol = 2L,   ... )"},{"path":"http://sonsoles.me/tna/reference/plot_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Sequence Index Plot or a Distribution Plot — plot_sequences","text":"x tna, group_tna, tna_data data.frame object sequence data wide format. ... Ignored. group vector indicating group assignment row data. Must length number rows x. Alternatively, single character string giving column name data defines group x wide format data.frame tna_data object. Used faceting plot. type character string type plot generate. available options  \"index\" (default) sequence index plot, \"distribution\" showing distribution states time. scale character string determines scaling vertical axis distribution plots. options \"proportion\" (default) \"count\" proportions raw counts states, respectively. geom character string type geom use distribution plots. options \"bar\" (default) \"area\". include_na logical value whether include missing values distribution plots. default FALSE. TRUE, missing values converted new state included plot. na_color character string giving color use missing values. default \"white\". sort_by Either character vector column names x sort \"everything\" sort every column. missing, sorting done. show_n logical value whether add number observations (total group) plot title. border character string giving color borders. index plots, color borders cells (tiles). distribution plot geom = \"bar\", color bar outlines. applicable geom = \"area\". title optional character string providing title plot. legend_title optional character string providing title legend. xlab character string giving label horizontal axis. default \"Time\". ylab character string giving label vertical axis. default \"Sequence\" index plots, \"Proportion\" \"Count\" based scale distribution plots. tick integer specifying horizontal axis label interval. default value tick = 5 shows every 5th label. Setting 1 show every label. ncol Number columns use facets. default 2. colors named character vector mapping states colors, unnamed character vector. missing, default palette used. cols character Vector column names treated time points. missing, columns used.","code":""},{"path":"http://sonsoles.me/tna/reference/plot_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Sequence Index Plot or a Distribution Plot — plot_sequences","text":"","code":"# Sequence index plot (default) plot_sequences(   group_regulation,   group = rep(1:2, each = 1000), )  # State distribution plot plot_sequences(   group_regulation,   group = rep(1:2, each = 1000),   type = \"distribution\", )"},{"path":"http://sonsoles.me/tna/reference/prepare_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute User Sessions from Event Data — prepare_data","title":"Compute User Sessions from Event Data — prepare_data","text":"Processes dataset create user sessions based time gaps, ordering columns, actor groupings. supports different ways understand order user behavior provides flexibility widening data.","code":""},{"path":"http://sonsoles.me/tna/reference/prepare_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute User Sessions from Event Data — prepare_data","text":"","code":"prepare_data(   data,   actor,   time,   action,   order,   time_threshold = 900,   custom_format = NULL,   is_unix_time = FALSE,   unix_time_unit = \"seconds\",   unused_fn = dplyr::first )"},{"path":"http://sonsoles.me/tna/reference/prepare_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute User Sessions from Event Data — prepare_data","text":"data data.frame containing action/event data. actor character string giving name column represents user/actor identifier. provided neither time order specified, entire dataset treated single session. time character string giving name column representing timestamps action events. action character string giving name column holding information action taken. order character string giving name column sequence numbers non-unique orderable values indicate order within actor group, present ordered data actor available, used widening data. actor time specified, sequence order specified determines order events within actor session. time_threshold integer specifying time threshold seconds creating new time-based sessions. Defaults 900 seconds. custom_format character string giving format used parse time column. is_unix_time logical value indicating whether time column Unix time. default FALSE. unix_time_unit character string giving Unix time unit is_unix_time TRUE. default \"seconds\". Valid options \"seconds\", \"milliseconds\", \"microseconds\". unused_fn handle extra columns pivoting wide format. See tidyr::pivot_wider(). default keep columns use first value.","code":""},{"path":"http://sonsoles.me/tna/reference/prepare_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute User Sessions from Event Data — prepare_data","text":"tna_data object, list following elements: long_data: processed data long format. sequence_data: processed data sequences wide format, actions/events different variables structured sequences. meta_data: variables original data wide format. statistics: list containing summary statistics: total sessions, total actions, unique users, time range (applicable), top sessions user activities.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/prepare_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute User Sessions from Event Data — prepare_data","text":"","code":"results <- prepare_data(   group_regulation_long, actor = \"Actor\", time = \"Time\", action = \"Action\" ) #> ── Preparing Data ────────────────────────────────────────────────────────────── #> ℹ Input data dimensions: 27533 rows, 6 columns #> ℹ First few time values: 2025-01-01 08:27:07.712698, 2025-01-01 #>   08:35:20.712698, and 2025-01-01 08:42:18.712698 #> ℹ Number of values to parse: 27533 #> ℹ Sample values: 2025-01-01 08:27:07.712698, 2025-01-01 08:35:20.712698, and #>   2025-01-01 08:42:18.712698 #> ℹ Sample of parsed times: 2025-01-01 08:27:07.712698, 2025-01-01 #>   08:35:20.712698, and 2025-01-01 08:42:18.712698 #> ℹ Time threshold for new session: 900 seconds #> ℹ Total number of sessions: 2000 #> ℹ Number of unique users: 2000 #> ℹ Total number of actions: 27533 #> ℹ Maximum sequence length: 26 actions #> ℹ Time range: 2025-01-01 08:01:16.009382 to 2025-01-01 13:03:20.238288 print(results$sequence_data) #> # A tibble: 2,000 × 26 #>    T1    T2    T3    T4    T5    T6    T7    T8    T9    T10   T11   T12   T13   #>    <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #>  1 cohe… cons… disc… synt… adapt cons… plan  cons… NA    NA    NA    NA    NA    #>  2 emot… cohe… disc… synt… NA    NA    NA    NA    NA    NA    NA    NA    NA    #>  3 plan  cons… plan  NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    #>  4 disc… disc… cons… plan  cohe… cons… disc… cons… plan  plan  NA    NA    NA    #>  5 cohe… cons… plan  plan  moni… plan  cons… disc… cons… plan  plan  cohe… cons… #>  6 disc… adapt cohe… cons… disc… emot… cohe… core… disc… disc… adapt NA    NA    #>  7 disc… emot… cohe… cons… core… core… plan  plan  cons… core… cons… disc… disc… #>  8 cohe… plan  cons… plan  cons… disc… disc… synt… cons… disc… synt… adapt cons… #>  9 emot… cohe… emot… plan  moni… disc… emot… cons… moni… disc… synt… core… cons… #> 10 emot… cohe… cons… plan  plan  plan  plan  emot… plan  NA    NA    NA    NA    #> # ℹ 1,990 more rows #> # ℹ 13 more variables: T14 <chr>, T15 <chr>, T16 <chr>, T17 <chr>, T18 <chr>, #> #   T19 <chr>, T20 <chr>, T21 <chr>, T22 <chr>, T23 <chr>, T24 <chr>, #> #   T25 <chr>, T26 <chr> print(results$meta_data) #> # A tibble: 2,000 × 8 #>    .session_id   Actor Achiever Group Course Time                #>    <chr>         <int> <chr>    <dbl> <chr>  <dttm>              #>  1 1 session1        1 High         1 A      2025-01-01 08:27:07 #>  2 10 session1      10 High         1 A      2025-01-01 08:23:45 #>  3 100 session1    100 High        10 A      2025-01-01 10:11:50 #>  4 1000 session1  1000 High       100 B      2025-01-01 09:12:00 #>  5 1001 session1  1001 Low        101 B      2025-01-01 09:18:40 #>  6 1002 session1  1002 Low        101 B      2025-01-01 09:18:53 #>  7 1003 session1  1003 Low        101 B      2025-01-01 09:18:05 #>  8 1004 session1  1004 Low        101 B      2025-01-01 09:22:26 #>  9 1005 session1  1005 Low        101 B      2025-01-01 09:22:31 #> 10 1006 session1  1006 Low        101 B      2025-01-01 09:15:23 #> # ℹ 1,990 more rows #> # ℹ 2 more variables: .standardized_time <dttm>, .session_nr <int> print(results$statistics) #> $total_sessions #> [1] 2000 #>  #> $total_actions #> [1] 27533 #>  #> $max_sequence_length #> [1] 26 #>  #> $unique_users #> [1] 2000 #>  #> $sessions_per_user #> # A tibble: 2,000 × 2 #>    Actor n_sessions #>    <int>      <int> #>  1     1          1 #>  2     2          1 #>  3     3          1 #>  4     4          1 #>  5     5          1 #>  6     6          1 #>  7     7          1 #>  8     8          1 #>  9     9          1 #> 10    10          1 #> # ℹ 1,990 more rows #>  #> $actions_per_session #> # A tibble: 2,000 × 2 #>    .session_id   n_actions #>    <chr>             <int> #>  1 1010 session1        26 #>  2 1015 session1        26 #>  3 1030 session1        26 #>  4 1092 session1        26 #>  5 1106 session1        26 #>  6 1107 session1        26 #>  7 1153 session1        26 #>  8 1184 session1        26 #>  9 1209 session1        26 #> 10 1267 session1        26 #> # ℹ 1,990 more rows #>  #> $time_range #> [1] \"2025-01-01 08:01:16 UTC\" \"2025-01-01 13:03:20 UTC\" #>   data_ordered <- tibble::tibble(    user = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"C\", \"C\"),    order = c(1, 2, 3, 1, 2, 1, 2, 3),    action = c(      \"view\", \"click\", \"add_cart\", \"view\",      \"checkout\", \"view\", \"click\", \"share\"    ) ) results_ordered <- prepare_data(   data_ordered, actor = \"user\", order = \"order\", action = \"action\" ) #> ── Preparing Data ────────────────────────────────────────────────────────────── #> ℹ Input data dimensions: 8 rows, 3 columns #> ℹ Using provided `order` column to create sequences. #> ℹ Total number of sessions: 3 #> ℹ Number of unique users: 3 #> ℹ Total number of actions: 8 #> ℹ Maximum sequence length: 3 actions print(results_ordered$sequence_data) #> # A tibble: 3 × 3 #>   T1    T2       T3       #>   <chr> <chr>    <chr>    #> 1 view  click    add_cart #> 2 view  checkout NA       #> 3 view  click    share    print(results_ordered$meta_data) #> # A tibble: 3 × 3 #>   .session_id user  order #>   <chr>       <chr> <dbl> #> 1 A           A         1 #> 2 B           B         1 #> 3 C           C         1 print(results_ordered$statistics) #> $total_sessions #> [1] 3 #>  #> $total_actions #> [1] 8 #>  #> $max_sequence_length #> [1] 3 #>  #> $unique_users #> [1] 3 #>  #> $sessions_per_user #> # A tibble: 3 × 2 #>   user  n_sessions #>   <chr>      <int> #> 1 A              1 #> 2 B              1 #> 3 C              1 #>  #> $actions_per_session #> # A tibble: 3 × 2 #>   .session_id n_actions #>   <chr>           <int> #> 1 A                   3 #> 2 C                   3 #> 3 B                   2 #>   data_single_session <- tibble::tibble(   action = c(     \"view\", \"click\", \"add_cart\", \"view\",     \"checkout\", \"view\", \"click\", \"share\"    ) ) results_single <- prepare_data(data_single_session, action = \"action\") #> ── Preparing Data ────────────────────────────────────────────────────────────── #> ℹ Input data dimensions: 8 rows, 1 columns #> ℹ No `time` or `order` column provided. Treating the entire dataset as one #>   session. #> ℹ Total number of sessions: 1 #> ℹ Total number of actions: 8 #> ℹ Maximum sequence length: 8 actions print(results_single$sequence_data) #> # A tibble: 1 × 8 #>   T1    T2    T3       T4    T5       T6    T7    T8    #>   <chr> <chr> <chr>    <chr> <chr>    <chr> <chr> <chr> #> 1 view  click add_cart view  checkout view  click share print(results_single$meta_data) #> # A tibble: 1 × 1 #>   .session_id #>   <chr>       #> 1 session     print(results_single$statistics) #> $total_sessions #> [1] 1 #>  #> $total_actions #> [1] 8 #>  #> $max_sequence_length #> [1] 8 #>  #> $actions_per_session #> # A tibble: 1 × 2 #>   .session_id n_actions #>   <chr>           <int> #> 1 session             8 #>"},{"path":"http://sonsoles.me/tna/reference/print.group_tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a group_tna Object — print.group_tna","title":"Print a group_tna Object — print.group_tna","text":"Print group_tna Object","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a group_tna Object — print.group_tna","text":"","code":"# S3 method for class 'group_tna' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.group_tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a group_tna Object — print.group_tna","text":"x group_tna object. ... Arguments passed print.tna().","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a group_tna Object — print.group_tna","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.group_tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a group_tna Object — print.group_tna","text":"","code":"model <- group_model(engagement_mmm) print(model) #> Cluster 1 #>  #> State Labels #>  #> Active, Average, Disengaged  #>  #> Transition Probability Matrix #>  #>               Active   Average Disengaged #> Active     0.7061503 0.2938497 0.00000000 #> Average    0.5133929 0.4598214 0.02678571 #> Disengaged 0.3333333 0.3809524 0.28571429 #>  #> Initial Probabilities #>  #> [1] 0.75 0.00 0.25 #>  #> Cluster 2 #>  #> State Labels #>  #> Active, Average, Disengaged  #>  #> Transition Probability Matrix #>  #>               Active   Average Disengaged #> Active     0.4924242 0.4419192 0.06565657 #> Average    0.3249516 0.5860735 0.08897485 #> Disengaged 0.3333333 0.5733333 0.09333333 #>  #> Initial Probabilities #>  #> [1] 0.5192308 0.4807692 0.0000000 #>  #> Cluster 3 #>  #> State Labels #>  #> Active, Average, Disengaged  #>  #> Transition Probability Matrix #>  #>                Active   Average Disengaged #> Active     0.30067568 0.6081081 0.09121622 #> Average    0.15940767 0.5731707 0.26742160 #> Disengaged 0.06578947 0.4707602 0.46345029 #>  #> Initial Probabilities #>  #> [1] 0.0000000 0.4107143 0.5892857"},{"path":"http://sonsoles.me/tna/reference/print.group_tna_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Print group_tna Bootstrap Results — print.group_tna_bootstrap","title":"Print group_tna Bootstrap Results — print.group_tna_bootstrap","text":"Print group_tna Bootstrap Results","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print group_tna Bootstrap Results — print.group_tna_bootstrap","text":"","code":"# S3 method for class 'group_tna_bootstrap' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.group_tna_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print group_tna Bootstrap Results — print.group_tna_bootstrap","text":"x group_tna_bootstrap object. ... Arguments passed print.tna_bootstrap().","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print group_tna Bootstrap Results — print.group_tna_bootstrap","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.group_tna_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print group_tna Bootstrap Results — print.group_tna_bootstrap","text":"","code":"model <- group_model(engagement_mmm) # Low number of iteration for CRAN boot <- bootstrap(model, iter = 10) print(boot) #> Cluster 1 #>  #> Non-significant Edges #>  #>         from         to     weight    p_value   cr_lower   cr_upper    ci_lower #> 1     Active     Active 0.70615034 0.09090909 0.52961276 0.88268793 0.674159111 #> 2    Average     Active 0.51339286 0.09090909 0.38504464 0.64174107 0.450814477 #> 3 Disengaged     Active 0.33333333 0.72727273 0.25000000 0.41666667 0.152901786 #> 4     Active    Average 0.29384966 0.09090909 0.22038724 0.36731207 0.247520508 #> 5    Average    Average 0.45982143 0.09090909 0.34486607 0.57477679 0.390923158 #> 6 Disengaged    Average 0.38095238 0.18181818 0.28571429 0.47619048 0.307500000 #> 8    Average Disengaged 0.02678571 0.45454545 0.02008929 0.03348214 0.006215872 #> 9 Disengaged Disengaged 0.28571429 0.45454545 0.21428571 0.35714286 0.114583333 #>     ci_upper #> 1 0.75247949 #> 2 0.58359968 #> 3 0.55208333 #> 4 0.32584089 #> 5 0.51907343 #> 6 0.49196429 #> 8 0.03055275 #> 9 0.38883929 #>  #> Cluster 2 #>  #> Non-significant Edges #>  #>         from         to     weight    p_value   cr_lower   cr_upper   ci_lower #> 1     Active     Active 0.49242424 0.09090909 0.36931818 0.61553030 0.45989939 #> 2    Average     Active 0.32495164 0.09090909 0.24371373 0.40618956 0.29967507 #> 3 Disengaged     Active 0.33333333 0.09090909 0.25000000 0.41666667 0.30248016 #> 4     Active    Average 0.44191919 0.09090909 0.33143939 0.55239899 0.40410719 #> 5    Average    Average 0.58607350 0.09090909 0.43955513 0.73259188 0.56087293 #> 6 Disengaged    Average 0.57333333 0.09090909 0.43000000 0.71666667 0.47896486 #> 7     Active Disengaged 0.06565657 0.18181818 0.04924242 0.08207071 0.05351391 #> 8    Average Disengaged 0.08897485 0.18181818 0.06673114 0.11121857 0.07285400 #> 9 Disengaged Disengaged 0.09333333 0.54545455 0.07000000 0.11666667 0.02328089 #>     ci_upper #> 1 0.53149212 #> 2 0.35172149 #> 3 0.37843407 #> 4 0.47532582 #> 5 0.61112908 #> 6 0.65801282 #> 7 0.08423991 #> 8 0.11197395 #> 9 0.17351852 #>  #> Cluster 3 #>  #> Non-significant Edges #>  #>         from         to     weight    p_value   cr_lower   cr_upper   ci_lower #> 1     Active     Active 0.30067568 0.09090909 0.22550676 0.37584459 0.23953909 #> 2    Average     Active 0.15940767 0.09090909 0.11955575 0.19925958 0.13655008 #> 3 Disengaged     Active 0.06578947 0.09090909 0.04934211 0.08223684 0.05774954 #> 4     Active    Average 0.60810811 0.09090909 0.45608108 0.76013514 0.57987390 #> 5    Average    Average 0.57317073 0.09090909 0.42987805 0.71646341 0.55575101 #> 6 Disengaged    Average 0.47076023 0.09090909 0.35307018 0.58845029 0.44109971 #> 7     Active Disengaged 0.09121622 0.18181818 0.06841216 0.11402027 0.07129798 #> 8    Average Disengaged 0.26742160 0.09090909 0.20056620 0.33427700 0.24493476 #> 9 Disengaged Disengaged 0.46345029 0.09090909 0.34758772 0.57931287 0.44564246 #>    ci_upper #> 1 0.3378823 #> 2 0.1818120 #> 3 0.0792497 #> 4 0.6601644 #> 5 0.5928507 #> 6 0.4895410 #> 7 0.1229488 #> 8 0.2861577 #> 9 0.4839205"},{"path":"http://sonsoles.me/tna/reference/print.group_tna_centralities.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Centrality Measures — print.group_tna_centralities","title":"Print Centrality Measures — print.group_tna_centralities","text":"Print Centrality Measures","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna_centralities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Centrality Measures — print.group_tna_centralities","text":"","code":"# S3 method for class 'group_tna_centralities' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.group_tna_centralities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Centrality Measures — print.group_tna_centralities","text":"x group_tna_centralities object. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna_centralities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Centrality Measures — print.group_tna_centralities","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.group_tna_centralities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Centrality Measures — print.group_tna_centralities","text":"","code":"model <- group_model(engagement_mmm) cm <- centralities(model) print(cm) #> # A tibble: 9 × 11 #>   group     state      OutStrength InStrength ClosenessIn ClosenessOut Closeness #> * <chr>     <fct>            <dbl>      <dbl>       <dbl>        <dbl>     <dbl> #> 1 Cluster 1 Active           0.294     0.847        1.44          1.63      1.63 #> 2 Cluster 1 Average          0.540     0.675        1.48          2.58      3.12 #> 3 Cluster 1 Disengaged       0.714     0.0268       2.88          1.4       2.88 #> 4 Cluster 2 Active           0.508     0.658        1.52          1.97      4.54 #> 5 Cluster 2 Average          0.414     1.02         0.985         2.42      4.10 #> 6 Cluster 2 Disengaged       0.907     0.155        6.47          1.10      6.47 #> 7 Cluster 3 Active           0.699     0.225        4.44          1.53      4.44 #> 8 Cluster 3 Average          0.427     1.08         0.968         2.44      2.60 #> 9 Cluster 3 Disengaged       0.537     0.359        2.93          1.86      3.44 #> # ℹ 4 more variables: Betweenness <dbl>, BetweennessRSP <dbl>, Diffusion <dbl>, #> #   Clustering <dbl>"},{"path":"http://sonsoles.me/tna/reference/print.group_tna_cliques.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Found Cliques — print.group_tna_cliques","title":"Print Found Cliques — print.group_tna_cliques","text":"Print Found Cliques","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna_cliques.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Found Cliques — print.group_tna_cliques","text":"","code":"# S3 method for class 'group_tna_cliques' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.group_tna_cliques.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Found Cliques — print.group_tna_cliques","text":"x group_tna_cliques object. ... Arguments passed print.tna_cliques().","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna_cliques.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Found Cliques — print.group_tna_cliques","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.group_tna_cliques.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Found Cliques — print.group_tna_cliques","text":"","code":"model <- group_model(engagement_mmm) cliq <- cliques(model, size = 2) print(cliq) #> Cluster 1 #>  #> Number of 2-cliques = 2 (weight threshold = 0) #> Showing 2 cliques starting from clique number 1 #>  #> Clique 1 #>              Average Disengaged #> Average    0.4598214 0.02678571 #> Disengaged 0.3809524 0.28571429 #>  #> Clique 2 #>            Active   Average #> Active  0.7061503 0.2938497 #> Average 0.5133929 0.4598214 #>  #> Cluster 2 #>  #> Number of 2-cliques = 3 (weight threshold = 0) #> Showing 3 cliques starting from clique number 1 #>  #> Clique 1 #>              Average Disengaged #> Average    0.5860735 0.08897485 #> Disengaged 0.5733333 0.09333333 #>  #> Clique 2 #>            Active   Average #> Active  0.4924242 0.4419192 #> Average 0.3249516 0.5860735 #>  #> Clique 3 #>               Active Disengaged #> Active     0.4924242 0.06565657 #> Disengaged 0.3333333 0.09333333 #>  #> Cluster 3 #>  #> Number of 2-cliques = 3 (weight threshold = 0) #> Showing 3 cliques starting from clique number 1 #>  #> Clique 1 #>              Average Disengaged #> Average    0.5731707  0.2674216 #> Disengaged 0.4707602  0.4634503 #>  #> Clique 2 #>            Active   Average #> Active  0.3006757 0.6081081 #> Average 0.1594077 0.5731707 #>  #> Clique 3 #>                Active Disengaged #> Active     0.30067568 0.09121622 #> Disengaged 0.06578947 0.46345029"},{"path":"http://sonsoles.me/tna/reference/print.group_tna_communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Detected Communities — print.group_tna_communities","title":"Print Detected Communities — print.group_tna_communities","text":"Print Detected Communities","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna_communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Detected Communities — print.group_tna_communities","text":"","code":"# S3 method for class 'group_tna_communities' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.group_tna_communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Detected Communities — print.group_tna_communities","text":"x group_tna_communities object. ... Arguments passed print.tna_communities().","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna_communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Detected Communities — print.group_tna_communities","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.group_tna_communities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Detected Communities — print.group_tna_communities","text":"","code":"model <- group_model(engagement_mmm) comm <- communities(model) print(comm) #> Cluster 1 #>  #> Number of communities found by each algorithm #>  #>         walktrap      fast_greedy       label_prop          infomap  #>                1                3                3                1  #> edge_betweenness    leading_eigen        spinglass  #>                3                2                1  #>  #> Community assignments #>  #>        state walktrap fast_greedy label_prop infomap edge_betweenness #> 1     Active        1           1          1       1                1 #> 2    Average        1           2          2       1                2 #> 3 Disengaged        1           3          3       1                3 #>   leading_eigen spinglass #> 1             1         1 #> 2             2         1 #> 3             2         1 #>  #> Cluster 2 #>  #> Number of communities found by each algorithm #>  #>         walktrap      fast_greedy       label_prop          infomap  #>                1                2                3                1  #> edge_betweenness    leading_eigen        spinglass  #>                2                2                1  #>  #> Community assignments #>  #>        state walktrap fast_greedy label_prop infomap edge_betweenness #> 1     Active        1           2          1       1                1 #> 2    Average        1           1          2       1                2 #> 3 Disengaged        1           1          3       1                2 #>   leading_eigen spinglass #> 1             1         1 #> 2             2         1 #> 3             2         1 #>  #> Cluster 3 #>  #> Number of communities found by each algorithm #>  #>         walktrap      fast_greedy       label_prop          infomap  #>                1                2                2                1  #> edge_betweenness    leading_eigen        spinglass  #>                3                2                1  #>  #> Community assignments #>  #>        state walktrap fast_greedy label_prop infomap edge_betweenness #> 1     Active        1           1          1       1                1 #> 2    Average        1           1          1       1                2 #> 3 Disengaged        1           2          2       1                3 #>   leading_eigen spinglass #> 1             1         1 #> 2             1         1 #> 3             2         1"},{"path":"http://sonsoles.me/tna/reference/print.group_tna_permutation.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Permutation Test Results — print.group_tna_permutation","title":"Print Permutation Test Results — print.group_tna_permutation","text":"Print Permutation Test Results","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna_permutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Permutation Test Results — print.group_tna_permutation","text":"","code":"# S3 method for class 'group_tna_permutation' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.group_tna_permutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Permutation Test Results — print.group_tna_permutation","text":"x group_tna_permutation object. ... Arguments passed print.tna_permutation().","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna_permutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Permutation Test Results — print.group_tna_permutation","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.group_tna_permutation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Permutation Test Results — print.group_tna_permutation","text":"","code":"model <- group_model(engagement_mmm) # Small number of iterations for CRAN perm <- permutation_test(model, iter = 20) print(perm) #> Cluster 1 vs. Cluster 2 #>  #> # A tibble: 9 × 4 #>   edge_name                diff_true effect_size p_value #>   <chr>                        <dbl>       <dbl>   <dbl> #> 1 Active -> Active            0.214         3.42  0.0476 #> 2 Average -> Active           0.188         4.56  0.0476 #> 3 Disengaged -> Active        0             0     1      #> 4 Active -> Average          -0.148        -2.58  0.0476 #> 5 Average -> Average         -0.126        -3.00  0.0476 #> 6 Disengaged -> Average      -0.192        -2.24  0.0476 #> 7 Active -> Disengaged       -0.0657       -5.82  0.0476 #> 8 Average -> Disengaged      -0.0622       -2.63  0.0476 #> 9 Disengaged -> Disengaged    0.192         2.78  0.0476 #>  #> Cluster 1 vs. Cluster 3 #>  #> # A tibble: 9 × 4 #>   edge_name                diff_true effect_size p_value #>   <chr>                        <dbl>       <dbl>   <dbl> #> 1 Active -> Active            0.405         6.15  0.0476 #> 2 Average -> Active           0.354         9.76  0.0476 #> 3 Disengaged -> Active        0.268        10.9   0.0476 #> 4 Active -> Average          -0.314        -4.71  0.0476 #> 5 Average -> Average         -0.113        -2.86  0.0476 #> 6 Disengaged -> Average      -0.0898       -2.55  0.0476 #> 7 Active -> Disengaged       -0.0912       -4.99  0.0476 #> 8 Average -> Disengaged      -0.241        -6.89  0.0476 #> 9 Disengaged -> Disengaged   -0.178        -4.62  0.0476 #>  #> Cluster 2 vs. Cluster 3 #>  #> # A tibble: 9 × 4 #>   edge_name                diff_true effect_size p_value #>   <chr>                        <dbl>       <dbl>   <dbl> #> 1 Active -> Active            0.192        3.26   0.0476 #> 2 Average -> Active           0.166        6.65   0.0476 #> 3 Disengaged -> Active        0.268       12.9    0.0476 #> 4 Active -> Average          -0.166       -2.72   0.0476 #> 5 Average -> Average          0.0129       0.457  0.714  #> 6 Disengaged -> Average       0.103        2.99   0.0476 #> 7 Active -> Disengaged       -0.0256      -1.08   0.381  #> 8 Average -> Disengaged      -0.178       -7.13   0.0476 #> 9 Disengaged -> Disengaged   -0.370      -10.2    0.0476"},{"path":"http://sonsoles.me/tna/reference/print.group_tna_stability.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Centrality Stability Results — print.group_tna_stability","title":"Print Centrality Stability Results — print.group_tna_stability","text":"Print Centrality Stability Results","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna_stability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Centrality Stability Results — print.group_tna_stability","text":"","code":"# S3 method for class 'group_tna_stability' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.group_tna_stability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Centrality Stability Results — print.group_tna_stability","text":"x group_tna_stability object. ... Arguments passed print.tna_stability().","code":""},{"path":"http://sonsoles.me/tna/reference/print.group_tna_stability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Centrality Stability Results — print.group_tna_stability","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.group_tna_stability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Centrality Stability Results — print.group_tna_stability","text":"","code":"model <- group_model(engagement_mmm) # Low number of iterations for CRAN stability <- estimate_cs(   model,   drop_prop = c(0.3, 0.5, 0.7, 0.9),   iter = 10 ) print(stability) #> Cluster 1 #>  #> Centrality Stability Coefficients #>  #>  InStrength OutStrength Betweenness  #>         0.7         0.7         0.3  #>  #> Cluster 2 #>  #> Centrality Stability Coefficients #>  #>  InStrength OutStrength  #>         0.9         0.9  #>  #> Cluster 3 #>  #> Centrality Stability Coefficients #>  #>  InStrength OutStrength Betweenness  #>         0.9         0.7         0.0"},{"path":"http://sonsoles.me/tna/reference/print.summary.group_tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a Summary of a Grouped Transition Network Analysis Model — print.summary.group_tna","title":"Print a Summary of a Grouped Transition Network Analysis Model — print.summary.group_tna","text":"Print Summary Grouped Transition Network Analysis Model","code":""},{"path":"http://sonsoles.me/tna/reference/print.summary.group_tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a Summary of a Grouped Transition Network Analysis Model — print.summary.group_tna","text":"","code":"# S3 method for class 'summary.group_tna' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.summary.group_tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a Summary of a Grouped Transition Network Analysis Model — print.summary.group_tna","text":"x summary.group_tna object. ... Arguments passed print.summary.tna().","code":""},{"path":"http://sonsoles.me/tna/reference/print.summary.group_tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a Summary of a Grouped Transition Network Analysis Model — print.summary.group_tna","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.summary.group_tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a Summary of a Grouped Transition Network Analysis Model — print.summary.group_tna","text":"","code":"model <- group_model(engagement_mmm) print(summary(model)) #> metric #>  #>  [1] \"Node Count\"                  \"Edge Count\"                  #>  [3] \"Network Density\"             \"Mean Distance\"               #>  [5] \"Mean Out-Strength\"           \"SD Out-Strength\"             #>  [7] \"Mean In-Strength\"            \"SD In-Strength\"              #>  [9] \"Mean Out-Degree\"             \"SD Out-Degree\"               #> [11] \"Centralization (Out-Degree)\" \"Centralization (In-Degree)\"  #> [13] \"Reciprocity\"                 #>  #> Cluster 1 #>  #>  [1] 3.000000e+00 8.000000e+00 1.000000e+00 2.859459e-01 1.000000e+00 #>  [6] 6.310516e-01 1.000000e+00 7.850462e-17 2.666667e+00 5.773503e-01 #> [11] 2.500000e-01 2.500000e-01 8.000000e-01 #>  #> Cluster 2 #>  #>  [1] 3.0000000 9.0000000 1.0000000 0.3046948 1.0000000 0.6891528 1.0000000 #>  [8] 0.0000000 3.0000000 0.0000000 0.0000000 0.0000000 1.0000000 #>  #> Cluster 3 #>  #>  [1] 3.0000000 9.0000000 1.0000000 0.2666290 1.0000000 0.5837826 1.0000000 #>  [8] 0.0000000 3.0000000 0.0000000 0.0000000 0.0000000 1.0000000"},{"path":"http://sonsoles.me/tna/reference/print.summary.group_tna_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a Bootstrap Summary for a Grouped Transition Network Model — print.summary.group_tna_bootstrap","title":"Print a Bootstrap Summary for a Grouped Transition Network Model — print.summary.group_tna_bootstrap","text":"Print Bootstrap Summary Grouped Transition Network Model","code":""},{"path":"http://sonsoles.me/tna/reference/print.summary.group_tna_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a Bootstrap Summary for a Grouped Transition Network Model — print.summary.group_tna_bootstrap","text":"","code":"# S3 method for class 'summary.group_tna_bootstrap' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.summary.group_tna_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a Bootstrap Summary for a Grouped Transition Network Model — print.summary.group_tna_bootstrap","text":"x summary.group_tna_bootstrap object. ... Arguments passed generic print method.","code":""},{"path":"http://sonsoles.me/tna/reference/print.summary.group_tna_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a Bootstrap Summary for a Grouped Transition Network Model — print.summary.group_tna_bootstrap","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.summary.group_tna_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a Bootstrap Summary for a Grouped Transition Network Model — print.summary.group_tna_bootstrap","text":"","code":"model <- group_model(engagement_mmm) # Low number of iteration for CRAN boot <- bootstrap(model, iter = 10) print(summary(boot)) #>        group       from         to     weight    p_value   sig   cr_lower #> 1  Cluster 1     Active     Active 0.70615034 0.09090909 FALSE 0.52961276 #> 2  Cluster 1    Average     Active 0.51339286 0.09090909 FALSE 0.38504464 #> 3  Cluster 1 Disengaged     Active 0.33333333 0.54545455 FALSE 0.25000000 #> 4  Cluster 1     Active    Average 0.29384966 0.09090909 FALSE 0.22038724 #> 5  Cluster 1    Average    Average 0.45982143 0.09090909 FALSE 0.34486607 #> 6  Cluster 1 Disengaged    Average 0.38095238 0.45454545 FALSE 0.28571429 #> 7  Cluster 1    Average Disengaged 0.02678571 0.45454545 FALSE 0.02008929 #> 8  Cluster 1 Disengaged Disengaged 0.28571429 0.18181818 FALSE 0.21428571 #> 9  Cluster 2     Active     Active 0.49242424 0.09090909 FALSE 0.36931818 #> 10 Cluster 2    Average     Active 0.32495164 0.09090909 FALSE 0.24371373 #> 11 Cluster 2 Disengaged     Active 0.33333333 0.27272727 FALSE 0.25000000 #> 12 Cluster 2     Active    Average 0.44191919 0.09090909 FALSE 0.33143939 #> 13 Cluster 2    Average    Average 0.58607350 0.09090909 FALSE 0.43955513 #> 14 Cluster 2 Disengaged    Average 0.57333333 0.09090909 FALSE 0.43000000 #> 15 Cluster 2     Active Disengaged 0.06565657 0.18181818 FALSE 0.04924242 #> 16 Cluster 2    Average Disengaged 0.08897485 0.18181818 FALSE 0.06673114 #> 17 Cluster 2 Disengaged Disengaged 0.09333333 0.45454545 FALSE 0.07000000 #> 18 Cluster 3     Active     Active 0.30067568 0.09090909 FALSE 0.22550676 #> 19 Cluster 3    Average     Active 0.15940767 0.09090909 FALSE 0.11955575 #> 20 Cluster 3 Disengaged     Active 0.06578947 0.18181818 FALSE 0.04934211 #> 21 Cluster 3     Active    Average 0.60810811 0.09090909 FALSE 0.45608108 #> 22 Cluster 3    Average    Average 0.57317073 0.09090909 FALSE 0.42987805 #> 23 Cluster 3 Disengaged    Average 0.47076023 0.09090909 FALSE 0.35307018 #> 24 Cluster 3     Active Disengaged 0.09121622 0.36363636 FALSE 0.06841216 #> 25 Cluster 3    Average Disengaged 0.26742160 0.09090909 FALSE 0.20056620 #> 26 Cluster 3 Disengaged Disengaged 0.46345029 0.09090909 FALSE 0.34758772 #>      cr_upper   ci_lower   ci_upper #> 1  0.88268793 0.65577284 0.73420892 #> 2  0.64174107 0.42957320 0.55608763 #> 3  0.41666667 0.18133433 0.50873162 #> 4  0.36731207 0.26579108 0.34422716 #> 5  0.57477679 0.42150810 0.53956460 #> 6  0.47619048 0.25735294 0.48174663 #> 7  0.03348214 0.01813063 0.03897993 #> 8  0.35714286 0.19825368 0.34456522 #> 9  0.61553030 0.44618902 0.52303076 #> 10 0.40618956 0.27545591 0.35544627 #> 11 0.41666667 0.25393169 0.41591667 #> 12 0.55239899 0.41794924 0.48150953 #> 13 0.73259188 0.54806318 0.63707999 #> 14 0.71666667 0.47566667 0.62478580 #> 15 0.08207071 0.04454751 0.07496891 #> 16 0.11121857 0.06535462 0.10528242 #> 17 0.11666667 0.03731725 0.13274248 #> 18 0.37584459 0.28188187 0.35207199 #> 19 0.19925958 0.13539516 0.16512909 #> 20 0.08223684 0.05815949 0.08303318 #> 21 0.76013514 0.55103057 0.64686907 #> 22 0.71646341 0.54053247 0.60579403 #> 23 0.58845029 0.44400159 0.48418443 #> 24 0.11402027 0.06464436 0.13318410 #> 25 0.33427700 0.24890285 0.29449793 #> 26 0.57931287 0.44559029 0.48793016"},{"path":"http://sonsoles.me/tna/reference/print.summary.tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a TNA Summary — print.summary.tna","title":"Print a TNA Summary — print.summary.tna","text":"Print TNA Summary","code":""},{"path":"http://sonsoles.me/tna/reference/print.summary.tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a TNA Summary — print.summary.tna","text":"","code":"# S3 method for class 'summary.tna' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.summary.tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a TNA Summary — print.summary.tna","text":"x summary.tna object. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/print.summary.tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a TNA Summary — print.summary.tna","text":"summary.tna object (invisibly) containing TNA model network metrics values.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.summary.tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a TNA Summary — print.summary.tna","text":"","code":"model <- tna(group_regulation) print(summary(model)) #> # A tibble: 13 × 2 #>    metric                         value #>  * <chr>                          <dbl> #>  1 Node Count                  9   e+ 0 #>  2 Edge Count                  7.8 e+ 1 #>  3 Network Density             1   e+ 0 #>  4 Mean Distance               4.72e- 2 #>  5 Mean Out-Strength           1   e+ 0 #>  6 SD Out-Strength             8.07e- 1 #>  7 Mean In-Strength            1   e+ 0 #>  8 SD In-Strength              6.80e-17 #>  9 Mean Out-Degree             8.67e+ 0 #> 10 SD Out-Degree               7.07e- 1 #> 11 Centralization (Out-Degree) 1.56e- 2 #> 12 Centralization (In-Degree)  1.56e- 2 #> 13 Reciprocity                 9.86e- 1"},{"path":"http://sonsoles.me/tna/reference/print.summary.tna_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a Bootstrap Summary — print.summary.tna_bootstrap","title":"Print a Bootstrap Summary — print.summary.tna_bootstrap","text":"Print Bootstrap Summary","code":""},{"path":"http://sonsoles.me/tna/reference/print.summary.tna_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a Bootstrap Summary — print.summary.tna_bootstrap","text":"","code":"# S3 method for class 'summary.tna_bootstrap' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.summary.tna_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a Bootstrap Summary — print.summary.tna_bootstrap","text":"x summary.tna_bootstrap object. ... Arguments passed generic print method.","code":""},{"path":"http://sonsoles.me/tna/reference/print.summary.tna_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a Bootstrap Summary — print.summary.tna_bootstrap","text":"summary.tna_bootstrap object (invisibly) containing weight, estimated p-value confidence interval edge.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.summary.tna_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a Bootstrap Summary — print.summary.tna_bootstrap","text":"","code":"model <- tna(group_regulation) # Small number of iterations for CRAN boot <- bootstrap(model, iter = 10) print(summary(boot)) #>          from         to       weight    p_value   sig     cr_lower    cr_upper #> 2    cohesion      adapt 0.0029498525 0.72727273 FALSE 0.0022123894 0.003687316 #> 3   consensus      adapt 0.0047400853 0.18181818 FALSE 0.0035550640 0.005925107 #> 4  coregulate      adapt 0.0162436548 0.18181818 FALSE 0.0121827411 0.020304569 #> 5     discuss      adapt 0.0713743356 0.09090909 FALSE 0.0535307517 0.089217920 #> 6     emotion      adapt 0.0024673951 0.72727273 FALSE 0.0018505464 0.003084244 #> 7     monitor      adapt 0.0111653873 0.45454545 FALSE 0.0083740405 0.013956734 #> 8        plan      adapt 0.0009745006 0.54545455 FALSE 0.0007308754 0.001218126 #> 9   synthesis      adapt 0.2346625767 0.09090909 FALSE 0.1759969325 0.293328221 #> 10      adapt   cohesion 0.2730844794 0.09090909 FALSE 0.2048133595 0.341355599 #> 11   cohesion   cohesion 0.0271386431 0.27272727 FALSE 0.0203539823 0.033923304 #> 12  consensus   cohesion 0.0148522673 0.09090909 FALSE 0.0111392005 0.018565334 #> 13 coregulate   cohesion 0.0360406091 0.18181818 FALSE 0.0270304569 0.045050761 #> 14    discuss   cohesion 0.0475828904 0.09090909 FALSE 0.0356871678 0.059478613 #> 15    emotion   cohesion 0.3253436729 0.09090909 FALSE 0.2440077547 0.406679591 #> 16    monitor   cohesion 0.0558269365 0.18181818 FALSE 0.0418702024 0.069783671 #> 17       plan   cohesion 0.0251745980 0.09090909 FALSE 0.0188809485 0.031468248 #> 18  synthesis   cohesion 0.0337423313 0.18181818 FALSE 0.0253067485 0.042177914 #> 19      adapt  consensus 0.4774066798 0.09090909 FALSE 0.3580550098 0.596758350 #> 20   cohesion  consensus 0.4979351032 0.09090909 FALSE 0.3734513274 0.622418879 #> 21  consensus  consensus 0.0820034761 0.09090909 FALSE 0.0615026070 0.102504345 #> 22 coregulate  consensus 0.1345177665 0.09090909 FALSE 0.1008883249 0.168147208 #> 23    discuss  consensus 0.3211845103 0.09090909 FALSE 0.2408883827 0.401480638 #> 24    emotion  consensus 0.3204088826 0.09090909 FALSE 0.2403066620 0.400511103 #> 25    monitor  consensus 0.1591067690 0.09090909 FALSE 0.1193300768 0.198883461 #> 26       plan  consensus 0.2904011694 0.09090909 FALSE 0.2178008771 0.363001462 #> 27  synthesis  consensus 0.4662576687 0.09090909 FALSE 0.3496932515 0.582822086 #> 28      adapt coregulate 0.0216110020 0.18181818 FALSE 0.0162082515 0.027013752 #> 29   cohesion coregulate 0.1191740413 0.09090909 FALSE 0.0893805310 0.148967552 #> 30  consensus coregulate 0.1877073787 0.09090909 FALSE 0.1407805340 0.234634223 #> 31 coregulate coregulate 0.0233502538 0.09090909 FALSE 0.0175126904 0.029187817 #> 32    discuss coregulate 0.0842824601 0.09090909 FALSE 0.0632118451 0.105353075 #> 33    emotion coregulate 0.0341910469 0.09090909 FALSE 0.0256432852 0.042738809 #> 34    monitor coregulate 0.0579204466 0.09090909 FALSE 0.0434403350 0.072400558 #> 35       plan coregulate 0.0172161767 0.09090909 FALSE 0.0129121325 0.021520221 #> 36  synthesis coregulate 0.0444785276 0.45454545 FALSE 0.0333588957 0.055598160 #> 37      adapt    discuss 0.0589390963 0.36363636 FALSE 0.0442043222 0.073673870 #> 38   cohesion    discuss 0.0595870206 0.09090909 FALSE 0.0446902655 0.074483776 #> 39  consensus    discuss 0.1880233844 0.09090909 FALSE 0.1410175383 0.235029231 #> 40 coregulate    discuss 0.2736040609 0.09090909 FALSE 0.2052030457 0.342005076 #> 41    discuss    discuss 0.1948873703 0.09090909 FALSE 0.1461655277 0.243609213 #> 42    emotion    discuss 0.1018681706 0.09090909 FALSE 0.0764011280 0.127335213 #> 43    monitor    discuss 0.3754361479 0.09090909 FALSE 0.2815771110 0.469295185 #> 44       plan    discuss 0.0678902063 0.09090909 FALSE 0.0509176547 0.084862758 #> 45  synthesis    discuss 0.0628834356 0.09090909 FALSE 0.0471625767 0.078604294 #> 46      adapt    emotion 0.1198428291 0.09090909 FALSE 0.0898821218 0.149803536 #> 47   cohesion    emotion 0.1156342183 0.09090909 FALSE 0.0867256637 0.144542773 #> 48  consensus    emotion 0.0726813083 0.09090909 FALSE 0.0545109812 0.090851635 #> 49 coregulate    emotion 0.1720812183 0.09090909 FALSE 0.1290609137 0.215101523 #> 50    discuss    emotion 0.1057960010 0.09090909 FALSE 0.0793470008 0.132245001 #> 51    emotion    emotion 0.0768417342 0.09090909 FALSE 0.0576313007 0.096052168 #> 52    monitor    emotion 0.0907187718 0.09090909 FALSE 0.0680390789 0.113398465 #> 53       plan    emotion 0.1468247523 0.09090909 FALSE 0.1101185642 0.183530940 #> 54  synthesis    emotion 0.0705521472 0.09090909 FALSE 0.0529141104 0.088190184 #> 55      adapt    monitor 0.0333988212 0.18181818 FALSE 0.0250491159 0.041748527 #> 56   cohesion    monitor 0.0330383481 0.18181818 FALSE 0.0247787611 0.041297935 #> 57  consensus    monitor 0.0466108390 0.09090909 FALSE 0.0349581292 0.058263549 #> 58 coregulate    monitor 0.0862944162 0.09090909 FALSE 0.0647208122 0.107868020 #> 59    discuss    monitor 0.0222728423 0.09090909 FALSE 0.0167046317 0.027841053 #> 60    emotion    monitor 0.0363059570 0.09090909 FALSE 0.0272294677 0.045382446 #> 61    monitor    monitor 0.0181437544 0.27272727 FALSE 0.0136078158 0.022679693 #> 62       plan    monitor 0.0755237941 0.09090909 FALSE 0.0566428455 0.094404743 #> 63  synthesis    monitor 0.0122699387 0.54545455 FALSE 0.0092024540 0.015337423 #> 64      adapt       plan 0.0157170923 0.54545455 FALSE 0.0117878193 0.019646365 #> 65   cohesion       plan 0.1410029499 0.09090909 FALSE 0.1057522124 0.176253687 #> 66  consensus       plan 0.3957971243 0.09090909 FALSE 0.2968478433 0.494746405 #> 67 coregulate       plan 0.2390862944 0.09090909 FALSE 0.1793147208 0.298857868 #> 68    discuss       plan 0.0116426221 0.09090909 FALSE 0.0087319666 0.014553278 #> 69    emotion       plan 0.0997532605 0.09090909 FALSE 0.0748149454 0.124691576 #> 70    monitor       plan 0.2156315422 0.09090909 FALSE 0.1617236567 0.269539428 #> 71       plan       plan 0.3742082183 0.09090909 FALSE 0.2806561637 0.467760273 #> 72  synthesis       plan 0.0751533742 0.09090909 FALSE 0.0563650307 0.093941718 #> 74   cohesion  synthesis 0.0035398230 0.72727273 FALSE 0.0026548673 0.004424779 #> 75  consensus  synthesis 0.0075841365 0.18181818 FALSE 0.0056881024 0.009480171 #> 76 coregulate  synthesis 0.0187817259 0.09090909 FALSE 0.0140862944 0.023477157 #> 77    discuss  synthesis 0.1409769679 0.09090909 FALSE 0.1057327259 0.176221210 #> 78    emotion  synthesis 0.0028198802 0.45454545 FALSE 0.0021149101 0.003524850 #> 79    monitor  synthesis 0.0160502442 0.27272727 FALSE 0.0120376832 0.020062805 #> 80       plan  synthesis 0.0017865844 0.72727273 FALSE 0.0013399383 0.002233230 #>        ci_lower    ci_upper #> 2  0.0011705358 0.006807674 #> 3  0.0040094383 0.005991083 #> 4  0.0119980755 0.018725046 #> 5  0.0665219034 0.078751066 #> 6  0.0007705014 0.003791786 #> 7  0.0090848719 0.016002183 #> 8  0.0004810776 0.001584256 #> 9  0.2193515981 0.253838724 #> 10 0.2277178496 0.288511708 #> 11 0.0178998026 0.031118750 #> 12 0.0133069953 0.017966625 #> 13 0.0312092354 0.044218066 #> 14 0.0404180379 0.050178231 #> 15 0.3150721746 0.342191610 #> 16 0.0438799521 0.065893684 #> 17 0.0222506938 0.029107764 #> 18 0.0309141468 0.045431055 #> 19 0.4604606959 0.528227942 #> 20 0.4835298097 0.509902108 #> 21 0.0768344236 0.085821530 #> 22 0.1264343837 0.140369148 #> 23 0.3133198745 0.337714130 #> 24 0.3108177646 0.338650985 #> 25 0.1494365133 0.163007213 #> 26 0.2828095523 0.297674219 #> 27 0.4328452144 0.483439351 #> 28 0.0138895766 0.025891357 #> 29 0.1095212489 0.124844945 #> 30 0.1793308128 0.194314895 #> 31 0.0182133708 0.025429989 #> 32 0.0795116337 0.089653650 #> 33 0.0305855139 0.037220303 #> 34 0.0524828832 0.062637419 #> 35 0.0154007413 0.019599746 #> 36 0.0319793757 0.061303058 #> 37 0.0422111096 0.074585143 #> 38 0.0528074834 0.067917466 #> 39 0.1811386249 0.198022136 #> 40 0.2634893103 0.292312703 #> 41 0.1884618383 0.203994004 #> 42 0.0896047664 0.112421048 #> 43 0.3568992614 0.392264347 #> 44 0.0663617491 0.076682707 #> 45 0.0564876049 0.078416388 #> 46 0.1077675047 0.136431267 #> 47 0.1076394628 0.130071154 #> 48 0.0665883871 0.076098971 #> 49 0.1540081484 0.180108722 #> 50 0.0985040738 0.108824987 #> 51 0.0686988982 0.087649937 #> 52 0.0814134869 0.095714005 #> 53 0.1369260904 0.152536617 #> 54 0.0548326939 0.082699275 #> 55 0.0269313907 0.042592846 #> 56 0.0249384172 0.036317562 #> 57 0.0400137644 0.049764357 #> 58 0.0764724790 0.088765510 #> 59 0.0192606956 0.024380166 #> 60 0.0304366544 0.041301514 #> 61 0.0111915739 0.020934870 #> 62 0.0713590834 0.078237800 #> 63 0.0066223833 0.016045969 #> 64 0.0037670367 0.023745883 #> 65 0.1284565841 0.153463010 #> 66 0.3919416114 0.405656186 #> 67 0.2291802400 0.262085714 #> 68 0.0096307393 0.013566194 #> 69 0.0928808184 0.104620961 #> 70 0.1977243172 0.237560483 #> 71 0.3676586660 0.381016382 #> 72 0.0644579462 0.088447159 #> 74 0.0014657693 0.004742146 #> 75 0.0062462334 0.009779984 #> 76 0.0154384800 0.022553516 #> 77 0.1313090404 0.149696373 #> 78 0.0020647625 0.004389794 #> 79 0.0090209098 0.019650784 #> 80 0.0006671708 0.002887661"},{"path":"http://sonsoles.me/tna/reference/print.tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a tna Object — print.tna","title":"Print a tna Object — print.tna","text":"Print tna Object","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a tna Object — print.tna","text":"","code":"# S3 method for class 'tna' print(x, digits = getOption(\"digits\"), generic = FALSE, ...)"},{"path":"http://sonsoles.me/tna/reference/print.tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a tna Object — print.tna","text":"x tna object. digits integer giving number significant digits print. generic logical value. TRUE, use generic print method instead. Defaults FALSE. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a tna Object — print.tna","text":"tna object passed argument x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a tna Object — print.tna","text":"","code":"model <- tna(group_regulation) print(model) #> State Labels #>  #> adapt, cohesion, consensus, coregulate, discuss, emotion, monitor, plan, synthesis  #>  #> Transition Probability Matrix #>  #>                   adapt   cohesion  consensus coregulate    discuss    emotion #> adapt      0.0000000000 0.27308448 0.47740668 0.02161100 0.05893910 0.11984283 #> cohesion   0.0029498525 0.02713864 0.49793510 0.11917404 0.05958702 0.11563422 #> consensus  0.0047400853 0.01485227 0.08200348 0.18770738 0.18802338 0.07268131 #> coregulate 0.0162436548 0.03604061 0.13451777 0.02335025 0.27360406 0.17208122 #> discuss    0.0713743356 0.04758289 0.32118451 0.08428246 0.19488737 0.10579600 #> emotion    0.0024673951 0.32534367 0.32040888 0.03419105 0.10186817 0.07684173 #> monitor    0.0111653873 0.05582694 0.15910677 0.05792045 0.37543615 0.09071877 #> plan       0.0009745006 0.02517460 0.29040117 0.01721618 0.06789021 0.14682475 #> synthesis  0.2346625767 0.03374233 0.46625767 0.04447853 0.06288344 0.07055215 #>               monitor       plan   synthesis #> adapt      0.03339882 0.01571709 0.000000000 #> cohesion   0.03303835 0.14100295 0.003539823 #> consensus  0.04661084 0.39579712 0.007584137 #> coregulate 0.08629442 0.23908629 0.018781726 #> discuss    0.02227284 0.01164262 0.140976968 #> emotion    0.03630596 0.09975326 0.002819880 #> monitor    0.01814375 0.21563154 0.016050244 #> plan       0.07552379 0.37420822 0.001786584 #> synthesis  0.01226994 0.07515337 0.000000000 #>  #> Initial Probabilities #>  #>      adapt   cohesion  consensus coregulate    discuss    emotion    monitor  #>     0.0115     0.0605     0.2140     0.0190     0.1755     0.1515     0.1440  #>       plan  synthesis  #>     0.2045     0.0195"},{"path":"http://sonsoles.me/tna/reference/print.tna_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Bootstrap Results — print.tna_bootstrap","title":"Print Bootstrap Results — print.tna_bootstrap","text":"Print Bootstrap Results","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Bootstrap Results — print.tna_bootstrap","text":"","code":"# S3 method for class 'tna_bootstrap' print(x, digits = getOption(\"digits\"), type = \"both\", ...)"},{"path":"http://sonsoles.me/tna/reference/print.tna_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Bootstrap Results — print.tna_bootstrap","text":"x tna_bootstrap object. digits integer giving minimal number significant digits print. type character vector giving type edges print. default option \"\" prints statistically significant non-significant edges, \"sig\" prints significant edges, \"nonsig\" prints non-significant edges. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Bootstrap Results — print.tna_bootstrap","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.tna_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Bootstrap Results — print.tna_bootstrap","text":"","code":"model <- tna(group_regulation) # Small number of iterations for CRAN boot <- bootstrap(model, iter = 10) print(boot) #> Non-significant Edges #>  #>          from         to       weight    p_value     cr_lower    cr_upper #> 2    cohesion      adapt 0.0029498525 0.90909091 0.0022123894 0.003687316 #> 3   consensus      adapt 0.0047400853 0.18181818 0.0035550640 0.005925107 #> 4  coregulate      adapt 0.0162436548 0.18181818 0.0121827411 0.020304569 #> 5     discuss      adapt 0.0713743356 0.09090909 0.0535307517 0.089217920 #> 6     emotion      adapt 0.0024673951 0.54545455 0.0018505464 0.003084244 #> 7     monitor      adapt 0.0111653873 0.36363636 0.0083740405 0.013956734 #> 8        plan      adapt 0.0009745006 0.81818182 0.0007308754 0.001218126 #> 9   synthesis      adapt 0.2346625767 0.09090909 0.1759969325 0.293328221 #> 10      adapt   cohesion 0.2730844794 0.09090909 0.2048133595 0.341355599 #> 11   cohesion   cohesion 0.0271386431 0.18181818 0.0203539823 0.033923304 #> 12  consensus   cohesion 0.0148522673 0.09090909 0.0111392005 0.018565334 #> 13 coregulate   cohesion 0.0360406091 0.18181818 0.0270304569 0.045050761 #> 14    discuss   cohesion 0.0475828904 0.09090909 0.0356871678 0.059478613 #> 15    emotion   cohesion 0.3253436729 0.09090909 0.2440077547 0.406679591 #> 16    monitor   cohesion 0.0558269365 0.09090909 0.0418702024 0.069783671 #> 17       plan   cohesion 0.0251745980 0.09090909 0.0188809485 0.031468248 #> 18  synthesis   cohesion 0.0337423313 0.36363636 0.0253067485 0.042177914 #> 19      adapt  consensus 0.4774066798 0.09090909 0.3580550098 0.596758350 #> 20   cohesion  consensus 0.4979351032 0.09090909 0.3734513274 0.622418879 #> 21  consensus  consensus 0.0820034761 0.09090909 0.0615026070 0.102504345 #> 22 coregulate  consensus 0.1345177665 0.09090909 0.1008883249 0.168147208 #> 23    discuss  consensus 0.3211845103 0.09090909 0.2408883827 0.401480638 #> 24    emotion  consensus 0.3204088826 0.09090909 0.2403066620 0.400511103 #> 25    monitor  consensus 0.1591067690 0.09090909 0.1193300768 0.198883461 #> 26       plan  consensus 0.2904011694 0.09090909 0.2178008771 0.363001462 #> 27  synthesis  consensus 0.4662576687 0.09090909 0.3496932515 0.582822086 #> 28      adapt coregulate 0.0216110020 0.45454545 0.0162082515 0.027013752 #> 29   cohesion coregulate 0.1191740413 0.09090909 0.0893805310 0.148967552 #> 30  consensus coregulate 0.1877073787 0.09090909 0.1407805340 0.234634223 #> 31 coregulate coregulate 0.0233502538 0.09090909 0.0175126904 0.029187817 #> 32    discuss coregulate 0.0842824601 0.09090909 0.0632118451 0.105353075 #> 33    emotion coregulate 0.0341910469 0.18181818 0.0256432852 0.042738809 #> 34    monitor coregulate 0.0579204466 0.09090909 0.0434403350 0.072400558 #> 35       plan coregulate 0.0172161767 0.09090909 0.0129121325 0.021520221 #> 36  synthesis coregulate 0.0444785276 0.54545455 0.0333588957 0.055598160 #> 37      adapt    discuss 0.0589390963 0.18181818 0.0442043222 0.073673870 #> 38   cohesion    discuss 0.0595870206 0.09090909 0.0446902655 0.074483776 #> 39  consensus    discuss 0.1880233844 0.09090909 0.1410175383 0.235029231 #> 40 coregulate    discuss 0.2736040609 0.09090909 0.2052030457 0.342005076 #> 41    discuss    discuss 0.1948873703 0.09090909 0.1461655277 0.243609213 #> 42    emotion    discuss 0.1018681706 0.09090909 0.0764011280 0.127335213 #> 43    monitor    discuss 0.3754361479 0.09090909 0.2815771110 0.469295185 #> 44       plan    discuss 0.0678902063 0.09090909 0.0509176547 0.084862758 #> 45  synthesis    discuss 0.0628834356 0.09090909 0.0471625767 0.078604294 #> 46      adapt    emotion 0.1198428291 0.09090909 0.0898821218 0.149803536 #> 47   cohesion    emotion 0.1156342183 0.09090909 0.0867256637 0.144542773 #> 48  consensus    emotion 0.0726813083 0.09090909 0.0545109812 0.090851635 #> 49 coregulate    emotion 0.1720812183 0.09090909 0.1290609137 0.215101523 #> 50    discuss    emotion 0.1057960010 0.09090909 0.0793470008 0.132245001 #> 51    emotion    emotion 0.0768417342 0.09090909 0.0576313007 0.096052168 #> 52    monitor    emotion 0.0907187718 0.09090909 0.0680390789 0.113398465 #> 53       plan    emotion 0.1468247523 0.09090909 0.1101185642 0.183530940 #> 54  synthesis    emotion 0.0705521472 0.36363636 0.0529141104 0.088190184 #> 55      adapt    monitor 0.0333988212 0.36363636 0.0250491159 0.041748527 #> 56   cohesion    monitor 0.0330383481 0.09090909 0.0247787611 0.041297935 #> 57  consensus    monitor 0.0466108390 0.09090909 0.0349581292 0.058263549 #> 58 coregulate    monitor 0.0862944162 0.09090909 0.0647208122 0.107868020 #> 59    discuss    monitor 0.0222728423 0.09090909 0.0167046317 0.027841053 #> 60    emotion    monitor 0.0363059570 0.09090909 0.0272294677 0.045382446 #> 61    monitor    monitor 0.0181437544 0.27272727 0.0136078158 0.022679693 #> 62       plan    monitor 0.0755237941 0.09090909 0.0566428455 0.094404743 #> 63  synthesis    monitor 0.0122699387 0.45454545 0.0092024540 0.015337423 #> 64      adapt       plan 0.0157170923 0.54545455 0.0117878193 0.019646365 #> 65   cohesion       plan 0.1410029499 0.09090909 0.1057522124 0.176253687 #> 66  consensus       plan 0.3957971243 0.09090909 0.2968478433 0.494746405 #> 67 coregulate       plan 0.2390862944 0.09090909 0.1793147208 0.298857868 #> 68    discuss       plan 0.0116426221 0.18181818 0.0087319666 0.014553278 #> 69    emotion       plan 0.0997532605 0.09090909 0.0748149454 0.124691576 #> 70    monitor       plan 0.2156315422 0.09090909 0.1617236567 0.269539428 #> 71       plan       plan 0.3742082183 0.09090909 0.2806561637 0.467760273 #> 72  synthesis       plan 0.0751533742 0.18181818 0.0563650307 0.093941718 #> 74   cohesion  synthesis 0.0035398230 0.45454545 0.0026548673 0.004424779 #> 75  consensus  synthesis 0.0075841365 0.18181818 0.0056881024 0.009480171 #> 76 coregulate  synthesis 0.0187817259 0.09090909 0.0140862944 0.023477157 #> 77    discuss  synthesis 0.1409769679 0.09090909 0.1057327259 0.176221210 #> 78    emotion  synthesis 0.0028198802 0.45454545 0.0021149101 0.003524850 #> 79    monitor  synthesis 0.0160502442 0.45454545 0.0120376832 0.020062805 #> 80       plan  synthesis 0.0017865844 0.54545455 0.0013399383 0.002233230 #>        ci_lower    ci_upper #> 2  0.0012692338 0.005239399 #> 3  0.0035804798 0.005759117 #> 4  0.0118723837 0.018110411 #> 5  0.0683067810 0.078900893 #> 6  0.0011499812 0.004007625 #> 7  0.0096492641 0.015754537 #> 8  0.0005154118 0.001889298 #> 9  0.2041988255 0.267441462 #> 10 0.2433929256 0.295652446 #> 11 0.0199629016 0.030416207 #> 12 0.0127164243 0.015907076 #> 13 0.0290813933 0.044406271 #> 14 0.0384015948 0.055786692 #> 15 0.3119807919 0.347650225 #> 16 0.0462436329 0.065111163 #> 17 0.0242486054 0.028394660 #> 18 0.0196939176 0.046889342 #> 19 0.4405103788 0.516014397 #> 20 0.4784818518 0.516946974 #> 21 0.0786400159 0.087656940 #> 22 0.1287665083 0.151972428 #> 23 0.3140705879 0.331407855 #> 24 0.3048084921 0.327104368 #> 25 0.1474911020 0.180219231 #> 26 0.2852038994 0.296333476 #> 27 0.4300007469 0.491712262 #> 28 0.0122565852 0.036767829 #> 29 0.1105246665 0.140428103 #> 30 0.1819978223 0.194817850 #> 31 0.0186440340 0.027394402 #> 32 0.0766249434 0.090285668 #> 33 0.0296571359 0.041949178 #> 34 0.0518582862 0.069051927 #> 35 0.0139587524 0.019188633 #> 36 0.0304098899 0.066081311 #> 37 0.0374483322 0.073057412 #> 38 0.0522399884 0.065911517 #> 39 0.1835938109 0.200736890 #> 40 0.2577834761 0.285630343 #> 41 0.1855884705 0.197383140 #> 42 0.0930482814 0.112354186 #> 43 0.3573868230 0.380227895 #> 44 0.0621613379 0.070069248 #> 45 0.0528174125 0.074845892 #> 46 0.1058859789 0.136553277 #> 47 0.1030559846 0.126957637 #> 48 0.0691407056 0.076774779 #> 49 0.1552124722 0.180293565 #> 50 0.1012828198 0.111305802 #> 51 0.0670407328 0.085126106 #> 52 0.0822287018 0.105862094 #> 53 0.1407199426 0.151506086 #> 54 0.0509878553 0.094123251 #> 55 0.0216134322 0.042522622 #> 56 0.0282787872 0.038488584 #> 57 0.0422130898 0.046470438 #> 58 0.0775635345 0.096382138 #> 59 0.0181582728 0.026432049 #> 60 0.0321472939 0.041964447 #> 61 0.0132704545 0.025518705 #> 62 0.0698986370 0.081761547 #> 63 0.0105804970 0.022475055 #> 64 0.0059877736 0.020140290 #> 65 0.1232763341 0.159624629 #> 66 0.3860358870 0.407697795 #> 67 0.2278044724 0.262698594 #> 68 0.0093940970 0.015076678 #> 69 0.0918049956 0.107339690 #> 70 0.2040056724 0.232506445 #> 71 0.3656674200 0.383393349 #> 72 0.0558387870 0.083058381 #> 74 0.0017917836 0.004567215 #> 75 0.0064814016 0.009412335 #> 76 0.0146313434 0.022614056 #> 77 0.1317170112 0.150068443 #> 78 0.0014910385 0.004142330 #> 79 0.0104294340 0.020123316 #> 80 0.0010386212 0.002635165"},{"path":"http://sonsoles.me/tna/reference/print.tna_centralities.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Centrality Measures — print.tna_centralities","title":"Print Centrality Measures — print.tna_centralities","text":"Print Centrality Measures","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_centralities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Centrality Measures — print.tna_centralities","text":"","code":"# S3 method for class 'tna_centralities' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.tna_centralities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Centrality Measures — print.tna_centralities","text":"x centralities object. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_centralities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Centrality Measures — print.tna_centralities","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.tna_centralities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Centrality Measures — print.tna_centralities","text":"","code":"model <- tna(group_regulation) cm <- centralities(model) print(cm) #> # A tibble: 9 × 10 #>   state    OutStrength InStrength ClosenessIn ClosenessOut Closeness Betweenness #> * <fct>          <dbl>      <dbl>       <dbl>        <dbl>     <dbl>       <dbl> #> 1 adapt          1          0.345      13.4           2.33     18.5           17 #> 2 cohesion       0.973      0.812       3.65          2.79     13.8            0 #> 3 consens…       0.918      2.67        0.798         4.34     11.5            0 #> 4 coregul…       0.977      0.567       4.55          2.31      5.97           5 #> 5 discuss        0.805      1.19        1.95          2.68      7.31           0 #> 6 emotion        0.923      0.894       1.57          3.13     14.5            0 #> 7 monitor        0.982      0.346       6.24          2.21      7.76           3 #> 8 plan           0.626      1.19        5.47          2.91     17.6           10 #> 9 synthes…       1          0.192      12.3           2.18     15.9           14 #> # ℹ 3 more variables: BetweennessRSP <dbl>, Diffusion <dbl>, Clustering <dbl>"},{"path":"http://sonsoles.me/tna/reference/print.tna_cliques.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Found Cliques of a TNA Network — print.tna_cliques","title":"Print Found Cliques of a TNA Network — print.tna_cliques","text":"Print Found Cliques TNA Network","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_cliques.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Found Cliques of a TNA Network — print.tna_cliques","text":"","code":"# S3 method for class 'tna_cliques' print(x, n = 6, first = 1, digits = getOption(\"digits\"), ...)"},{"path":"http://sonsoles.me/tna/reference/print.tna_cliques.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Found Cliques of a TNA Network — print.tna_cliques","text":"x tna_cliques object. n integer defining maximum number cliques show. defaults 6. first integer giving index first clique show. default index 1. digits integer giving minimal number significant digits print. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_cliques.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Found Cliques of a TNA Network — print.tna_cliques","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.tna_cliques.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Found Cliques of a TNA Network — print.tna_cliques","text":"","code":"model <- tna(group_regulation) cliq <- cliques(model, size = 2) print(cliq) #> Number of 2-cliques = 35 (weight threshold = 0) #> Showing 6 cliques starting from clique number 1 #>  #> Clique 1 #>            monitor      plan #> monitor 0.01814375 0.2156315 #> plan    0.07552379 0.3742082 #>  #> Clique 2 #>            emotion    monitor #> emotion 0.07684173 0.03630596 #> monitor 0.09071877 0.01814375 #>  #> Clique 3 #>            emotion       plan #> emotion 0.07684173 0.09975326 #> plan    0.14682475 0.37420822 #>  #> Clique 4 #>           discuss    emotion #> discuss 0.1948874 0.10579600 #> emotion 0.1018682 0.07684173 #>  #> Clique 5 #>           discuss    monitor #> discuss 0.1948874 0.02227284 #> monitor 0.3754361 0.01814375 #>  #> Clique 6 #>            discuss       plan #> discuss 0.19488737 0.01164262 #> plan    0.06789021 0.37420822"},{"path":"http://sonsoles.me/tna/reference/print.tna_communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Detected Communities — print.tna_communities","title":"Print Detected Communities — print.tna_communities","text":"Print Detected Communities","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Detected Communities — print.tna_communities","text":"","code":"# S3 method for class 'tna_communities' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.tna_communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Detected Communities — print.tna_communities","text":"x tna_communities object. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Detected Communities — print.tna_communities","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.tna_communities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Detected Communities — print.tna_communities","text":"","code":"model <- tna(group_regulation) comm <- communities(model) print(comm) #> Number of communities found by each algorithm #>  #>         walktrap      fast_greedy       label_prop          infomap  #>                1                3                1                1  #> edge_betweenness    leading_eigen        spinglass  #>                1                3                2  #>  #> Community assignments #>  #>        state walktrap fast_greedy label_prop infomap edge_betweenness #> 1      adapt        1           1          1       1                1 #> 2   cohesion        1           1          1       1                1 #> 3  consensus        1           1          1       1                1 #> 4 coregulate        1           2          1       1                1 #> 5    discuss        1           2          1       1                1 #> 6    emotion        1           1          1       1                1 #> 7    monitor        1           2          1       1                1 #> 8       plan        1           3          1       1                1 #> 9  synthesis        1           1          1       1                1 #>   leading_eigen spinglass #> 1             1         1 #> 2             1         1 #> 3             2         1 #> 4             3         2 #> 5             3         2 #> 6             1         1 #> 7             2         2 #> 8             2         1 #> 9             3         1"},{"path":"http://sonsoles.me/tna/reference/print.tna_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Comparison Results — print.tna_comparison","title":"Print Comparison Results — print.tna_comparison","text":"Print Comparison Results","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Comparison Results — print.tna_comparison","text":"","code":"# S3 method for class 'tna_comparison' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.tna_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Comparison Results — print.tna_comparison","text":"x tna_comparison object. ... Additional arguments passed tibble print method.","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Comparison Results — print.tna_comparison","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.tna_comparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Comparison Results — print.tna_comparison","text":"","code":"model_x <- tna(group_regulation[1:200, ]) model_y <- tna(group_regulation[1001:1200, ]) comp <- compare(model_x, model_y) print(comp) #> Edge difference metrics #> # A tibble: 81 × 16 #>    source     target   weight_x weight_y raw_difference absolute_difference #>    <fct>      <fct>       <dbl>    <dbl>          <dbl>               <dbl> #>  1 adapt      adapt     0        0             0                   0        #>  2 cohesion   adapt     0.00541  0             0.00541             0.00541  #>  3 consensus  adapt     0.00435  0.00503      -0.000679            0.000679 #>  4 coregulate adapt     0.0252   0.0175        0.00769             0.00769  #>  5 discuss    adapt     0.0103   0.140        -0.130               0.130    #>  6 emotion    adapt     0.0101   0             0.0101              0.0101   #>  7 monitor    adapt     0.00794  0.0127       -0.00480             0.00480  #>  8 plan       adapt     0.00339  0             0.00339             0.00339  #>  9 synthesis  adapt     0.175    0.333        -0.159               0.159    #> 10 adapt      cohesion  0.2      0.291        -0.0907              0.0907   #> # ℹ 71 more rows #> # ℹ 10 more variables: squared_difference <dbl>, relative_difference <dbl>, #> #   similarity_strength_index <dbl>, difference_index <dbl>, #> #   rank_difference <dbl>, percentile_difference <dbl>, #> #   logarithmic_ratio <dbl>, standardized_weight_x <dbl>, #> #   standardized_weight_y <dbl>, standardized_score_inflation <dbl> #>  #> Summary metrics of differences #> # A tibble: 22 × 3 #>    category          metric                value #>    <chr>             <chr>                 <dbl> #>  1 Weight Deviations Mean Abs. Diff.      0.0437 #>  2 Weight Deviations Median Abs. Diff.    0.0278 #>  3 Weight Deviations RMS Diff.            0.0667 #>  4 Weight Deviations Max Abs. Diff.       0.251  #>  5 Weight Deviations Rel. Mean Abs. Diff. 0.393  #>  6 Weight Deviations CV Ratio             1.14   #>  7 Correlations      Pearson              0.882  #>  8 Correlations      Spearman             0.834  #>  9 Correlations      Kendall              0.665  #> 10 Correlations      Distance             0.772  #> # ℹ 12 more rows #>  #> Network metrics #> # A tibble: 13 × 3 #>    metric                             x        y #>    <chr>                          <dbl>    <dbl> #>  1 Node Count                  9   e+ 0 9   e+ 0 #>  2 Edge Count                  7.2 e+ 1 7.1 e+ 1 #>  3 Network Density             1   e+ 0 9.86e- 1 #>  4 Mean Distance               4.86e- 2 6.27e- 2 #>  5 Mean Out-Strength           1   e+ 0 1   e+ 0 #>  6 SD Out-Strength             9.68e- 1 7.04e- 1 #>  7 Mean In-Strength            1   e+ 0 1   e+ 0 #>  8 SD In-Strength              5.55e-17 3.93e-17 #>  9 Mean Out-Degree             8   e+ 0 7.89e+ 0 #> 10 SD Out-Degree               1.80e+ 0 1.17e+ 0 #> 11 Centralization (Out-Degree) 1.09e- 1 1.25e- 1 #> 12 Centralization (In-Degree)  1.09e- 1 1.25e- 1 #> 13 Reciprocity                 8.92e- 1 8.75e- 1 #>  #> Centrality differences #> # A tibble: 81 × 5 #>    state    centrality          x     y difference #>    <fct>    <chr>           <dbl> <dbl>      <dbl> #>  1 adapt    OutStrength     1     1         0      #>  2 adapt    InStrength      0.241 0.509    -0.267  #>  3 adapt    ClosenessIn    11.4   3.85      7.52   #>  4 adapt    ClosenessOut    1.11  1.55     -0.445  #>  5 adapt    Closeness      15.4   6.32      9.13   #>  6 adapt    Betweenness     0     4        -4      #>  7 adapt    BetweennessRSP  1     3        -2      #>  8 adapt    Diffusion       5.82  5.28      0.544  #>  9 adapt    Clustering      0.406 0.285     0.121  #> 10 cohesion OutStrength     0.962 0.988    -0.0260 #> # ℹ 71 more rows #>  #> Centrality correlations #> # A tibble: 9 × 3 #>   centrality     Centrality     correlation #>   <chr>          <chr>                <dbl> #> 1 Betweenness    Betweenness          0.324 #> 2 BetweennessRSP BetweennessRSP       0.986 #> 3 Closeness      Closeness            0.501 #> 4 ClosenessIn    ClosenessIn          0.606 #> 5 ClosenessOut   ClosenessOut         0.330 #> 6 Clustering     Clustering           0.831 #> 7 Diffusion      Diffusion            0.980 #> 8 InStrength     InStrength           0.971 #> 9 OutStrength    OutStrength          0.983"},{"path":"http://sonsoles.me/tna/reference/print.tna_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a TNA Data Object — print.tna_data","title":"Print a TNA Data Object — print.tna_data","text":"Print TNA Data Object","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a TNA Data Object — print.tna_data","text":"","code":"# S3 method for class 'tna_data' print(x, data = \"sequence\", ...)"},{"path":"http://sonsoles.me/tna/reference/print.tna_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a TNA Data Object — print.tna_data","text":"x tna_data object. data character string defines data printed tibble. Accepts either \"sequence\" (default) wide format sequence data, \"meta\", wide format metadata, \"long\" long format data. ... Arguments passed tibble print method.","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a TNA Data Object — print.tna_data","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.tna_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a TNA Data Object — print.tna_data","text":"","code":"res <- prepare_data(group_regulation_long, action = \"Action\", actor = \"Actor\", time = \"Time\") #> ── Preparing Data ────────────────────────────────────────────────────────────── #> ℹ Input data dimensions: 27533 rows, 6 columns #> ℹ First few time values: 2025-01-01 08:27:07.712698, 2025-01-01 #>   08:35:20.712698, and 2025-01-01 08:42:18.712698 #> ℹ Number of values to parse: 27533 #> ℹ Sample values: 2025-01-01 08:27:07.712698, 2025-01-01 08:35:20.712698, and #>   2025-01-01 08:42:18.712698 #> ℹ Sample of parsed times: 2025-01-01 08:27:07.712698, 2025-01-01 #>   08:35:20.712698, and 2025-01-01 08:42:18.712698 #> ℹ Time threshold for new session: 900 seconds #> ℹ Total number of sessions: 2000 #> ℹ Number of unique users: 2000 #> ℹ Total number of actions: 27533 #> ℹ Maximum sequence length: 26 actions #> ℹ Time range: 2025-01-01 08:01:16.009382 to 2025-01-01 13:03:20.238288 print(res, which = \"sequence\") #> # A tibble: 2,000 × 26 #>    T1    T2    T3    T4    T5    T6    T7    T8    T9    T10   T11   T12   T13   #>    <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #>  1 cohe… cons… disc… synt… adapt cons… plan  cons… NA    NA    NA    NA    NA    #>  2 emot… cohe… disc… synt… NA    NA    NA    NA    NA    NA    NA    NA    NA    #>  3 plan  cons… plan  NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    #>  4 disc… disc… cons… plan  cohe… cons… disc… cons… plan  plan  NA    NA    NA    #>  5 cohe… cons… plan  plan  moni… plan  cons… disc… cons… plan  plan  cohe… cons… #>  6 disc… adapt cohe… cons… disc… emot… cohe… core… disc… disc… adapt NA    NA    #>  7 disc… emot… cohe… cons… core… core… plan  plan  cons… core… cons… disc… disc… #>  8 cohe… plan  cons… plan  cons… disc… disc… synt… cons… disc… synt… adapt cons… #>  9 emot… cohe… emot… plan  moni… disc… emot… cons… moni… disc… synt… core… cons… #> 10 emot… cohe… cons… plan  plan  plan  plan  emot… plan  NA    NA    NA    NA    #> # ℹ 1,990 more rows #> # ℹ 13 more variables: T14 <chr>, T15 <chr>, T16 <chr>, T17 <chr>, T18 <chr>, #> #   T19 <chr>, T20 <chr>, T21 <chr>, T22 <chr>, T23 <chr>, T24 <chr>, #> #   T25 <chr>, T26 <chr> print(res, which = \"meta\") #> # A tibble: 2,000 × 26 #>    T1    T2    T3    T4    T5    T6    T7    T8    T9    T10   T11   T12   T13   #>    <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #>  1 cohe… cons… disc… synt… adapt cons… plan  cons… NA    NA    NA    NA    NA    #>  2 emot… cohe… disc… synt… NA    NA    NA    NA    NA    NA    NA    NA    NA    #>  3 plan  cons… plan  NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    #>  4 disc… disc… cons… plan  cohe… cons… disc… cons… plan  plan  NA    NA    NA    #>  5 cohe… cons… plan  plan  moni… plan  cons… disc… cons… plan  plan  cohe… cons… #>  6 disc… adapt cohe… cons… disc… emot… cohe… core… disc… disc… adapt NA    NA    #>  7 disc… emot… cohe… cons… core… core… plan  plan  cons… core… cons… disc… disc… #>  8 cohe… plan  cons… plan  cons… disc… disc… synt… cons… disc… synt… adapt cons… #>  9 emot… cohe… emot… plan  moni… disc… emot… cons… moni… disc… synt… core… cons… #> 10 emot… cohe… cons… plan  plan  plan  plan  emot… plan  NA    NA    NA    NA    #> # ℹ 1,990 more rows #> # ℹ 13 more variables: T14 <chr>, T15 <chr>, T16 <chr>, T17 <chr>, T18 <chr>, #> #   T19 <chr>, T20 <chr>, T21 <chr>, T22 <chr>, T23 <chr>, T24 <chr>, #> #   T25 <chr>, T26 <chr> print(res, which = \"long\") #> # A tibble: 2,000 × 26 #>    T1    T2    T3    T4    T5    T6    T7    T8    T9    T10   T11   T12   T13   #>    <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #>  1 cohe… cons… disc… synt… adapt cons… plan  cons… NA    NA    NA    NA    NA    #>  2 emot… cohe… disc… synt… NA    NA    NA    NA    NA    NA    NA    NA    NA    #>  3 plan  cons… plan  NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    #>  4 disc… disc… cons… plan  cohe… cons… disc… cons… plan  plan  NA    NA    NA    #>  5 cohe… cons… plan  plan  moni… plan  cons… disc… cons… plan  plan  cohe… cons… #>  6 disc… adapt cohe… cons… disc… emot… cohe… core… disc… disc… adapt NA    NA    #>  7 disc… emot… cohe… cons… core… core… plan  plan  cons… core… cons… disc… disc… #>  8 cohe… plan  cons… plan  cons… disc… disc… synt… cons… disc… synt… adapt cons… #>  9 emot… cohe… emot… plan  moni… disc… emot… cons… moni… disc… synt… core… cons… #> 10 emot… cohe… cons… plan  plan  plan  plan  emot… plan  NA    NA    NA    NA    #> # ℹ 1,990 more rows #> # ℹ 13 more variables: T14 <chr>, T15 <chr>, T16 <chr>, T17 <chr>, T18 <chr>, #> #   T19 <chr>, T20 <chr>, T21 <chr>, T22 <chr>, T23 <chr>, T24 <chr>, #> #   T25 <chr>, T26 <chr>"},{"path":"http://sonsoles.me/tna/reference/print.tna_permutation.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Permutation Test Results — print.tna_permutation","title":"Print Permutation Test Results — print.tna_permutation","text":"Print Permutation Test Results","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_permutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Permutation Test Results — print.tna_permutation","text":"","code":"# S3 method for class 'tna_permutation' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.tna_permutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Permutation Test Results — print.tna_permutation","text":"x tna_permutation object. ... Additional arguments passed tibble print method.","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_permutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Permutation Test Results — print.tna_permutation","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.tna_permutation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Permutation Test Results — print.tna_permutation","text":"","code":"model_x <- tna(group_regulation[1:200, ]) model_y <- tna(group_regulation[1001:1200, ]) # Small number of iterations for CRAN perm <- permutation_test(model_x, model_y, iter = 20) print(perm) #> # A tibble: 81 × 4 #>    edge_name           diff_true effect_size p_value #>    <chr>                   <dbl>       <dbl>   <dbl> #>  1 adapt -> adapt       0            NaN      1      #>  2 cohesion -> adapt    0.00541        0.976  0.857  #>  3 consensus -> adapt  -0.000679      -0.200  0.571  #>  4 coregulate -> adapt  0.00769        0.564  0.762  #>  5 discuss -> adapt    -0.130         -4.20   0.0476 #>  6 emotion -> adapt     0.0101         1.48   0.333  #>  7 monitor -> adapt    -0.00480       -0.333  1      #>  8 plan -> adapt        0.00339        1.52   0.0476 #>  9 synthesis -> adapt  -0.159         -1.64   0.190  #> 10 adapt -> cohesion   -0.0907        -1.26   0.286  #> # ℹ 71 more rows"},{"path":"http://sonsoles.me/tna/reference/print.tna_stability.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Centrality Stability Results — print.tna_stability","title":"Print Centrality Stability Results — print.tna_stability","text":"Print Centrality Stability Results","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_stability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Centrality Stability Results — print.tna_stability","text":"","code":"# S3 method for class 'tna_stability' print(x, ...)"},{"path":"http://sonsoles.me/tna/reference/print.tna_stability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Centrality Stability Results — print.tna_stability","text":"x tna_stability object. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/print.tna_stability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Centrality Stability Results — print.tna_stability","text":"x (invisibly).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/print.tna_stability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Centrality Stability Results — print.tna_stability","text":"","code":"model <- tna(group_regulation) # Small number of iterations and drop proportions for CRAN cs <- estimate_cs(   model,   measures = c(\"InStrength\", \"OutStrength\"),   drop_prop = seq(0.3, 0.9, by = 0.2),   iter = 10 ) print(cs) #> Centrality Stability Coefficients #>  #>  InStrength OutStrength  #>         0.9         0.9"},{"path":"http://sonsoles.me/tna/reference/prune.html","id":null,"dir":"Reference","previous_headings":"","what":"Prune a Transition Network based on Transition Probabilities — prune","title":"Prune a Transition Network based on Transition Probabilities — prune","text":"Prunes network represented tna object removing edges based specified threshold, lowest percent non-zero edge weights, disparity filter algorithm (Serrano et al., 2009). ensures network remains weakly connected. Prunes network represented tna object removing edges based specified threshold, lowest percent non-zero edge weights, disparity filter algorithm (Serrano et al., 2009). ensures network remains weakly connected.","code":""},{"path":"http://sonsoles.me/tna/reference/prune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prune a Transition Network based on Transition Probabilities — prune","text":"","code":"prune(x, ...)  # S3 method for class 'tna' prune(   x,   method = \"threshold\",   threshold = 0.1,   lowest = 0.05,   level = 0.5,   boot = NULL,   ... )  # S3 method for class 'group_tna' prune(x, ...)"},{"path":"http://sonsoles.me/tna/reference/prune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prune a Transition Network based on Transition Probabilities — prune","text":"x object class tna group_tna ... Arguments passed bootstrap() using method = \"bootstrap\" tna_bootstrap supplied. method character string describing pruning method. available options \"threshold\", \"lowest\", \"bootstrap\" \"disparity\", corresponding methods listed Details. default \"threshold\". threshold numeric value specifying edge weight threshold. Edges weights equal threshold considered removal. lowest numeric value specifying lowest percentage non-zero edges. percentage edges lowest weights considered removal. default 0.05. level numeric value representing significance level disparity filter. Defaults 0.5. boot tna_bootstrap object used pruning method \"boot\". method argument ignored argument supplied.","code":""},{"path":"http://sonsoles.me/tna/reference/prune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prune a Transition Network based on Transition Probabilities — prune","text":"pruned tna group_tna object. Details pruning can viewed pruning_details(). original model can restored deprune().","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/prune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prune a Transition Network based on Transition Probabilities — prune","text":"","code":"model <- tna(group_regulation) pruned_threshold <- prune(model, method = \"threshold\", threshold = 0.1) pruned_percentile <- prune(model, method = \"lowest\", lowest = 0.05) pruned_disparity <- prune(model, method = \"disparity\", level = 0.5)"},{"path":"http://sonsoles.me/tna/reference/pruning_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Detailed Information on the Pruning Results — pruning_details","title":"Print Detailed Information on the Pruning Results — pruning_details","text":"Print Detailed Information Pruning Results","code":""},{"path":"http://sonsoles.me/tna/reference/pruning_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Detailed Information on the Pruning Results — pruning_details","text":"","code":"pruning_details(x, ...)  # S3 method for class 'tna' pruning_details(x, ...)  # S3 method for class 'group_tna' pruning_details(x, ...)"},{"path":"http://sonsoles.me/tna/reference/pruning_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Detailed Information on the Pruning Results — pruning_details","text":"x tna group_tna object. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/pruning_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Detailed Information on the Pruning Results — pruning_details","text":"data.frame containing removed edges x tna object, list data.frame objects case group_tna object.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/pruning_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Detailed Information on the Pruning Results — pruning_details","text":"","code":"model <- tna(group_regulation) pruned_threshold <- prune(model, method = \"threshold\", threshold = 0.1) pruning_details(pruned_threshold) #> **Pruning Details** #>  #> Method used: User-specified threshold (0.1) #> Number of removed edges: 49 #> Number of retained edges: 29 #>  #> **Removed edges** #>  #>          from         to       weight #> 1    cohesion      adapt 0.0029498525 #> 2   consensus      adapt 0.0047400853 #> 3  coregulate      adapt 0.0162436548 #> 4     discuss      adapt 0.0713743356 #> 5     emotion      adapt 0.0024673951 #> 6     monitor      adapt 0.0111653873 #> 7        plan      adapt 0.0009745006 #> 8    cohesion   cohesion 0.0271386431 #> 9   consensus   cohesion 0.0148522673 #> 10 coregulate   cohesion 0.0360406091 #> 11    discuss   cohesion 0.0475828904 #> 12    monitor   cohesion 0.0558269365 #> 13       plan   cohesion 0.0251745980 #> 14  synthesis   cohesion 0.0337423313 #> 15  consensus  consensus 0.0820034761 #> 16      adapt coregulate 0.0216110020 #> 17 coregulate coregulate 0.0233502538 #> 18    discuss coregulate 0.0842824601 #> 19    emotion coregulate 0.0341910469 #> 20    monitor coregulate 0.0579204466 #> 21       plan coregulate 0.0172161767 #> 22  synthesis coregulate 0.0444785276 #> 23      adapt    discuss 0.0589390963 #> 24   cohesion    discuss 0.0595870206 #> 25       plan    discuss 0.0678902063 #> 26  synthesis    discuss 0.0628834356 #> 27  consensus    emotion 0.0726813083 #> 28    emotion    emotion 0.0768417342 #> 29    monitor    emotion 0.0907187718 #> 30  synthesis    emotion 0.0705521472 #> 31      adapt    monitor 0.0333988212 #> 32   cohesion    monitor 0.0330383481 #> 33  consensus    monitor 0.0466108390 #> 34 coregulate    monitor 0.0862944162 #> 35    discuss    monitor 0.0222728423 #> 36    emotion    monitor 0.0363059570 #> 37    monitor    monitor 0.0181437544 #> 38       plan    monitor 0.0755237941 #> 39  synthesis    monitor 0.0122699387 #> 40      adapt       plan 0.0157170923 #> 41    discuss       plan 0.0116426221 #> 42    emotion       plan 0.0997532605 #> 43  synthesis       plan 0.0751533742 #> 44   cohesion  synthesis 0.0035398230 #> 45  consensus  synthesis 0.0075841365 #> 46 coregulate  synthesis 0.0187817259 #> 47    emotion  synthesis 0.0028198802 #> 48    monitor  synthesis 0.0160502442 #> 49       plan  synthesis 0.0017865844"},{"path":"http://sonsoles.me/tna/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. igraph .igraph stats simulate","code":""},{"path":"http://sonsoles.me/tna/reference/rename_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Clusters — rename_groups","title":"Rename Clusters — rename_groups","text":"Rename Clusters","code":""},{"path":"http://sonsoles.me/tna/reference/rename_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Clusters — rename_groups","text":"","code":"rename_groups(x, new_names)"},{"path":"http://sonsoles.me/tna/reference/rename_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Clusters — rename_groups","text":"x group_tna object. new_names character vector containing one name per cluster.","code":""},{"path":"http://sonsoles.me/tna/reference/rename_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename Clusters — rename_groups","text":"renamed group_tna object.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/rename_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename Clusters — rename_groups","text":"","code":"model <- group_model(engagement_mmm) model_renamed <- rename_groups(model, c(\"A\", \"B\", \"C\"))"},{"path":"http://sonsoles.me/tna/reference/reprune.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore Previous Pruning of a Transition Network Analysis Model — reprune","title":"Restore Previous Pruning of a Transition Network Analysis Model — reprune","text":"Restore Previous Pruning Transition Network Analysis Model","code":""},{"path":"http://sonsoles.me/tna/reference/reprune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore Previous Pruning of a Transition Network Analysis Model — reprune","text":"","code":"reprune(x, ...)  # S3 method for class 'group_tna' reprune(x, ...)"},{"path":"http://sonsoles.me/tna/reference/reprune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore Previous Pruning of a Transition Network Analysis Model — reprune","text":"x tna group_tna object. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/reprune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restore Previous Pruning of a Transition Network Analysis Model — reprune","text":"tna group_tna object pruned. previous pruning result can reactivated reprune().","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/reprune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restore Previous Pruning of a Transition Network Analysis Model — reprune","text":"","code":"model <- tna(group_regulation) pruned_model <- prune(model, method = \"threshold\", threshold = 0.1) depruned_model <- deprune(pruned_model) # restore original model repruned_model <- reprune(depruned_model) # reapply the previous pruning"},{"path":"http://sonsoles.me/tna/reference/simulate.tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Data from a Transition Network Analysis Model — simulate.tna","title":"Simulate Data from a Transition Network Analysis Model — simulate.tna","text":"Simulate Data Transition Network Analysis Model","code":""},{"path":"http://sonsoles.me/tna/reference/simulate.tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Data from a Transition Network Analysis Model — simulate.tna","text":"","code":"# S3 method for class 'tna' simulate(   object,   nsim = 1,   seed = NULL,   max_len = 100L,   na_range = c(0L, 0L),   ... )"},{"path":"http://sonsoles.me/tna/reference/simulate.tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Data from a Transition Network Analysis Model — simulate.tna","text":"object tna object. edge weights must transition probabilities, .e., model must type = \"relative\". nsim integer giving number sequences simulate. default 1. seed Ignored. Please use set.seed() manually. max_len integer giving maximum length simulated sequences. missing values generated, length simulated sequences. na_range integer vector length 2 giving minimum maximum number missing values generate sequence. number missing values drawn uniformly range. values zero (default), missing values generated. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/simulate.tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Data from a Transition Network Analysis Model — simulate.tna","text":"data.frame simulated sequence data nsim rows max_len columns.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/simulate.tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Data from a Transition Network Analysis Model — simulate.tna","text":"","code":"model <- tna(group_regulation) sim <- simulate(model, nsim = 10, max_len = 10)"},{"path":"http://sonsoles.me/tna/reference/summary.group_tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Summary of Network Metrics for a grouped Transition Network — summary.group_tna","title":"Calculate Summary of Network Metrics for a grouped Transition Network — summary.group_tna","text":"function calculates variety network metrics tna object. computes key metrics node edge counts, network density, mean distance, strength measures, degree centrality, reciprocity.","code":""},{"path":"http://sonsoles.me/tna/reference/summary.group_tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Summary of Network Metrics for a grouped Transition Network — summary.group_tna","text":"","code":"# S3 method for class 'group_tna' summary(object, combined = TRUE, ...)"},{"path":"http://sonsoles.me/tna/reference/summary.group_tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Summary of Network Metrics for a grouped Transition Network — summary.group_tna","text":"object group_tna object. combined logical indicating whether summary results combined single data frame clusters (defaults TRUE) ... Ignored","code":""},{"path":"http://sonsoles.me/tna/reference/summary.group_tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Summary of Network Metrics for a grouped Transition Network — summary.group_tna","text":"summary.group_tna object list lists combined data.frame  containing following network metrics: node_count: total number nodes. edge_count: total number edges. network_Density: density network. mean_distance: mean shortest path length. mean_out_strength: mean -strength nodes. sd_out_strength: standard deviation -strength. mean_in_strength: mean -strength nodes. sd_in_strength: standard deviation -strength. mean_out_degree: mean -degree nodes. sd_out_degree: standard deviation -degree. centralization_out_degree: centralization -degree. centralization_in_degree: centralization -degree. reciprocity: reciprocity network.","code":""},{"path":"http://sonsoles.me/tna/reference/summary.group_tna.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Summary of Network Metrics for a grouped Transition Network — summary.group_tna","text":"function extracts igraph network cluster computes following network metrics: Node count: Total number nodes network. Edge count: Total number edges network. Network density: Proportion possible edges present network. Mean distance: average shortest path length nodes. Mean standard deviation -strength -strength: Measures total weight outgoing incoming edges node. Mean standard deviation -degree: number outgoing edges node. Centralization -degree -degree: Measures centralized network based degrees nodes. Reciprocity: proportion edges reciprocated (.e., mutual edges nodes).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/summary.group_tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Summary of Network Metrics for a grouped Transition Network — summary.group_tna","text":"","code":"group <- c(rep(\"High\", 1000), rep(\"Low\", 1000)) model <- group_model(group_regulation, group = group) summary(model) #> metric #>  #>  [1] \"Node Count\"                  \"Edge Count\"                  #>  [3] \"Network Density\"             \"Mean Distance\"               #>  [5] \"Mean Out-Strength\"           \"SD Out-Strength\"             #>  [7] \"Mean In-Strength\"            \"SD In-Strength\"              #>  [9] \"Mean Out-Degree\"             \"SD Out-Degree\"               #> [11] \"Centralization (Out-Degree)\" \"Centralization (In-Degree)\"  #> [13] \"Reciprocity\"                 #>  #> Group 1 #>  #>  [1] 9.000000e+00 7.600000e+01 1.000000e+00 4.228677e-02 1.000000e+00 #>  [6] 9.141475e-01 1.000000e+00 7.850462e-17 8.444444e+00 1.130388e+00 #> [11] 4.687500e-02 4.687500e-02 9.565217e-01 #>  #> Group 2 #>  #>  [1] 9.000000e+00 7.500000e+01 1.000000e+00 5.595597e-02 1.000000e+00 #>  [6] 7.185672e-01 1.000000e+00 3.925231e-17 8.333333e+00 8.660254e-01 #> [11] 6.250000e-02 6.250000e-02 9.411765e-01"},{"path":"http://sonsoles.me/tna/reference/summary.group_tna_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Bootstrap Results for a Grouped Transition Network — summary.group_tna_bootstrap","title":"Summarize Bootstrap Results for a Grouped Transition Network — summary.group_tna_bootstrap","text":"Summarize Bootstrap Results Grouped Transition Network","code":""},{"path":"http://sonsoles.me/tna/reference/summary.group_tna_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Bootstrap Results for a Grouped Transition Network — summary.group_tna_bootstrap","text":"","code":"# S3 method for class 'group_tna_bootstrap' summary(object, ...)"},{"path":"http://sonsoles.me/tna/reference/summary.group_tna_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Bootstrap Results for a Grouped Transition Network — summary.group_tna_bootstrap","text":"object group_tna_bootstrap object. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/summary.group_tna_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Bootstrap Results for a Grouped Transition Network — summary.group_tna_bootstrap","text":"summary.group_tna_bootstrap object containing weight, estimated p-value confidence interval edge cluster.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/summary.group_tna_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Bootstrap Results for a Grouped Transition Network — summary.group_tna_bootstrap","text":"","code":"model <- group_tna(engagement_mmm) # Small number of iterations for CRAN boot <- bootstrap(model, iter = 10) summary(boot) #>        group       from         to     weight    p_value   sig   cr_lower #> 1  Cluster 1     Active     Active 0.70615034 0.09090909 FALSE 0.52961276 #> 2  Cluster 1    Average     Active 0.51339286 0.09090909 FALSE 0.38504464 #> 3  Cluster 1 Disengaged     Active 0.33333333 0.36363636 FALSE 0.25000000 #> 4  Cluster 1     Active    Average 0.29384966 0.09090909 FALSE 0.22038724 #> 5  Cluster 1    Average    Average 0.45982143 0.09090909 FALSE 0.34486607 #> 6  Cluster 1 Disengaged    Average 0.38095238 0.18181818 FALSE 0.28571429 #> 7  Cluster 1    Average Disengaged 0.02678571 0.72727273 FALSE 0.02008929 #> 8  Cluster 1 Disengaged Disengaged 0.28571429 0.18181818 FALSE 0.21428571 #> 9  Cluster 2     Active     Active 0.49242424 0.09090909 FALSE 0.36931818 #> 10 Cluster 2    Average     Active 0.32495164 0.09090909 FALSE 0.24371373 #> 11 Cluster 2 Disengaged     Active 0.33333333 0.18181818 FALSE 0.25000000 #> 12 Cluster 2     Active    Average 0.44191919 0.09090909 FALSE 0.33143939 #> 13 Cluster 2    Average    Average 0.58607350 0.09090909 FALSE 0.43955513 #> 14 Cluster 2 Disengaged    Average 0.57333333 0.09090909 FALSE 0.43000000 #> 15 Cluster 2     Active Disengaged 0.06565657 0.27272727 FALSE 0.04924242 #> 16 Cluster 2    Average Disengaged 0.08897485 0.18181818 FALSE 0.06673114 #> 17 Cluster 2 Disengaged Disengaged 0.09333333 0.36363636 FALSE 0.07000000 #> 18 Cluster 3     Active     Active 0.30067568 0.09090909 FALSE 0.22550676 #> 19 Cluster 3    Average     Active 0.15940767 0.09090909 FALSE 0.11955575 #> 20 Cluster 3 Disengaged     Active 0.06578947 0.27272727 FALSE 0.04934211 #> 21 Cluster 3     Active    Average 0.60810811 0.09090909 FALSE 0.45608108 #> 22 Cluster 3    Average    Average 0.57317073 0.09090909 FALSE 0.42987805 #> 23 Cluster 3 Disengaged    Average 0.47076023 0.09090909 FALSE 0.35307018 #> 24 Cluster 3     Active Disengaged 0.09121622 0.09090909 FALSE 0.06841216 #> 25 Cluster 3    Average Disengaged 0.26742160 0.09090909 FALSE 0.20056620 #> 26 Cluster 3 Disengaged Disengaged 0.46345029 0.09090909 FALSE 0.34758772 #>      cr_upper    ci_lower   ci_upper #> 1  0.88268793 0.668737887 0.74482545 #> 2  0.64174107 0.457951838 0.56742483 #> 3  0.41666667 0.253002070 0.54851190 #> 4  0.36731207 0.255174549 0.33126211 #> 5  0.57477679 0.404073276 0.50000000 #> 6  0.47619048 0.197644928 0.42478992 #> 7  0.03348214 0.005231274 0.04637509 #> 8  0.35714286 0.219012605 0.34013158 #> 9  0.61553030 0.465256700 0.52701432 #> 10 0.40618956 0.302604338 0.36285623 #> 11 0.41666667 0.287717933 0.40902778 #> 12 0.55239899 0.413593858 0.46944246 #> 13 0.73259188 0.558018913 0.60234272 #> 14 0.71666667 0.490625000 0.62010218 #> 15 0.08207071 0.044139011 0.08934321 #> 16 0.11121857 0.078991968 0.10864481 #> 17 0.11666667 0.057142857 0.13187867 #> 18 0.37584459 0.258195057 0.33227848 #> 19 0.19925958 0.147430276 0.17789130 #> 20 0.08223684 0.053207360 0.08741705 #> 21 0.76013514 0.578244681 0.65930539 #> 22 0.71646341 0.555387460 0.59214533 #> 23 0.58845029 0.456262394 0.49002503 #> 24 0.11402027 0.073961938 0.10450563 #> 25 0.33427700 0.250382805 0.28353028 #> 26 0.57931287 0.432195323 0.48100129"},{"path":"http://sonsoles.me/tna/reference/summary.tna.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Summary of Network Metrics for a Transition Network — summary.tna","title":"Calculate Summary of Network Metrics for a Transition Network — summary.tna","text":"function calculates variety network metrics tna object. computes key metrics node edge counts, network density, mean distance, strength measures, degree centrality, reciprocity.","code":""},{"path":"http://sonsoles.me/tna/reference/summary.tna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Summary of Network Metrics for a Transition Network — summary.tna","text":"","code":"# S3 method for class 'tna' summary(object, ...)"},{"path":"http://sonsoles.me/tna/reference/summary.tna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Summary of Network Metrics for a Transition Network — summary.tna","text":"object tna object. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/summary.tna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Summary of Network Metrics for a Transition Network — summary.tna","text":"named list containing following network metrics (invisibly): node_count: total number nodes. edge_count: total number edges. network_Density: density network. mean_distance: mean shortest path length. mean_out_strength: mean -strength nodes. sd_out_strength: standard deviation -strength. mean_in_strength: mean -strength nodes. sd_in_strength: standard deviation -strength. mean_out_degree: mean -degree nodes. sd_out_degree: standard deviation -degree. centralization_out_degree: centralization -degree. centralization_in_degree: centralization -degree. reciprocity: reciprocity network.","code":""},{"path":"http://sonsoles.me/tna/reference/summary.tna.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Summary of Network Metrics for a Transition Network — summary.tna","text":"function extracts igraph network  computes following network metrics: Node count: Total number nodes network. Edge count: Total number edges network. Network density: Proportion possible edges present network. Mean distance: average shortest path length nodes. Mean standard deviation -strength -strength: Measures total weight outgoing incoming edges node. Mean standard deviation -degree: number outgoing edges node. Centralization -degree -degree: Measures centralized network based degrees nodes. Reciprocity: proportion edges reciprocated (.e., mutual edges nodes). summary metrics printed console.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/summary.tna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Summary of Network Metrics for a Transition Network — summary.tna","text":"","code":"model <- tna(group_regulation) summary(model) #> # A tibble: 13 × 2 #>    metric                         value #>  * <chr>                          <dbl> #>  1 Node Count                  9   e+ 0 #>  2 Edge Count                  7.8 e+ 1 #>  3 Network Density             1   e+ 0 #>  4 Mean Distance               4.72e- 2 #>  5 Mean Out-Strength           1   e+ 0 #>  6 SD Out-Strength             8.07e- 1 #>  7 Mean In-Strength            1   e+ 0 #>  8 SD In-Strength              6.80e-17 #>  9 Mean Out-Degree             8.67e+ 0 #> 10 SD Out-Degree               7.07e- 1 #> 11 Centralization (Out-Degree) 1.56e- 2 #> 12 Centralization (In-Degree)  1.56e- 2 #> 13 Reciprocity                 9.86e- 1"},{"path":"http://sonsoles.me/tna/reference/summary.tna_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Bootstrap Results — summary.tna_bootstrap","title":"Summarize Bootstrap Results — summary.tna_bootstrap","text":"Summarize Bootstrap Results","code":""},{"path":"http://sonsoles.me/tna/reference/summary.tna_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Bootstrap Results — summary.tna_bootstrap","text":"","code":"# S3 method for class 'tna_bootstrap' summary(object, ...)"},{"path":"http://sonsoles.me/tna/reference/summary.tna_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Bootstrap Results — summary.tna_bootstrap","text":"object tna_bootstrap object. ... Ignored.","code":""},{"path":"http://sonsoles.me/tna/reference/summary.tna_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Bootstrap Results — summary.tna_bootstrap","text":"summary.tna_bootstrap object containing weight, estimated p-value confidence interval edge.","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/summary.tna_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Bootstrap Results — summary.tna_bootstrap","text":"","code":"model <- tna(group_regulation) # Small number of iterations for CRAN boot <- bootstrap(model, iter = 50) summary(boot) #>          from         to       weight    p_value   sig     cr_lower    cr_upper #> 2    cohesion      adapt 0.0029498525 0.49019608 FALSE 0.0022123894 0.003687316 #> 3   consensus      adapt 0.0047400853 0.29411765 FALSE 0.0035550640 0.005925107 #> 4  coregulate      adapt 0.0162436548 0.15686275 FALSE 0.0121827411 0.020304569 #> 5     discuss      adapt 0.0713743356 0.01960784  TRUE 0.0535307517 0.089217920 #> 6     emotion      adapt 0.0024673951 0.56862745 FALSE 0.0018505464 0.003084244 #> 7     monitor      adapt 0.0111653873 0.33333333 FALSE 0.0083740405 0.013956734 #> 8        plan      adapt 0.0009745006 0.58823529 FALSE 0.0007308754 0.001218126 #> 9   synthesis      adapt 0.2346625767 0.01960784  TRUE 0.1759969325 0.293328221 #> 10      adapt   cohesion 0.2730844794 0.01960784  TRUE 0.2048133595 0.341355599 #> 11   cohesion   cohesion 0.0271386431 0.09803922 FALSE 0.0203539823 0.033923304 #> 12  consensus   cohesion 0.0148522673 0.03921569  TRUE 0.0111392005 0.018565334 #> 13 coregulate   cohesion 0.0360406091 0.03921569  TRUE 0.0270304569 0.045050761 #> 14    discuss   cohesion 0.0475828904 0.01960784  TRUE 0.0356871678 0.059478613 #> 15    emotion   cohesion 0.3253436729 0.01960784  TRUE 0.2440077547 0.406679591 #> 16    monitor   cohesion 0.0558269365 0.03921569  TRUE 0.0418702024 0.069783671 #> 17       plan   cohesion 0.0251745980 0.03921569  TRUE 0.0188809485 0.031468248 #> 18  synthesis   cohesion 0.0337423313 0.19607843 FALSE 0.0253067485 0.042177914 #> 19      adapt  consensus 0.4774066798 0.01960784  TRUE 0.3580550098 0.596758350 #> 20   cohesion  consensus 0.4979351032 0.01960784  TRUE 0.3734513274 0.622418879 #> 21  consensus  consensus 0.0820034761 0.01960784  TRUE 0.0615026070 0.102504345 #> 22 coregulate  consensus 0.1345177665 0.01960784  TRUE 0.1008883249 0.168147208 #> 23    discuss  consensus 0.3211845103 0.01960784  TRUE 0.2408883827 0.401480638 #> 24    emotion  consensus 0.3204088826 0.01960784  TRUE 0.2403066620 0.400511103 #> 25    monitor  consensus 0.1591067690 0.01960784  TRUE 0.1193300768 0.198883461 #> 26       plan  consensus 0.2904011694 0.01960784  TRUE 0.2178008771 0.363001462 #> 27  synthesis  consensus 0.4662576687 0.01960784  TRUE 0.3496932515 0.582822086 #> 28      adapt coregulate 0.0216110020 0.37254902 FALSE 0.0162082515 0.027013752 #> 29   cohesion coregulate 0.1191740413 0.01960784  TRUE 0.0893805310 0.148967552 #> 30  consensus coregulate 0.1877073787 0.01960784  TRUE 0.1407805340 0.234634223 #> 31 coregulate coregulate 0.0233502538 0.03921569  TRUE 0.0175126904 0.029187817 #> 32    discuss coregulate 0.0842824601 0.01960784  TRUE 0.0632118451 0.105353075 #> 33    emotion coregulate 0.0341910469 0.03921569  TRUE 0.0256432852 0.042738809 #> 34    monitor coregulate 0.0579204466 0.01960784  TRUE 0.0434403350 0.072400558 #> 35       plan coregulate 0.0172161767 0.01960784  TRUE 0.0129121325 0.021520221 #> 36  synthesis coregulate 0.0444785276 0.21568627 FALSE 0.0333588957 0.055598160 #> 37      adapt    discuss 0.0589390963 0.17647059 FALSE 0.0442043222 0.073673870 #> 38   cohesion    discuss 0.0595870206 0.03921569  TRUE 0.0446902655 0.074483776 #> 39  consensus    discuss 0.1880233844 0.01960784  TRUE 0.1410175383 0.235029231 #> 40 coregulate    discuss 0.2736040609 0.01960784  TRUE 0.2052030457 0.342005076 #> 41    discuss    discuss 0.1948873703 0.01960784  TRUE 0.1461655277 0.243609213 #> 42    emotion    discuss 0.1018681706 0.01960784  TRUE 0.0764011280 0.127335213 #> 43    monitor    discuss 0.3754361479 0.01960784  TRUE 0.2815771110 0.469295185 #> 44       plan    discuss 0.0678902063 0.01960784  TRUE 0.0509176547 0.084862758 #> 45  synthesis    discuss 0.0628834356 0.13725490 FALSE 0.0471625767 0.078604294 #> 46      adapt    emotion 0.1198428291 0.09803922 FALSE 0.0898821218 0.149803536 #> 47   cohesion    emotion 0.1156342183 0.01960784  TRUE 0.0867256637 0.144542773 #> 48  consensus    emotion 0.0726813083 0.01960784  TRUE 0.0545109812 0.090851635 #> 49 coregulate    emotion 0.1720812183 0.01960784  TRUE 0.1290609137 0.215101523 #> 50    discuss    emotion 0.1057960010 0.01960784  TRUE 0.0793470008 0.132245001 #> 51    emotion    emotion 0.0768417342 0.01960784  TRUE 0.0576313007 0.096052168 #> 52    monitor    emotion 0.0907187718 0.01960784  TRUE 0.0680390789 0.113398465 #> 53       plan    emotion 0.1468247523 0.01960784  TRUE 0.1101185642 0.183530940 #> 54  synthesis    emotion 0.0705521472 0.07843137 FALSE 0.0529141104 0.088190184 #> 55      adapt    monitor 0.0333988212 0.25490196 FALSE 0.0250491159 0.041748527 #> 56   cohesion    monitor 0.0330383481 0.07843137 FALSE 0.0247787611 0.041297935 #> 57  consensus    monitor 0.0466108390 0.01960784  TRUE 0.0349581292 0.058263549 #> 58 coregulate    monitor 0.0862944162 0.01960784  TRUE 0.0647208122 0.107868020 #> 59    discuss    monitor 0.0222728423 0.03921569  TRUE 0.0167046317 0.027841053 #> 60    emotion    monitor 0.0363059570 0.01960784  TRUE 0.0272294677 0.045382446 #> 61    monitor    monitor 0.0181437544 0.17647059 FALSE 0.0136078158 0.022679693 #> 62       plan    monitor 0.0755237941 0.01960784  TRUE 0.0566428455 0.094404743 #> 63  synthesis    monitor 0.0122699387 0.41176471 FALSE 0.0092024540 0.015337423 #> 64      adapt       plan 0.0157170923 0.45098039 FALSE 0.0117878193 0.019646365 #> 65   cohesion       plan 0.1410029499 0.01960784  TRUE 0.1057522124 0.176253687 #> 66  consensus       plan 0.3957971243 0.01960784  TRUE 0.2968478433 0.494746405 #> 67 coregulate       plan 0.2390862944 0.01960784  TRUE 0.1793147208 0.298857868 #> 68    discuss       plan 0.0116426221 0.03921569  TRUE 0.0087319666 0.014553278 #> 69    emotion       plan 0.0997532605 0.01960784  TRUE 0.0748149454 0.124691576 #> 70    monitor       plan 0.2156315422 0.01960784  TRUE 0.1617236567 0.269539428 #> 71       plan       plan 0.3742082183 0.01960784  TRUE 0.2806561637 0.467760273 #> 72  synthesis       plan 0.0751533742 0.15686275 FALSE 0.0563650307 0.093941718 #> 74   cohesion  synthesis 0.0035398230 0.58823529 FALSE 0.0026548673 0.004424779 #> 75  consensus  synthesis 0.0075841365 0.07843137 FALSE 0.0056881024 0.009480171 #> 76 coregulate  synthesis 0.0187817259 0.13725490 FALSE 0.0140862944 0.023477157 #> 77    discuss  synthesis 0.1409769679 0.01960784  TRUE 0.1057327259 0.176221210 #> 78    emotion  synthesis 0.0028198802 0.52941176 FALSE 0.0021149101 0.003524850 #> 79    monitor  synthesis 0.0160502442 0.23529412 FALSE 0.0120376832 0.020062805 #> 80       plan  synthesis 0.0017865844 0.45098039 FALSE 0.0013399383 0.002233230 #>        ci_lower    ci_upper #> 2  0.0007095839 0.005874300 #> 3  0.0029916438 0.006498102 #> 4  0.0119798773 0.020745773 #> 5  0.0649130286 0.079164878 #> 6  0.0011729133 0.004909188 #> 7  0.0059568650 0.016683981 #> 8  0.0002004791 0.001512391 #> 9  0.2155773689 0.266544626 #> 10 0.2382946815 0.303721351 #> 11 0.0214115469 0.036165785 #> 12 0.0131257797 0.017066902 #> 13 0.0283177769 0.042182559 #> 14 0.0405893458 0.053356120 #> 15 0.3088115230 0.342707472 #> 16 0.0477052050 0.066218123 #> 17 0.0223962717 0.029653348 #> 18 0.0212742850 0.047155713 #> 19 0.4483244726 0.530496623 #> 20 0.4740775994 0.520533995 #> 21 0.0754142962 0.087458921 #> 22 0.1211580182 0.145651356 #> 23 0.3085209078 0.334008433 #> 24 0.3047425613 0.339213294 #> 25 0.1415221534 0.184259065 #> 26 0.2827892370 0.298675938 #> 27 0.4162003265 0.500089853 #> 28 0.0137308324 0.032487450 #> 29 0.1047265235 0.134351932 #> 30 0.1782248134 0.196029840 #> 31 0.0192511046 0.028766372 #> 32 0.0749885352 0.090812101 #> 33 0.0277674866 0.039982945 #> 34 0.0474534360 0.071711959 #> 35 0.0141529424 0.020028722 #> 36 0.0244231379 0.060947647 #> 37 0.0404384927 0.081861259 #> 38 0.0506162292 0.071220393 #> 39 0.1782438633 0.196290652 #> 40 0.2579948979 0.294394418 #> 41 0.1832014246 0.205142033 #> 42 0.0870485761 0.113213504 #> 43 0.3497127872 0.397720550 #> 44 0.0607026400 0.074723487 #> 45 0.0456624977 0.078994456 #> 46 0.0823282840 0.145196755 #> 47 0.1009049411 0.131747420 #> 48 0.0681718380 0.078957723 #> 49 0.1581086160 0.183710111 #> 50 0.0986398393 0.117685999 #> 51 0.0644183819 0.085867214 #> 52 0.0811369405 0.105023160 #> 53 0.1381822148 0.154541308 #> 54 0.0529783463 0.085020244 #> 55 0.0218548023 0.047199750 #> 56 0.0248024573 0.040854112 #> 57 0.0427869049 0.050514963 #> 58 0.0749331073 0.097929139 #> 59 0.0176397276 0.027208924 #> 60 0.0285344916 0.043084278 #> 61 0.0125269362 0.024088695 #> 62 0.0689718911 0.080697019 #> 63 0.0059234148 0.020980861 #> 64 0.0079296774 0.028308251 #> 65 0.1304385504 0.155101255 #> 66 0.3841463900 0.407653465 #> 67 0.2208359212 0.261909464 #> 68 0.0095289796 0.014453752 #> 69 0.0892133786 0.107535156 #> 70 0.1918934037 0.244294872 #> 71 0.3629023698 0.383077697 #> 72 0.0600481902 0.097723703 #> 74 0.0012114217 0.005991977 #> 75 0.0056852763 0.009417662 #> 76 0.0128147025 0.023571559 #> 77 0.1318519852 0.150645782 #> 78 0.0011220629 0.004118020 #> 79 0.0095899370 0.020790170 #> 80 0.0008230710 0.002705869"},{"path":"http://sonsoles.me/tna/reference/tna-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The tna Package. — tna-package","title":"The tna Package. — tna-package","text":"Provides tools performing transition network analysis (TNA), including functions building TNA models, plotting transition networks, calculating centrality measures. package relies qgraph igraph network plotting centrality measure calculations.","code":""},{"path":"http://sonsoles.me/tna/reference/tna-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The tna Package. — tna-package","text":"Saqr M., López-Pernas S., Törmänen T., Kaliisa R., Misiejuk K., Tikka S. (2025). Transition Network Analysis: Novel Framework Modeling, Visualizing, Identifying Temporal Patterns Learners Learning Processes. Proceedings 15th International Learning Analytics Knowledge Conference (LAK '25), 351-361. Banerjee ., Chandrasekhar ., Duflo E., Jackson M. (2014). Gossip: Identifying Central Individuals Social Network. Working Paper. Kivimaki, ., Lebichot, B., Saramaki, J., Saerens, M. (2016). Two betweenness centrality measures based Randomized Shortest Paths. Scientific Reports, 6, 19668. Serrano, M. ., Boguna, M., Vespignani, . (2009). Extracting multiscale backbone complex weighted networks. Proceedings National Academy Sciences, 106, 6483-6488. Zhang, B., Horvath, S. (2005). general framework weighted gene co-expression network analysis. Statistical Applications Genetics Molecular Biology, 4(1).","code":""},{"path":[]},{"path":"http://sonsoles.me/tna/reference/tna-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The tna Package. — tna-package","text":"Sonsoles López-Pernas, Santtu Tikka, Mohammed Saqr","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-100","dir":"Changelog","previous_headings":"","what":"tna 1.0.0","title":"tna 1.0.0","text":"CRAN release function plot_sequences() gains argument ncol selecting number columns facets.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-060","dir":"Changelog","previous_headings":"","what":"tna 0.6.0","title":"tna 0.6.0","text":"Added new method plot_sequences() sequence index plots state distribution plots.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-051","dir":"Changelog","previous_headings":"","what":"tna 0.5.1","title":"tna 0.5.1","text":"Fixed handling missing values group_model() stslist objects. Fixed issue plot.group_tna_permutation() resulted plotting arguments passed qgraph.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-050","dir":"Changelog","previous_headings":"","what":"tna 0.5.0","title":"tna 0.5.0","text":"CRAN release: 2025-05-26 Added new dataset group_regulation_long.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-049","dir":"Changelog","previous_headings":"","what":"tna 0.4.9","title":"tna 0.4.9","text":"Switched matrix internal data format used TNA models performance improvements across functions.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-048","dir":"Changelog","previous_headings":"","what":"tna 0.4.8","title":"tna 0.4.8","text":"Fixed issue prepare_data() resulted excessive console output.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-047","dir":"Changelog","previous_headings":"","what":"tna 0.4.7","title":"tna 0.4.7","text":"Added function import_data() read wide format sequence data long format.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-046","dir":"Changelog","previous_headings":"","what":"tna 0.4.6","title":"tna 0.4.6","text":"Added function plot_frequencies() can used plot state frequency distribution tna group_tna objects.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-045","dir":"Changelog","previous_headings":"","what":"tna 0.4.5","title":"tna 0.4.5","text":"function permutation_test() now method ungrouped (build_model()) grouped (group_model()) models. grouped models, function performs test every unique pair groups. new argument adjust added permutation_test() optionally adjust p-values using p.adjust. default, p-values adjusted (adjust = \"none\"). new argument groupwise added group_model(). FALSE (default), scaling methods listed scaling performed globally groups. TRUE, scaling performed within group instead (default behavior previous versions package). Added simulate() method tna objects. models type = \"relative\", function simulates sequence data based initial probabilities transition probability matrix.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-044","dir":"Changelog","previous_headings":"","what":"tna 0.4.4","title":"tna 0.4.4","text":"plot.tna_centralities() plot.group_tna_centralities() functions now plot centralities order provided measures argument. plot.tna() plot_model() functions now use median edge weight default value cut argument. Fixed columns bootstrap() output, inverted true edge direction. plot method added bootstrap() output, plots corresponding network non-significant edges pruned.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-043","dir":"Changelog","previous_headings":"","what":"tna 0.4.3","title":"tna 0.4.3","text":"permutation_test() function now properly checks arguments x y can compared. p-value calculations permutation_test() bootstrap() adjusted adding 1 number permutations/bootstrap samples number extreme events estimates never zero. documentation also clarified regarding p-values emphasizing estimates .","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-042","dir":"Changelog","previous_headings":"","what":"tna 0.4.2","title":"tna 0.4.2","text":"plot_compare() function now supports negCol posCol specifying color positive negative differences transition initial probabilities. plot_mosaic() function now plots x-axis top rotates labels 90 degrees three groups.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-041","dir":"Changelog","previous_headings":"","what":"tna 0.4.1","title":"tna 0.4.1","text":"detailed argument estimate_centrality_stability() removed. Previously argument effect output function. Removed several duplicated entries documentation.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-040","dir":"Changelog","previous_headings":"","what":"tna 0.4.0","title":"tna 0.4.0","text":"CRAN release: 2025-03-01 prepare_data() function now produces object class tna_data, can directly used argument build_model() methods. prepare_data() function now supports order used together time actor. prepare_data() function gains unused_fn argument tidyr::pivot_wider() process extra columns. default keep columns use first value. Added function compare() compare tna models weight matrices. function produces object class tna_comparison print() plot() methods. Added function plot_mosaic() can used produce mosaic plots transition counts frequency-based transition network models contrast state counts groups. Fixed issue plot.tna_communities() now checks availability particular community detection method plotting. Made several arguments plot methods package accessible user.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-032","dir":"Changelog","previous_headings":"","what":"tna 0.3.2","title":"tna 0.3.2","text":"event2sequence() renamed prepare_data(). function now also general can process date formats. Added method argument bootstrap(). new default option \"stability\" implements bootstrapping scheme edge weights compared range “consistent” weights (see documentation details). old functionality can accessed method = \"threshold\". Fixed issue permutatation_test() x y differing number columns. Community detection methods can now selected using methods argument communities(). build_model() function gained argument cols can used subset columns data stslist data.frame inputs. Removed verbose arguments favor options(rlib_message_verbosity = \"quiet\"). options(rlib_warning_verbosity = \"quiet\").","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-031","dir":"Changelog","previous_headings":"","what":"tna 0.3.1","title":"tna 0.3.1","text":"Fixed issue checking validity character type arguments. Improved bootstrap() function determine edge significance based deviation observed value, rather fixed threshold. Added helper function event2sequence() parse event data sequence data.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-030","dir":"Changelog","previous_headings":"","what":"tna 0.3.0","title":"tna 0.3.0","text":"CRAN release: 2024-12-11 Added support grouped sequence data (clusters).","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-020","dir":"Changelog","previous_headings":"","what":"tna 0.2.0","title":"tna 0.2.0","text":"Added bootstrapping, permutation test, centrality stability functionalities.","code":""},{"path":"http://sonsoles.me/tna/news/index.html","id":"tna-010","dir":"Changelog","previous_headings":"","what":"tna 0.1.0","title":"tna 0.1.0","text":"Initial version.","code":""}]
